{
    "name": "KitchenSinkContract",
    "structs": {},
    "methods": [
        {
            "name": "useState",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "string",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "c"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "createApp",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "optIn",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addToBox",
            "args": [
                {
                    "type": "uint64",
                    "name": "x"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addToBoxMap",
            "args": [
                {
                    "type": "string",
                    "name": "x"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "insertIntoBoxRef",
            "args": [
                {
                    "type": "byte[]",
                    "name": "content"
                },
                {
                    "type": "uint64",
                    "name": "offset"
                },
                {
                    "type": "uint64",
                    "name": "boxSize"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sayHello",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "uint64",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "checkTransaction",
            "args": [
                {
                    "type": "pay",
                    "name": "pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 1
            }
        },
        "keys": {
            "global": {
                "globalInt": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsSW50"
                },
                "globalString": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "Y3VzdG9tS2V5"
                }
            },
            "local": {
                "localBigInt": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bG9jYWxCaWdJbnQ="
                }
            },
            "box": {
                "boxOfArray": {
                    "keyType": "AVMString",
                    "valueType": "uint64[]",
                    "key": "Yg=="
                },
                "boxRef": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMBytes",
                    "key": "/w=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "boxMap": {
                    "keyType": "address",
                    "valueType": "AVMBytes",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        249,
                        345
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        56
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        133
                    ],
                    "errorMessage": "OnCompletion must be OptIn && can only call when not creating"
                },
                {
                    "pc": [
                        453
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        456
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        155,
                        171
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        253
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        415
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAQAmBAFiAf8JZ2xvYmFsSW50CWN1c3RvbUtleTEYQAAEKoEEZ4AEKTFNlTYaAI4BAEkxGRREMRhBADKCBgQtrHFdBPdDziEEOkmyowT12Ji3BGzg9LUESaVa6DYaAI4GABcAcACjALIA+AEnAIAEzAxuTTYaAI4BAFwAMRkiEjEYEEM2GgEXSTYaAlcCAEw2GgMXTgIjKmVECypMZyMrZUUBQQArIytlRExQK0xnMQAyCGFBABhJFksCFqMxAIALbG9jYWxCaWdJbnRPAmYiQytMZ0L/2CoyCGciQzYaASi9RQFAAA6AAgABTFAovEgoTL8iQyi+RElPAlBMI1kiCBZXBgJcACi8SChMv0L/4zYaAVcCADEASbxITL8iQzYaAVcCAEk2GgIXSU4CNhoDF0lOAk4DTwIVCElPAgxEKb1FAUEADylLArlIKUsDSwJLBtIiQym9REsCE0H/7SlLAtNC/+Y2GgFXAgA2GgIXgAZIZWxsbyBPAlCAASBQTBZQSRUWVwYCTFCABBUffHVMULAiQzEWIglJOBAiEkRJOAhJgdAPDkyB6AcPEEsBOAQyBg0QSwE4ADEAEhBMOAcyCHIIRBIQQw==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}