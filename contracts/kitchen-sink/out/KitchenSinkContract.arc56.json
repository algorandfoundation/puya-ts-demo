{
    "name": "KitchenSinkContract",
    "structs": {},
    "methods": [
        {
            "name": "useState",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "string",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "c"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "createApp",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "optIn",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addToBox",
            "args": [
                {
                    "type": "uint64",
                    "name": "x"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addToBoxMap",
            "args": [
                {
                    "type": "string",
                    "name": "x"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "insertIntoBoxRef",
            "args": [
                {
                    "type": "byte[]",
                    "name": "content"
                },
                {
                    "type": "uint64",
                    "name": "offset"
                },
                {
                    "type": "uint64",
                    "name": "boxSize"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sayHello",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "uint64",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "checkTransaction",
            "args": [
                {
                    "type": "pay",
                    "name": "pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 1
            }
        },
        "keys": {
            "global": {
                "globalInt": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsSW50"
                },
                "globalString": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "Y3VzdG9tS2V5"
                }
            },
            "local": {
                "localBigInt": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bG9jYWxCaWdJbnQ="
                }
            },
            "box": {
                "boxOfArray": {
                    "keyType": "AVMString",
                    "valueType": "uint64[]",
                    "key": "Yg=="
                },
                "boxRef": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMBytes",
                    "key": "/w=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "boxMap": {
                    "keyType": "address",
                    "valueType": "AVMBytes",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        386,
                        461
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        113,
                        135,
                        174,
                        200,
                        218,
                        244,
                        257
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        235
                    ],
                    "errorMessage": "OnCompletion is not OptIn"
                },
                {
                    "pc": [
                        550
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        556
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        248
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        116,
                        138,
                        177,
                        203,
                        221,
                        238,
                        260
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        286,
                        304
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        126
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiACAQAmBAFiAf8JZ2xvYmFsSW50CWN1c3RvbUtleTEYQAAEKoEEZzEbQQA/gggELaxxXQTMDG5NBCkxTZUE90POIQQ6SbKjBPXYmLcEbOD0tQRJpVroNhoAjggAkgCFAHsAawBZAD8AGAACI0MxGRREMRhEMRYiCUk4ECISRIgBcCJDMRkURDEYRDYaAVcCADYaAheIAUNJFRZXBgJMUIAEFR98dUxQsCJDMRkURDEYRDYaAVcCADYaAhc2GgMXiADlIkMxGRREMRhENhoBVwIAiADHIkMxGRREMRhENhoBF4gAgSJDMRkiEkQxGEQiQzEZFEQxGBREiABlIkMxGRREMRhENhoBFzYaAlcCADYaAxeIAAIiQ4oDACMqZUSL/QsqTGcjK2VFAUEALSMrZUSL/lArTGcxADIIYUEAGov/Fov9FjEATgKjgAtsb2NhbEJpZ0ludExmiSuL/mdC/9YqMghniYoBACi9RQFAABCL/xaAAgABTFAovEgoTL+JKL5EVwIAi/8WUEkVgQgKFlcGAkxQKLxIKEy/iYoBADEASbxIi/+/iYoDAIv9FYv+CEmL/wxEKb1FAUEADimL/7lIKYv+iwCL/dKJKb1Ei/8TQf/uKYv/00L/54oCAYAGSGVsbG8gi/5QgAEgUIv/FlCJigEAi/84CEmB0A8OQQAtiwCB6AcPQQAki/84BDIGDUEAGov/OAAxABJBABCL/zgHMghyCEQSQQADIkSJI0L/+g==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}