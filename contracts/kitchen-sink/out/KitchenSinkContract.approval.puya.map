{
  "version": 3,
  "sources": [
    "/home/parallels/dev/puya-ts-demo/contracts/kitchen-sink/kitchen-sink.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BE;AAA+C;;AAA/C;AADF;;;;;;AAAA;;;AAAA;;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AA2BG;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAjBD;;;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AACiB;AAVjB;AAUiB;AAAA;AAAf;AAVF;AAUE;AAAA;AACsB;AAVT;AAUS;AAAA;;AAAtB;;;AACoB;AAXP;AAWO;AAAA;AAAlB;AAAA;AAXW;AAWX;AAAA;AAIM;;AAAwB;;AAA5B;AAAJ;;;AACuC;AAAA;AAAa;;AAAA;AAAb;AAAhB;;AAdzB;;;;;;;;;;;;;AAcI;;AAAA;AARJ;AAAA;AARe;AAaX;AAAA;;;;AAdJ;AAuBgC;;AAA9B;AAFD;AAAA;AAQD;;;AAxBa;AAyBU;AAAA;;AAAjB;;;AACsB;;;;AAAA;AAAA;AA1Bf;AA0BT;;AA1BS;AA0BT;AAAA;AAFJ;AAAA;AAxBa;AA4BO;AAAA;AAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AA5BS;AA4BT;;AA5BS;AA4BT;AAAA;;;;AAIJ;;;AAAA;;;AACkB;;AAAhB;AAAA;;AAAA;AAAA;AADF;AAAA;AAIA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;;AAAA;;AAC0B;;AAAA;AAAjB;AAAA;AAAA;;AAAA;AAAP;AAnCO;AAoCS;AAAA;;AAAhB;;;AApCO;AAqCL;;AAAA;;AArCK;AAyCP;;AAAA;;AAAA;;AAAA;AAPF;AAAA;AAlCS;AAsCgB;AAAA;AAAZ;;AAAA;AAAJ;;;AAtCA;AAuCL;;AAAA;;;;AAKJ;;;AAAA;;;AAAA;;;AAAA;AACS;;;;;;;;AAAA;;AAAA;AAAA;;;AAAA;AAA8B;AAAA;AAA9B;AADT;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACE;AAAA;;AAAA;AAC4B;;;AAD5B;AAAA;AACsB;;;AADtB;AAAA;AAAA;;AAAA;;AAEmC;;AAFnC;AAAA;AAAA;;AAAA;;AAGc;;AAHd;AAAA;AAAA;AAAA;;AAImB;;AAAqB;;AAAA;AAJxC;AAAA;AADF",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"b\" 0xff \"globalInt\" \"customKey\""
    },
    "31": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "33": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "36": {
      "op": "bytec_2 // \"globalInt\"",
      "defined_out": [
        "\"globalInt\""
      ],
      "stack_out": [
        "\"globalInt\""
      ]
    },
    "37": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "\"globalInt\"",
        "4"
      ],
      "stack_out": [
        "\"globalInt\"",
        "4"
      ]
    },
    "39": {
      "op": "app_global_put",
      "stack_out": []
    },
    "40": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "pushbytes 0x29314d95 // method \"optIn()void\"",
      "defined_out": [
        "Method(optIn()void)"
      ],
      "stack_out": [
        "Method(optIn()void)"
      ]
    },
    "46": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(optIn()void)",
        "tmp%0#1"
      ],
      "stack_out": [
        "Method(optIn()void)",
        "tmp%0#1"
      ]
    },
    "49": {
      "op": "match main_optIn_route@4",
      "stack_out": []
    },
    "53": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "55": {
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "56": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "57": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "59": {
      "op": "bz main_create_NoOp@14",
      "stack_out": []
    },
    "62": {
      "op": "pushbytess 0x2dac715d 0xf743ce21 0x3a49b2a3 0xf5d898b7 0x6ce0f4b5 0x49a55ae8 // method \"useState(uint64,string,uint64)void\", method \"addToBox(uint64)void\", method \"addToBoxMap(string)void\", method \"insertIntoBoxRef(byte[],uint64,uint64)void\", method \"sayHello(string,uint64)string\", method \"checkTransaction(pay)void\"",
      "defined_out": [
        "Method(addToBox(uint64)void)",
        "Method(addToBoxMap(string)void)",
        "Method(checkTransaction(pay)void)",
        "Method(insertIntoBoxRef(byte[],uint64,uint64)void)",
        "Method(sayHello(string,uint64)string)",
        "Method(useState(uint64,string,uint64)void)"
      ],
      "stack_out": [
        "Method(useState(uint64,string,uint64)void)",
        "Method(addToBox(uint64)void)",
        "Method(addToBoxMap(string)void)",
        "Method(insertIntoBoxRef(byte[],uint64,uint64)void)",
        "Method(sayHello(string,uint64)string)",
        "Method(checkTransaction(pay)void)"
      ]
    },
    "94": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addToBox(uint64)void)",
        "Method(addToBoxMap(string)void)",
        "Method(checkTransaction(pay)void)",
        "Method(insertIntoBoxRef(byte[],uint64,uint64)void)",
        "Method(sayHello(string,uint64)string)",
        "Method(useState(uint64,string,uint64)void)",
        "tmp%10#0"
      ],
      "stack_out": [
        "Method(useState(uint64,string,uint64)void)",
        "Method(addToBox(uint64)void)",
        "Method(addToBoxMap(string)void)",
        "Method(insertIntoBoxRef(byte[],uint64,uint64)void)",
        "Method(sayHello(string,uint64)string)",
        "Method(checkTransaction(pay)void)",
        "tmp%10#0"
      ]
    },
    "97": {
      "op": "match useState addToBox addToBoxMap insertIntoBoxRef sayHello checkTransaction",
      "stack_out": []
    },
    "111": {
      "op": "err"
    },
    "112": {
      "block": "main_create_NoOp@14",
      "stack_in": [],
      "op": "pushbytes 0xcc0c6e4d // method \"createApp()void\"",
      "defined_out": [
        "Method(createApp()void)"
      ],
      "stack_out": [
        "Method(createApp()void)"
      ]
    },
    "118": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createApp()void)",
        "tmp%11#0"
      ],
      "stack_out": [
        "Method(createApp()void)",
        "tmp%11#0"
      ]
    },
    "121": {
      "op": "match createApp",
      "stack_out": []
    },
    "125": {
      "op": "err"
    },
    "126": {
      "block": "main_optIn_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "128": {
      "op": "intc_0 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "OptIn"
      ]
    },
    "129": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "130": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "132": {
      "op": "&&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "133": {
      "error": "OnCompletion must be OptIn && can only call when not creating",
      "op": "return // on error: OnCompletion must be OptIn && can only call when not creating",
      "defined_out": [],
      "stack_out": []
    },
    "134": {
      "subroutine": "contracts/kitchen-sink/kitchen-sink.algo.ts::KitchenSinkContract.useState[routing]",
      "params": {},
      "block": "useState",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "137": {
      "op": "btoi",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "138": {
      "op": "dup",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "a#0"
      ]
    },
    "139": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "a#0",
        "a#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "142": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "a#0",
        "b#0"
      ]
    },
    "145": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "a#0"
      ]
    },
    "146": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "a#0",
        "b#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "a#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "149": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "a#0",
        "c#0"
      ]
    },
    "150": {
      "op": "cover 2",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "b#0",
        "a#0"
      ]
    },
    "152": {
      "op": "intc_1 // 0",
      "stack_out": [
        "a#0",
        "c#0",
        "b#0",
        "a#0",
        "0"
      ]
    },
    "153": {
      "op": "bytec_2 // \"globalInt\"",
      "defined_out": [
        "\"globalInt\"",
        "0",
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "b#0",
        "a#0",
        "0",
        "\"globalInt\""
      ]
    },
    "154": {
      "op": "app_global_get_ex",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "b#0",
        "a#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "155": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "a#0",
        "c#0",
        "b#0",
        "a#0",
        "maybe_value%0#0"
      ]
    },
    "156": {
      "op": "*",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "b#0",
        "tmp%0#1"
      ]
    },
    "157": {
      "op": "bytec_2 // \"globalInt\"",
      "stack_out": [
        "a#0",
        "c#0",
        "b#0",
        "tmp%0#1",
        "\"globalInt\""
      ]
    },
    "158": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "c#0",
        "b#0",
        "\"globalInt\"",
        "tmp%0#1"
      ]
    },
    "159": {
      "op": "app_global_put",
      "stack_out": [
        "a#0",
        "c#0",
        "b#0"
      ]
    },
    "160": {
      "op": "intc_1 // 0",
      "stack_out": [
        "a#0",
        "c#0",
        "b#0",
        "0"
      ]
    },
    "161": {
      "op": "bytec_3 // \"customKey\"",
      "defined_out": [
        "\"customKey\"",
        "0",
        "a#0",
        "b#0",
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "b#0",
        "0",
        "\"customKey\""
      ]
    },
    "162": {
      "op": "app_global_get_ex",
      "defined_out": [
        "_%0#0",
        "a#0",
        "b#0",
        "c#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "b#0",
        "_%0#0",
        "maybe_exists%1#0"
      ]
    },
    "163": {
      "op": "bury 1",
      "stack_out": [
        "a#0",
        "c#0",
        "b#0",
        "maybe_exists%1#0"
      ]
    },
    "165": {
      "op": "bz useState_else_body@3",
      "stack_out": [
        "a#0",
        "c#0",
        "b#0"
      ]
    },
    "168": {
      "op": "intc_1 // 0",
      "stack_out": [
        "a#0",
        "c#0",
        "b#0",
        "0"
      ]
    },
    "169": {
      "op": "bytec_3 // \"customKey\"",
      "stack_out": [
        "a#0",
        "c#0",
        "b#0",
        "0",
        "\"customKey\""
      ]
    },
    "170": {
      "op": "app_global_get_ex",
      "defined_out": [
        "a#0",
        "b#0",
        "c#0",
        "maybe_exists%2#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "b#0",
        "maybe_value%1#0",
        "maybe_exists%2#0"
      ]
    },
    "171": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "a#0",
        "c#0",
        "b#0",
        "maybe_value%1#0"
      ]
    },
    "172": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "c#0",
        "maybe_value%1#0",
        "b#0"
      ]
    },
    "173": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "c#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "tmp%1#1"
      ]
    },
    "174": {
      "op": "bytec_3 // \"customKey\"",
      "stack_out": [
        "a#0",
        "c#0",
        "tmp%1#1",
        "\"customKey\""
      ]
    },
    "175": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "c#0",
        "\"customKey\"",
        "tmp%1#1"
      ]
    },
    "176": {
      "op": "app_global_put",
      "stack_out": [
        "a#0",
        "c#0"
      ]
    },
    "177": {
      "block": "useState_after_if_else@4",
      "stack_in": [
        "a#0",
        "c#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "tmp%2#1"
      ]
    },
    "179": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "tmp%2#1",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "tmp%2#1",
        "tmp%3#0"
      ]
    },
    "181": {
      "op": "app_opted_in",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "tmp%4#0"
      ]
    },
    "182": {
      "op": "bz useState_after_if_else@6",
      "stack_out": [
        "a#0",
        "c#0"
      ]
    },
    "185": {
      "op": "dup",
      "defined_out": [
        "c#0"
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "c#0"
      ]
    },
    "186": {
      "op": "itob",
      "defined_out": [
        "c#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "reinterpret_biguint%0#0"
      ]
    },
    "187": {
      "op": "dig 2",
      "defined_out": [
        "a#0",
        "c#0",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "reinterpret_biguint%0#0",
        "a#0"
      ]
    },
    "189": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "c#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "190": {
      "op": "b*",
      "defined_out": [
        "a#0",
        "c#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "tmp%5#0"
      ]
    },
    "191": {
      "op": "txn Sender",
      "defined_out": [
        "a#0",
        "c#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "193": {
      "op": "pushbytes \"localBigInt\"",
      "defined_out": [
        "\"localBigInt\"",
        "a#0",
        "c#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "tmp%5#0",
        "tmp%6#0",
        "\"localBigInt\""
      ]
    },
    "206": {
      "op": "uncover 2",
      "stack_out": [
        "a#0",
        "c#0",
        "tmp%6#0",
        "\"localBigInt\"",
        "tmp%5#0"
      ]
    },
    "208": {
      "op": "app_local_put",
      "stack_out": [
        "a#0",
        "c#0"
      ]
    },
    "209": {
      "block": "useState_after_if_else@6",
      "stack_in": [
        "a#0",
        "c#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "1"
      ]
    },
    "210": {
      "op": "return",
      "stack_out": [
        "a#0",
        "c#0"
      ]
    },
    "211": {
      "block": "useState_else_body@3",
      "stack_in": [
        "a#0",
        "c#0",
        "b#0"
      ],
      "op": "bytec_3 // \"customKey\"",
      "defined_out": [
        "\"customKey\""
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "b#0",
        "\"customKey\""
      ]
    },
    "212": {
      "op": "swap",
      "defined_out": [
        "\"customKey\"",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "c#0",
        "\"customKey\"",
        "b#0"
      ]
    },
    "213": {
      "op": "app_global_put",
      "stack_out": [
        "a#0",
        "c#0"
      ]
    },
    "214": {
      "op": "b useState_after_if_else@4"
    },
    "217": {
      "subroutine": "contracts/kitchen-sink/kitchen-sink.algo.ts::KitchenSinkContract.createApp[routing]",
      "params": {},
      "block": "createApp",
      "stack_in": [],
      "op": "bytec_2 // \"globalInt\"",
      "defined_out": [
        "\"globalInt\""
      ],
      "stack_out": [
        "\"globalInt\""
      ]
    },
    "218": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "\"globalInt\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"globalInt\"",
        "tmp%0#0"
      ]
    },
    "220": {
      "op": "app_global_put",
      "stack_out": []
    },
    "221": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "222": {
      "op": "return",
      "stack_out": []
    },
    "223": {
      "subroutine": "contracts/kitchen-sink/kitchen-sink.algo.ts::KitchenSinkContract.addToBox[routing]",
      "params": {},
      "block": "addToBox",
      "stack_in": [],
      "op": "txna ApplicationArgs 1"
    },
    "226": {
      "op": "bytec_0 // \"b\"",
      "defined_out": [
        "\"b\"",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "\"b\""
      ]
    },
    "227": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "228": {
      "op": "bury 1",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "maybe_exists%0#0"
      ]
    },
    "230": {
      "op": "bnz addToBox_else_body@3",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "233": {
      "op": "pushbytes 0x0001",
      "defined_out": [
        "0x0001",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "0x0001"
      ]
    },
    "237": {
      "op": "swap",
      "stack_out": [
        "0x0001",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "238": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "aggregate%head%0#0"
      ]
    },
    "239": {
      "op": "bytec_0 // \"b\"",
      "stack_out": [
        "aggregate%head%0#0",
        "\"b\""
      ]
    },
    "240": {
      "op": "box_del",
      "defined_out": [
        "aggregate%head%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "aggregate%head%0#0",
        "{box_del}"
      ]
    },
    "241": {
      "op": "pop",
      "stack_out": [
        "aggregate%head%0#0"
      ]
    },
    "242": {
      "op": "bytec_0 // \"b\"",
      "stack_out": [
        "aggregate%head%0#0",
        "\"b\""
      ]
    },
    "243": {
      "op": "swap",
      "stack_out": [
        "\"b\"",
        "aggregate%head%0#0"
      ]
    },
    "244": {
      "op": "box_put",
      "stack_out": []
    },
    "245": {
      "block": "addToBox_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "246": {
      "op": "return",
      "stack_out": []
    },
    "247": {
      "block": "addToBox_else_body@3",
      "stack_in": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "op": "bytec_0 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "\"b\""
      ]
    },
    "248": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "249": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "aggregate%box_get%0#0"
      ]
    },
    "250": {
      "op": "dup",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0",
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)"
      ]
    },
    "251": {
      "op": "uncover 2",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%0#0 (copy)",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "253": {
      "error": "max array length exceeded",
      "op": "concat // on error: max array length exceeded",
      "defined_out": [
        "aggregate%box_get%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "concat%0#0"
      ]
    },
    "254": {
      "op": "swap",
      "stack_out": [
        "concat%0#0",
        "aggregate%box_get%0#0"
      ]
    },
    "255": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "aggregate%box_get%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "aggregate%box_get%0#0",
        "0"
      ]
    },
    "256": {
      "op": "extract_uint16",
      "defined_out": [
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "extract_uint16%0#0"
      ]
    },
    "257": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "concat%0#0",
        "extract_uint16%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "extract_uint16%0#0",
        "1"
      ]
    },
    "258": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "add%0#0"
      ]
    },
    "259": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "as_bytes%0#0"
      ]
    },
    "260": {
      "op": "extract 6 2",
      "defined_out": [
        "as_u16_bytes%0#0",
        "concat%0#0"
      ],
      "stack_out": [
        "concat%0#0",
        "as_u16_bytes%0#0"
      ]
    },
    "263": {
      "op": "replace2 0",
      "defined_out": [
        "replace%0#0"
      ],
      "stack_out": [
        "replace%0#0"
      ]
    },
    "265": {
      "op": "bytec_0 // \"b\"",
      "stack_out": [
        "replace%0#0",
        "\"b\""
      ]
    },
    "266": {
      "op": "box_del",
      "defined_out": [
        "replace%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "replace%0#0",
        "{box_del}"
      ]
    },
    "267": {
      "op": "pop",
      "stack_out": [
        "replace%0#0"
      ]
    },
    "268": {
      "op": "bytec_0 // \"b\"",
      "stack_out": [
        "replace%0#0",
        "\"b\""
      ]
    },
    "269": {
      "op": "swap",
      "stack_out": [
        "\"b\"",
        "replace%0#0"
      ]
    },
    "270": {
      "op": "box_put",
      "stack_out": []
    },
    "271": {
      "op": "b addToBox_after_if_else@4"
    },
    "274": {
      "subroutine": "contracts/kitchen-sink/kitchen-sink.algo.ts::KitchenSinkContract.addToBoxMap[routing]",
      "params": {},
      "block": "addToBoxMap",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "277": {
      "op": "extract 2 0",
      "defined_out": [
        "x#0"
      ],
      "stack_out": [
        "x#0"
      ]
    },
    "280": {
      "op": "txn Sender",
      "defined_out": [
        "materialized_values%0#0",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "materialized_values%0#0"
      ]
    },
    "282": {
      "op": "dup",
      "defined_out": [
        "materialized_values%0#0",
        "materialized_values%0#0 (copy)",
        "x#0"
      ],
      "stack_out": [
        "x#0",
        "materialized_values%0#0",
        "materialized_values%0#0 (copy)"
      ]
    },
    "283": {
      "op": "box_del",
      "defined_out": [
        "materialized_values%0#0",
        "x#0",
        "{box_del}"
      ],
      "stack_out": [
        "x#0",
        "materialized_values%0#0",
        "{box_del}"
      ]
    },
    "284": {
      "op": "pop",
      "stack_out": [
        "x#0",
        "materialized_values%0#0"
      ]
    },
    "285": {
      "op": "swap",
      "stack_out": [
        "materialized_values%0#0",
        "x#0"
      ]
    },
    "286": {
      "op": "box_put",
      "stack_out": []
    },
    "287": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "288": {
      "op": "return",
      "stack_out": []
    },
    "289": {
      "subroutine": "contracts/kitchen-sink/kitchen-sink.algo.ts::KitchenSinkContract.insertIntoBoxRef[routing]",
      "params": {},
      "block": "insertIntoBoxRef",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+uint8[])%0#0"
      ]
    },
    "292": {
      "op": "extract 2 0",
      "defined_out": [
        "content#0"
      ],
      "stack_out": [
        "content#0"
      ]
    },
    "295": {
      "op": "dup",
      "defined_out": [
        "content#0"
      ],
      "stack_out": [
        "content#0",
        "content#0"
      ]
    },
    "296": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "content#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "content#0",
        "content#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "299": {
      "op": "btoi",
      "defined_out": [
        "content#0",
        "offset#0"
      ],
      "stack_out": [
        "content#0",
        "content#0",
        "offset#0"
      ]
    },
    "300": {
      "op": "dup",
      "stack_out": [
        "content#0",
        "content#0",
        "offset#0",
        "offset#0"
      ]
    },
    "301": {
      "op": "cover 2",
      "defined_out": [
        "content#0",
        "offset#0"
      ],
      "stack_out": [
        "content#0",
        "offset#0",
        "content#0",
        "offset#0"
      ]
    },
    "303": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "content#0",
        "offset#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "content#0",
        "offset#0",
        "content#0",
        "offset#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "306": {
      "op": "btoi",
      "defined_out": [
        "boxSize#0",
        "content#0",
        "offset#0"
      ],
      "stack_out": [
        "content#0",
        "offset#0",
        "content#0",
        "offset#0",
        "boxSize#0"
      ]
    },
    "307": {
      "op": "dup",
      "stack_out": [
        "content#0",
        "offset#0",
        "content#0",
        "offset#0",
        "boxSize#0",
        "boxSize#0 (copy)"
      ]
    },
    "308": {
      "op": "cover 2",
      "stack_out": [
        "content#0",
        "offset#0",
        "content#0",
        "boxSize#0",
        "offset#0",
        "boxSize#0"
      ]
    },
    "310": {
      "op": "cover 3",
      "defined_out": [
        "boxSize#0",
        "content#0",
        "offset#0"
      ],
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "content#0",
        "boxSize#0",
        "offset#0"
      ]
    },
    "312": {
      "op": "uncover 2",
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "boxSize#0",
        "offset#0",
        "content#0"
      ]
    },
    "314": {
      "op": "len",
      "defined_out": [
        "boxSize#0",
        "content#0",
        "offset#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "boxSize#0",
        "offset#0",
        "tmp%0#1"
      ]
    },
    "315": {
      "op": "+",
      "defined_out": [
        "boxSize#0",
        "content#0",
        "offset#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "boxSize#0",
        "tmp%1#1"
      ]
    },
    "316": {
      "op": "dup"
    },
    "317": {
      "op": "uncover 2",
      "defined_out": [
        "boxSize#0",
        "content#0",
        "offset#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1",
        "tmp%1#1",
        "boxSize#0"
      ]
    },
    "319": {
      "op": "<",
      "defined_out": [
        "boxSize#0",
        "content#0",
        "offset#0",
        "tmp%1#1",
        "tmp%2#1"
      ],
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1",
        "tmp%2#1"
      ]
    },
    "320": {
      "op": "assert",
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1"
      ]
    },
    "321": {
      "op": "bytec_1 // 0xff",
      "defined_out": [
        "0xff",
        "boxSize#0",
        "content#0",
        "offset#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1",
        "0xff"
      ]
    },
    "322": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "boxSize#0",
        "content#0",
        "maybe_exists%0#0",
        "offset#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "323": {
      "op": "bury 1",
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1",
        "maybe_exists%0#0"
      ]
    },
    "325": {
      "op": "bz insertIntoBoxRef_else_body@3",
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1"
      ]
    },
    "328": {
      "op": "bytec_1 // 0xff",
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1",
        "0xff"
      ]
    },
    "329": {
      "op": "dig 2",
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1",
        "0xff",
        "boxSize#0"
      ]
    },
    "331": {
      "op": "box_create",
      "defined_out": [
        "boxSize#0",
        "content#0",
        "offset#0",
        "tmp%1#1",
        "{box_create}"
      ],
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1",
        "{box_create}"
      ]
    },
    "332": {
      "op": "pop",
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1"
      ]
    },
    "333": {
      "block": "insertIntoBoxRef_after_if_else@6",
      "stack_in": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1"
      ],
      "op": "bytec_1 // 0xff",
      "defined_out": [
        "0xff"
      ],
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1",
        "0xff"
      ]
    },
    "334": {
      "op": "dig 3",
      "defined_out": [
        "0xff",
        "offset#0"
      ],
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1",
        "0xff",
        "offset#0"
      ]
    },
    "336": {
      "op": "dig 2",
      "defined_out": [
        "0xff",
        "offset#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1",
        "0xff",
        "offset#0",
        "tmp%1#1"
      ]
    },
    "338": {
      "op": "dig 6",
      "defined_out": [
        "0xff",
        "content#0",
        "offset#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1",
        "0xff",
        "offset#0",
        "tmp%1#1",
        "content#0"
      ]
    },
    "340": {
      "op": "box_splice",
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1"
      ]
    },
    "341": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "content#0",
        "offset#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1",
        "1"
      ]
    },
    "342": {
      "op": "return",
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1"
      ]
    },
    "343": {
      "block": "insertIntoBoxRef_else_body@3",
      "stack_in": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1"
      ],
      "op": "bytec_1 // 0xff",
      "defined_out": [
        "0xff"
      ],
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1",
        "0xff"
      ]
    },
    "344": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1",
        "value%0#0",
        "check%0#0"
      ]
    },
    "345": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1",
        "value%0#0"
      ]
    },
    "346": {
      "op": "dig 2",
      "defined_out": [
        "boxSize#0",
        "value%0#0"
      ],
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1",
        "value%0#0",
        "boxSize#0"
      ]
    },
    "348": {
      "op": "!=",
      "defined_out": [
        "boxSize#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1",
        "tmp%3#0"
      ]
    },
    "349": {
      "op": "bz insertIntoBoxRef_after_if_else@6",
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1"
      ]
    },
    "352": {
      "op": "bytec_1 // 0xff",
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1",
        "0xff"
      ]
    },
    "353": {
      "op": "dig 2",
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1",
        "0xff",
        "boxSize#0"
      ]
    },
    "355": {
      "op": "box_resize",
      "stack_out": [
        "content#0",
        "offset#0",
        "boxSize#0",
        "tmp%1#1"
      ]
    },
    "356": {
      "op": "b insertIntoBoxRef_after_if_else@6"
    },
    "359": {
      "subroutine": "contracts/kitchen-sink/kitchen-sink.algo.ts::KitchenSinkContract.sayHello[routing]",
      "params": {},
      "block": "sayHello",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "362": {
      "op": "extract 2 0",
      "defined_out": [
        "name#0"
      ],
      "stack_out": [
        "name#0"
      ]
    },
    "365": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "name#0",
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "name#0",
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "368": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "a#0"
      ]
    },
    "369": {
      "op": "pushbytes \"Hello \"",
      "defined_out": [
        "\"Hello \"",
        "a#0",
        "name#0"
      ],
      "stack_out": [
        "name#0",
        "a#0",
        "\"Hello \""
      ]
    },
    "377": {
      "op": "uncover 2",
      "stack_out": [
        "a#0",
        "\"Hello \"",
        "name#0"
      ]
    },
    "379": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "a#0",
        "tmp%3#1"
      ]
    },
    "380": {
      "op": "pushbytes \" \"",
      "defined_out": [
        "\" \"",
        "a#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "a#0",
        "tmp%3#1",
        "\" \""
      ]
    },
    "383": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%4#0"
      ]
    },
    "384": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "a#0"
      ]
    },
    "385": {
      "op": "itob",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "awst_tmp%0#0"
      ]
    },
    "386": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "387": {
      "op": "dup",
      "defined_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "388": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%length%0#0"
      ]
    },
    "389": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "390": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "393": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "tmp%7#0"
      ]
    },
    "394": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "395": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "401": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "402": {
      "op": "concat",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "403": {
      "op": "log",
      "stack_out": []
    },
    "404": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "405": {
      "op": "return",
      "stack_out": []
    },
    "406": {
      "subroutine": "contracts/kitchen-sink/kitchen-sink.algo.ts::KitchenSinkContract.checkTransaction[routing]",
      "params": {},
      "block": "checkTransaction",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "408": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "409": {
      "op": "-",
      "defined_out": [
        "pay#0"
      ],
      "stack_out": [
        "pay#0"
      ]
    },
    "410": {
      "op": "dup",
      "defined_out": [
        "pay#0",
        "pay#0 (copy)"
      ],
      "stack_out": [
        "pay#0",
        "pay#0 (copy)"
      ]
    },
    "411": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0",
        "pay#0"
      ],
      "stack_out": [
        "pay#0",
        "gtxn_type%0#0"
      ]
    },
    "413": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_type%0#0",
        "pay",
        "pay#0"
      ],
      "stack_out": [
        "pay#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "414": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0",
        "pay#0"
      ],
      "stack_out": [
        "pay#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "415": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "pay#0"
      ]
    },
    "416": {
      "op": "dup",
      "stack_out": [
        "pay#0",
        "pay#0 (copy)"
      ]
    },
    "417": {
      "op": "gtxns Amount",
      "stack_out": [
        "pay#0",
        "tmp%0#0"
      ]
    },
    "419": {
      "op": "dup",
      "defined_out": [
        "pay#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "pay#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "420": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "2000",
        "pay#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "pay#0",
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "2000"
      ]
    },
    "423": {
      "op": "<=",
      "defined_out": [
        "pay#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "pay#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "424": {
      "op": "swap",
      "stack_out": [
        "pay#0",
        "tmp%1#0",
        "tmp%0#0"
      ]
    },
    "425": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "pay#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "pay#0",
        "tmp%1#0",
        "tmp%0#0",
        "1000"
      ]
    },
    "428": {
      "op": ">=",
      "defined_out": [
        "pay#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "pay#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "429": {
      "op": "&&",
      "defined_out": [
        "pay#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "pay#0",
        "tmp%4#0"
      ]
    },
    "430": {
      "op": "dig 1",
      "stack_out": [
        "pay#0",
        "tmp%4#0",
        "pay#0 (copy)"
      ]
    },
    "432": {
      "op": "gtxns LastValid",
      "defined_out": [
        "pay#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "pay#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "434": {
      "op": "global Round",
      "defined_out": [
        "pay#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "pay#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "436": {
      "op": ">",
      "defined_out": [
        "pay#0",
        "tmp%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "pay#0",
        "tmp%4#0",
        "tmp%7#0"
      ]
    },
    "437": {
      "op": "&&",
      "defined_out": [
        "pay#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "pay#0",
        "tmp%8#0"
      ]
    },
    "438": {
      "op": "dig 1",
      "stack_out": [
        "pay#0",
        "tmp%8#0",
        "pay#0 (copy)"
      ]
    },
    "440": {
      "op": "gtxns Sender",
      "defined_out": [
        "pay#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "pay#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "442": {
      "op": "txn Sender",
      "defined_out": [
        "pay#0",
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "pay#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "444": {
      "op": "==",
      "defined_out": [
        "pay#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "pay#0",
        "tmp%8#0",
        "tmp%11#0"
      ]
    },
    "445": {
      "op": "&&",
      "defined_out": [
        "pay#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "pay#0",
        "tmp%12#0"
      ]
    },
    "446": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "pay#0"
      ]
    },
    "447": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "449": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "451": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%0#0",
        "tmp%12#0",
        "tmp%13#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "453": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0",
        "value%0#0"
      ]
    },
    "454": {
      "op": "==",
      "defined_out": [
        "tmp%12#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%15#0"
      ]
    },
    "455": {
      "op": "&&",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "456": {
      "error": "assert target is match for conditions",
      "op": "return // on error: assert target is match for conditions",
      "stack_out": []
    }
  }
}