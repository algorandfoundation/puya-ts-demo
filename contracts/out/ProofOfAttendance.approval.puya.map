{
  "version": 3,
  "sources": [
    "/Users/joe/git/other/puya-ts-demo/contracts/proof-of-attendance.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBE;AAAkD;;AAAlD;AACA;;AACgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADhB;AAGA;AAAoD;AAApD;AALF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA8KG;;AAAA;AAAA;AAAA;;AAAA;AA9KH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA8KG;;;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAxJH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwJG;;;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAlIH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkIG;;;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AA7GH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA6GG;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AARH;;;AAAA;AAQG;;;AAAA;;AAAD;;;AAEa;;AAAkB;;AAAtB;AAAP;AATF;AAUE;;AAAA;;AANF;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAgBI;AADF;AAKqC;;AAAjB;;;AAhBtB;AAAA;AAAA;AAAA;AAiB+B;AAA7B;AAjBF;AAiBE;AAAA;AAEyC;;AAAf;AAAA;;AACnB;AAAP;AAEe;;AAAc;AAAA;AAA7B;;AAtBF;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAgCI;AADF;AAKqC;;AAAjB;;;AAhCtB;AAAA;AAAA;AAAA;AAiC+B;AAA7B;AAjCF;AAiCE;AAAA;AAEmC;;AACZ;AAAA;AAAA;;AAChB;AAAP;AAEA;AAAA;AAAA;;AAvCF;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAiDI;AADF;AAKqC;;AAAjB;;;AAjDtB;AAAA;AAAA;AAAA;AAkD+B;AAA7B;AAlDF;AAkDE;AAAA;AAEiC;;AACP;AAAA;AAAA;;AACnB;AAAP;AAEW;AAAA;AAAX;;AAxDF;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAkEI;AADF;AAKqC;;AAAjB;;;AAlEtB;AAAA;AAAA;AAAA;AAmE+B;AAA7B;AAnEF;AAmEE;AAAA;AAlE0C;AAoEH;;AAAR;AAAZ;AAAA;;AACZ;AAAP;AArE0C;AAuEtB;;AAAR;AAAZ;AAAA;AAAA;;AAIuC;;AAAf;AACxB;AACO;AAAP;AAKmC;;AACX;AAAA;AAAA;AACxB;AAAA;AACA;AAKiC;;AACT;AACxB;AACO;AAAP;AA7F0C;AAkGI;;AAAV;AAAZ;AAAA;AAAA;AACxB;AAAA;AACA;AAGF;;;;AAEyC;;AAAf;AACxB;AACgB;;AAAA;;AAAA;AAAA;;AAAiB;AAA1B;AAAP;AACgB;;AAAA;;AAAT;AAAP;AACgB;;AAAA;;AAAT;AAAP;AAEW;;AAAA;;AAAoB;;AAAA;;AAAA;AAAA;;AAA7B;AAAA;;;AACE;;AAA+B;;AAA/B;AADF;;;;AADF;AAMW;;AAAA;;AAA0B;;AAAA;;AAAA;AAAA;;AAAnC;AAAA;;;AACE;;AAA4B;;AAA5B;AADF;;;;AADF;AAMiB;;AAAjB;;AAAA;;;;;;;;;;;;AAGF;;;;AAEqC;;AACX;AAAA;AAAA;AACxB;AAAA;AACgB;;AAAA;;AAAA;AAAA;;AAAT;AAAP;AACgB;;AAAA;;AAAT;AAAP;AACgB;;AAAA;;AAAT;AAAP;AAEW;;AAAA;;AAAoB;;AAAA;;AAAA;AAAA;;AAA7B;AAAA;;;AACE;;AAA+B;;AAA/B;AADF;;;;AADF;AAMW;;AAAA;;AAA0B;;AAAA;;AAAA;AAAA;;AAAnC;AAAA;;;AACE;;AAA4B;;AAA5B;AADF;;;;AADF;AAMiB;;AAAjB;;AAAA;;;;;;;;;;;;AAGF;;;;AAEmC;;AACT;AACxB;AACgB;;AAAA;;AAAA;AAAA;;AAAiB;AAA1B;AAAP;AACgB;;AAAA;;AAAT;AAAP;AACgB;;AAAA;;AAAT;AAAP;AAEW;;AAAA;;AAAoB;;AAAA;;AAAA;AAAA;;AAA7B;AAAA;;;AACE;;AAA+B;;AAA/B;AADF;;;;AADF;AAMW;;AAAA;;AAA0B;;AAAA;;AAAA;AAAA;;AAAnC;AAAA;;;AACE;;AAA4B;;AAA5B;AADF;;;;AADF;AAMiB;;AAAjB;;AAAA;;;;;;;;;;;;AAGF;;;;AAxK4C;AA0KI;;AAAV;AAAZ;AAAA;AAAA;AACxB;AAAA;AACgB;;AAAA;;AAAA;AAAA;;AAAT;AAAP;AACgB;;AAAA;;AAAT;AAAP;AACgB;;AAAA;;AAAT;AAAP;AAEW;;AAAA;;AAAoB;;AAAA;;AAAA;AAAA;;AAA7B;AAAA;;;AACE;;AAA+B;;AAA/B;AADF;;;;AADF;AAMW;;AAAA;;AAA0B;;AAAA;;AAAA;AAAA;;AAAnC;AAAA;;;AACE;;AAA4B;;AAA5B;AADF;;;;AADF;AAMiB;;AAAjB;;AAAA;;;;;;;;;;;;AAGF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9LA;AAAA;AAAA;AAAA;AAiMI;AADsB;;;;;;;;;;;;;;;AAAlB;AAAY;AAGX;AAtMT;AAAA;;AAAA;AAAA;;;;;;;AA2MgB;;;AADH;;;AADG;;;;;;;;;AAHP;;;;AAAA;;;AAAA;AASK;;AATZ;AAYF;;;AACE;AAGmB;;AAEF;;;;;;;;;;;;;AALjB;;;AAAA;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4"
    },
    "6": {
      "op": "bytecblock \"totalAttendees\" \"maxAttendees\" 0x151f7c75 \"boxMap\" \"assetUrl\" 0x068101"
    },
    "61": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "63": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "66": {
      "op": "bytec_1 // \"maxAttendees\"",
      "defined_out": [
        "\"maxAttendees\""
      ],
      "stack_out": [
        "\"maxAttendees\""
      ]
    },
    "67": {
      "op": "pushint 30 // 30",
      "defined_out": [
        "\"maxAttendees\"",
        "30"
      ],
      "stack_out": [
        "\"maxAttendees\"",
        "30"
      ]
    },
    "69": {
      "op": "app_global_put",
      "stack_out": []
    },
    "70": {
      "op": "bytec 4 // \"assetUrl\"",
      "defined_out": [
        "\"assetUrl\""
      ],
      "stack_out": [
        "\"assetUrl\""
      ]
    },
    "72": {
      "op": "pushbytes \"ipfs://QmW5vERkgeJJtSY1YQdcWU6gsHCZCyLFtM1oT9uyy2WGm8\"",
      "defined_out": [
        "\"assetUrl\"",
        "\"ipfs://QmW5vERkgeJJtSY1YQdcWU6gsHCZCyLFtM1oT9uyy2WGm8\""
      ],
      "stack_out": [
        "\"assetUrl\"",
        "\"ipfs://QmW5vERkgeJJtSY1YQdcWU6gsHCZCyLFtM1oT9uyy2WGm8\""
      ]
    },
    "127": {
      "op": "app_global_put",
      "stack_out": []
    },
    "128": {
      "op": "bytec_0 // \"totalAttendees\"",
      "defined_out": [
        "\"totalAttendees\""
      ],
      "stack_out": [
        "\"totalAttendees\""
      ]
    },
    "129": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"totalAttendees\"",
        "0"
      ],
      "stack_out": [
        "\"totalAttendees\"",
        "0"
      ]
    },
    "130": {
      "op": "app_global_put",
      "stack_out": []
    },
    "131": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "133": {
      "op": "bz main_after_if_else@21",
      "stack_out": []
    },
    "136": {
      "op": "pushbytess 0x1bcde52d 0x09527352 0x34ef747b 0x7732a900 0x8485a195 0x7f8cf0ab 0xdd617d7d 0x9b487a80 0xba796fea 0x7de97566 0x83dd375f 0x765a33da 0x2c7a818c // method \"init(uint64)void\", method \"confirmAttendance()void\", method \"confirmAttendanceWithBox()void\", method \"confirmAttendanceWithBoxRef()void\", method \"confirmAttendanceWithBoxMap()void\", method \"getPoaId()uint64\", method \"getPoaIdWithBox()uint64\", method \"getPoaIdWithBoxRef()uint64\", method \"getPoaIdWithBoxMap()uint64\", method \"claimPoa(axfer)void\", method \"claimPoaWithBox(axfer)void\", method \"claimPoaWithBoxRef(axfer)void\", method \"claimPoaWithBoxMap(axfer)void\"",
      "defined_out": [
        "Method(claimPoa(axfer)void)",
        "Method(claimPoaWithBox(axfer)void)",
        "Method(claimPoaWithBoxMap(axfer)void)",
        "Method(claimPoaWithBoxRef(axfer)void)",
        "Method(confirmAttendance()void)",
        "Method(confirmAttendanceWithBox()void)",
        "Method(confirmAttendanceWithBoxMap()void)",
        "Method(confirmAttendanceWithBoxRef()void)",
        "Method(getPoaId()uint64)",
        "Method(getPoaIdWithBox()uint64)",
        "Method(getPoaIdWithBoxMap()uint64)",
        "Method(getPoaIdWithBoxRef()uint64)",
        "Method(init(uint64)void)"
      ],
      "stack_out": [
        "Method(init(uint64)void)",
        "Method(confirmAttendance()void)",
        "Method(confirmAttendanceWithBox()void)",
        "Method(confirmAttendanceWithBoxRef()void)",
        "Method(confirmAttendanceWithBoxMap()void)",
        "Method(getPoaId()uint64)",
        "Method(getPoaIdWithBox()uint64)",
        "Method(getPoaIdWithBoxRef()uint64)",
        "Method(getPoaIdWithBoxMap()uint64)",
        "Method(claimPoa(axfer)void)",
        "Method(claimPoaWithBox(axfer)void)",
        "Method(claimPoaWithBoxRef(axfer)void)",
        "Method(claimPoaWithBoxMap(axfer)void)"
      ]
    },
    "203": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(claimPoa(axfer)void)",
        "Method(claimPoaWithBox(axfer)void)",
        "Method(claimPoaWithBoxMap(axfer)void)",
        "Method(claimPoaWithBoxRef(axfer)void)",
        "Method(confirmAttendance()void)",
        "Method(confirmAttendanceWithBox()void)",
        "Method(confirmAttendanceWithBoxMap()void)",
        "Method(confirmAttendanceWithBoxRef()void)",
        "Method(getPoaId()uint64)",
        "Method(getPoaIdWithBox()uint64)",
        "Method(getPoaIdWithBoxMap()uint64)",
        "Method(getPoaIdWithBoxRef()uint64)",
        "Method(init(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(init(uint64)void)",
        "Method(confirmAttendance()void)",
        "Method(confirmAttendanceWithBox()void)",
        "Method(confirmAttendanceWithBoxRef()void)",
        "Method(confirmAttendanceWithBoxMap()void)",
        "Method(getPoaId()uint64)",
        "Method(getPoaIdWithBox()uint64)",
        "Method(getPoaIdWithBoxRef()uint64)",
        "Method(getPoaIdWithBoxMap()uint64)",
        "Method(claimPoa(axfer)void)",
        "Method(claimPoaWithBox(axfer)void)",
        "Method(claimPoaWithBoxRef(axfer)void)",
        "Method(claimPoaWithBoxMap(axfer)void)",
        "tmp%2#0"
      ]
    },
    "206": {
      "op": "match main_init_route@5 main_confirmAttendance_route@6 main_confirmAttendanceWithBox_route@7 main_confirmAttendanceWithBoxRef_route@8 main_confirmAttendanceWithBoxMap_route@9 main_getPoaId_route@10 main_getPoaIdWithBox_route@11 main_getPoaIdWithBoxRef_route@12 main_getPoaIdWithBoxMap_route@13 main_claimPoa_route@14 main_claimPoaWithBox_route@15 main_claimPoaWithBoxRef_route@16 main_claimPoaWithBoxMap_route@17",
      "stack_out": []
    },
    "234": {
      "block": "main_after_if_else@21",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "235": {
      "op": "return",
      "stack_out": []
    },
    "236": {
      "block": "main_claimPoaWithBoxMap_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "238": {
      "op": "!",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "239": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "240": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "242": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "243": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "245": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0",
        "1"
      ]
    },
    "246": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "247": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "248": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "250": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "axfer"
      ]
    },
    "251": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ],
      "stack_out": [
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "252": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%3#0"
      ]
    },
    "253": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.claimPoaWithBoxMap",
      "op": "callsub claimPoaWithBoxMap",
      "stack_out": []
    },
    "256": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "257": {
      "op": "return",
      "stack_out": []
    },
    "258": {
      "block": "main_claimPoaWithBoxRef_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "260": {
      "op": "!",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "261": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "262": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "264": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "265": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "267": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0",
        "1"
      ]
    },
    "268": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "269": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "270": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "272": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "axfer"
      ]
    },
    "273": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "274": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "275": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.claimPoaWithBoxRef",
      "op": "callsub claimPoaWithBoxRef",
      "stack_out": []
    },
    "278": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "279": {
      "op": "return",
      "stack_out": []
    },
    "280": {
      "block": "main_claimPoaWithBox_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "282": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "283": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "284": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "286": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "287": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "289": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0",
        "1"
      ]
    },
    "290": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "291": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "292": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "294": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "axfer"
      ]
    },
    "295": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "296": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "297": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.claimPoaWithBox",
      "op": "callsub claimPoaWithBox",
      "stack_out": []
    },
    "300": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "301": {
      "op": "return",
      "stack_out": []
    },
    "302": {
      "block": "main_claimPoa_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "304": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "305": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "306": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "308": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "309": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "311": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0",
        "1"
      ]
    },
    "312": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "313": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "314": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "316": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "317": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "318": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "319": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.claimPoa",
      "op": "callsub claimPoa",
      "stack_out": []
    },
    "322": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "323": {
      "op": "return",
      "stack_out": []
    },
    "324": {
      "block": "main_getPoaIdWithBoxMap_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "326": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "327": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "328": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "330": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "331": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.getPoaIdWithBoxMap",
      "op": "callsub getPoaIdWithBoxMap",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "334": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "335": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "336": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "337": {
      "op": "concat",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "338": {
      "op": "log",
      "stack_out": []
    },
    "339": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "340": {
      "op": "return",
      "stack_out": []
    },
    "341": {
      "block": "main_getPoaIdWithBoxRef_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "343": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "344": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "345": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "347": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "348": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.getPoaIdWithBoxRef",
      "op": "callsub getPoaIdWithBoxRef",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "351": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "352": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "353": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "354": {
      "op": "concat",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "355": {
      "op": "log",
      "stack_out": []
    },
    "356": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "357": {
      "op": "return",
      "stack_out": []
    },
    "358": {
      "block": "main_getPoaIdWithBox_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "360": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "361": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "362": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "364": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "365": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.getPoaIdWithBox",
      "op": "callsub getPoaIdWithBox",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "368": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "369": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "370": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "371": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "372": {
      "op": "log",
      "stack_out": []
    },
    "373": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "374": {
      "op": "return",
      "stack_out": []
    },
    "375": {
      "block": "main_getPoaId_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "377": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "378": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "379": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "381": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "382": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.getPoaId",
      "op": "callsub getPoaId",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "385": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "386": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "387": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "388": {
      "op": "concat",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "389": {
      "op": "log",
      "stack_out": []
    },
    "390": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "391": {
      "op": "return",
      "stack_out": []
    },
    "392": {
      "block": "main_confirmAttendanceWithBoxMap_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "394": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "395": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "396": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "398": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "399": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.confirmAttendanceWithBoxMap",
      "op": "callsub confirmAttendanceWithBoxMap"
    },
    "402": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "403": {
      "op": "return",
      "stack_out": []
    },
    "404": {
      "block": "main_confirmAttendanceWithBoxRef_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "406": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "407": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "408": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "410": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "411": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.confirmAttendanceWithBoxRef",
      "op": "callsub confirmAttendanceWithBoxRef"
    },
    "414": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "415": {
      "op": "return",
      "stack_out": []
    },
    "416": {
      "block": "main_confirmAttendanceWithBox_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "418": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "419": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "420": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "422": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "423": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.confirmAttendanceWithBox",
      "op": "callsub confirmAttendanceWithBox"
    },
    "426": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "427": {
      "op": "return",
      "stack_out": []
    },
    "428": {
      "block": "main_confirmAttendance_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "430": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "431": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "432": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "434": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "435": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.confirmAttendance",
      "op": "callsub confirmAttendance"
    },
    "438": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "439": {
      "op": "return",
      "stack_out": []
    },
    "440": {
      "block": "main_init_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "442": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "443": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "444": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "446": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "447": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "448": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "451": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "452": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.init",
      "op": "callsub init",
      "stack_out": []
    },
    "455": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "456": {
      "op": "return",
      "stack_out": []
    },
    "457": {
      "subroutine": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.init",
      "params": {
        "maxAttendees#0": "uint64"
      },
      "block": "init",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "460": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "462": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "464": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "465": {
      "error": "Only creator can initialize",
      "op": "assert // Only creator can initialize",
      "stack_out": []
    },
    "466": {
      "op": "bytec_1 // \"maxAttendees\"",
      "defined_out": [
        "\"maxAttendees\""
      ],
      "stack_out": [
        "\"maxAttendees\""
      ]
    },
    "467": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"maxAttendees\"",
        "maxAttendees#0 (copy)"
      ],
      "stack_out": [
        "\"maxAttendees\"",
        "maxAttendees#0 (copy)"
      ]
    },
    "469": {
      "op": "app_global_put",
      "stack_out": []
    },
    "470": {
      "retsub": true,
      "op": "retsub"
    },
    "471": {
      "subroutine": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.confirmAttendance",
      "params": {},
      "block": "confirmAttendance",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "472": {
      "op": "bytec_0 // \"totalAttendees\"",
      "defined_out": [
        "\"totalAttendees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalAttendees\""
      ]
    },
    "473": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "474": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "475": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "476": {
      "op": "bytec_1 // \"maxAttendees\"",
      "defined_out": [
        "\"maxAttendees\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"maxAttendees\""
      ]
    },
    "477": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "478": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "479": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "480": {
      "error": "Max attendees reached",
      "op": "assert // Max attendees reached",
      "stack_out": []
    },
    "481": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "483": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.mintPoa",
      "op": "callsub mintPoa",
      "defined_out": [
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0"
      ]
    },
    "486": {
      "op": "intc_0 // 0",
      "stack_out": [
        "mintedAsset#0",
        "0"
      ]
    },
    "487": {
      "op": "bytec_0 // \"totalAttendees\"",
      "stack_out": [
        "mintedAsset#0",
        "0",
        "\"totalAttendees\""
      ]
    },
    "488": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "489": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0"
      ]
    },
    "490": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "491": {
      "op": "+",
      "defined_out": [
        "mintedAsset#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "new_state_value%0#0"
      ]
    },
    "492": {
      "op": "bytec_0 // \"totalAttendees\"",
      "stack_out": [
        "mintedAsset#0",
        "new_state_value%0#0",
        "\"totalAttendees\""
      ]
    },
    "493": {
      "op": "swap",
      "stack_out": [
        "mintedAsset#0",
        "\"totalAttendees\"",
        "new_state_value%0#0"
      ]
    },
    "494": {
      "op": "app_global_put",
      "stack_out": [
        "mintedAsset#0"
      ]
    },
    "495": {
      "op": "txn Sender",
      "defined_out": [
        "mintedAsset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "tmp%2#0"
      ]
    },
    "497": {
      "op": "box_get",
      "defined_out": [
        "_id#0",
        "hasClaimed#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "_id#0",
        "hasClaimed#0"
      ]
    },
    "498": {
      "op": "bury 1",
      "stack_out": [
        "mintedAsset#0",
        "hasClaimed#0"
      ]
    },
    "500": {
      "op": "!",
      "defined_out": [
        "mintedAsset#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "tmp%3#0"
      ]
    },
    "501": {
      "error": "Already claimed POA",
      "op": "assert // Already claimed POA",
      "stack_out": [
        "mintedAsset#0"
      ]
    },
    "502": {
      "op": "txn Sender",
      "defined_out": [
        "mintedAsset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "tmp%4#0"
      ]
    },
    "504": {
      "op": "swap",
      "stack_out": [
        "tmp%4#0",
        "mintedAsset#0"
      ]
    },
    "505": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "506": {
      "op": "box_put",
      "stack_out": []
    },
    "507": {
      "retsub": true,
      "op": "retsub"
    },
    "508": {
      "subroutine": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.confirmAttendanceWithBox",
      "params": {},
      "block": "confirmAttendanceWithBox",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "509": {
      "op": "bytec_0 // \"totalAttendees\"",
      "defined_out": [
        "\"totalAttendees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalAttendees\""
      ]
    },
    "510": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "511": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "512": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "513": {
      "op": "bytec_1 // \"maxAttendees\"",
      "defined_out": [
        "\"maxAttendees\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"maxAttendees\""
      ]
    },
    "514": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "515": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "516": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "517": {
      "error": "Max attendees reached",
      "op": "assert // Max attendees reached",
      "stack_out": []
    },
    "518": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "520": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.mintPoa",
      "op": "callsub mintPoa",
      "defined_out": [
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0"
      ]
    },
    "523": {
      "op": "intc_0 // 0",
      "stack_out": [
        "mintedAsset#0",
        "0"
      ]
    },
    "524": {
      "op": "bytec_0 // \"totalAttendees\"",
      "stack_out": [
        "mintedAsset#0",
        "0",
        "\"totalAttendees\""
      ]
    },
    "525": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "526": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0"
      ]
    },
    "527": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "528": {
      "op": "+",
      "defined_out": [
        "mintedAsset#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "new_state_value%0#0"
      ]
    },
    "529": {
      "op": "bytec_0 // \"totalAttendees\"",
      "stack_out": [
        "mintedAsset#0",
        "new_state_value%0#0",
        "\"totalAttendees\""
      ]
    },
    "530": {
      "op": "swap",
      "stack_out": [
        "mintedAsset#0",
        "\"totalAttendees\"",
        "new_state_value%0#0"
      ]
    },
    "531": {
      "op": "app_global_put",
      "stack_out": [
        "mintedAsset#0"
      ]
    },
    "532": {
      "op": "txn Sender",
      "defined_out": [
        "box#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "box#0"
      ]
    },
    "534": {
      "op": "dup",
      "defined_out": [
        "box#0",
        "box#0 (copy)",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "box#0",
        "box#0 (copy)"
      ]
    },
    "535": {
      "op": "box_len",
      "defined_out": [
        "box#0",
        "hasClaimed#0",
        "maybe_value%3#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "box#0",
        "maybe_value%3#0",
        "hasClaimed#0"
      ]
    },
    "536": {
      "op": "bury 1",
      "stack_out": [
        "mintedAsset#0",
        "box#0",
        "hasClaimed#0"
      ]
    },
    "538": {
      "op": "!",
      "defined_out": [
        "box#0",
        "mintedAsset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "box#0",
        "tmp%2#0"
      ]
    },
    "539": {
      "error": "Already claimed POA",
      "op": "assert // Already claimed POA",
      "stack_out": [
        "mintedAsset#0",
        "box#0"
      ]
    },
    "540": {
      "op": "swap",
      "stack_out": [
        "box#0",
        "mintedAsset#0"
      ]
    },
    "541": {
      "op": "itob",
      "defined_out": [
        "box#0",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "box#0",
        "new_box_value%0#0"
      ]
    },
    "542": {
      "op": "box_put",
      "stack_out": []
    },
    "543": {
      "retsub": true,
      "op": "retsub"
    },
    "544": {
      "subroutine": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.confirmAttendanceWithBoxRef",
      "params": {},
      "block": "confirmAttendanceWithBoxRef",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "545": {
      "op": "bytec_0 // \"totalAttendees\"",
      "defined_out": [
        "\"totalAttendees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalAttendees\""
      ]
    },
    "546": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "547": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "548": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "549": {
      "op": "bytec_1 // \"maxAttendees\"",
      "defined_out": [
        "\"maxAttendees\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"maxAttendees\""
      ]
    },
    "550": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "551": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "552": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "553": {
      "error": "Max attendees reached",
      "op": "assert // Max attendees reached",
      "stack_out": []
    },
    "554": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "556": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.mintPoa",
      "op": "callsub mintPoa",
      "defined_out": [
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0"
      ]
    },
    "559": {
      "op": "intc_0 // 0",
      "stack_out": [
        "mintedAsset#0",
        "0"
      ]
    },
    "560": {
      "op": "bytec_0 // \"totalAttendees\"",
      "stack_out": [
        "mintedAsset#0",
        "0",
        "\"totalAttendees\""
      ]
    },
    "561": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "562": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0"
      ]
    },
    "563": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "564": {
      "op": "+",
      "defined_out": [
        "mintedAsset#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "new_state_value%0#0"
      ]
    },
    "565": {
      "op": "bytec_0 // \"totalAttendees\"",
      "stack_out": [
        "mintedAsset#0",
        "new_state_value%0#0",
        "\"totalAttendees\""
      ]
    },
    "566": {
      "op": "swap",
      "stack_out": [
        "mintedAsset#0",
        "\"totalAttendees\"",
        "new_state_value%0#0"
      ]
    },
    "567": {
      "op": "app_global_put",
      "stack_out": [
        "mintedAsset#0"
      ]
    },
    "568": {
      "op": "txn Sender",
      "defined_out": [
        "boxRef#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "boxRef#0"
      ]
    },
    "570": {
      "op": "dup",
      "defined_out": [
        "boxRef#0",
        "boxRef#0 (copy)",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "boxRef#0",
        "boxRef#0 (copy)"
      ]
    },
    "571": {
      "op": "box_len",
      "defined_out": [
        "boxRef#0",
        "hasClaimed#0",
        "maybe_value%3#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "boxRef#0",
        "maybe_value%3#0",
        "hasClaimed#0"
      ]
    },
    "572": {
      "op": "bury 1",
      "stack_out": [
        "mintedAsset#0",
        "boxRef#0",
        "hasClaimed#0"
      ]
    },
    "574": {
      "op": "!",
      "defined_out": [
        "boxRef#0",
        "mintedAsset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "boxRef#0",
        "tmp%2#0"
      ]
    },
    "575": {
      "error": "Already claimed POA",
      "op": "assert // Already claimed POA",
      "stack_out": [
        "mintedAsset#0",
        "boxRef#0"
      ]
    },
    "576": {
      "op": "swap",
      "stack_out": [
        "boxRef#0",
        "mintedAsset#0"
      ]
    },
    "577": {
      "op": "itob",
      "defined_out": [
        "boxRef#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "boxRef#0",
        "tmp%3#0"
      ]
    },
    "578": {
      "op": "box_put",
      "stack_out": []
    },
    "579": {
      "retsub": true,
      "op": "retsub"
    },
    "580": {
      "subroutine": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.confirmAttendanceWithBoxMap",
      "params": {},
      "block": "confirmAttendanceWithBoxMap",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "581": {
      "op": "bytec_0 // \"totalAttendees\"",
      "defined_out": [
        "\"totalAttendees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalAttendees\""
      ]
    },
    "582": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "583": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "584": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "585": {
      "op": "bytec_1 // \"maxAttendees\"",
      "defined_out": [
        "\"maxAttendees\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"maxAttendees\""
      ]
    },
    "586": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "587": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "588": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "589": {
      "error": "Max attendees reached",
      "op": "assert // Max attendees reached",
      "stack_out": []
    },
    "590": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "592": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.mintPoa",
      "op": "callsub mintPoa",
      "defined_out": [
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0"
      ]
    },
    "595": {
      "op": "intc_0 // 0",
      "stack_out": [
        "mintedAsset#0",
        "0"
      ]
    },
    "596": {
      "op": "bytec_0 // \"totalAttendees\"",
      "stack_out": [
        "mintedAsset#0",
        "0",
        "\"totalAttendees\""
      ]
    },
    "597": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "598": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0"
      ]
    },
    "599": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "600": {
      "op": "+",
      "defined_out": [
        "mintedAsset#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "new_state_value%0#0"
      ]
    },
    "601": {
      "op": "bytec_0 // \"totalAttendees\"",
      "stack_out": [
        "mintedAsset#0",
        "new_state_value%0#0",
        "\"totalAttendees\""
      ]
    },
    "602": {
      "op": "swap",
      "stack_out": [
        "mintedAsset#0",
        "\"totalAttendees\"",
        "new_state_value%0#0"
      ]
    },
    "603": {
      "op": "app_global_put",
      "stack_out": [
        "mintedAsset#0"
      ]
    },
    "604": {
      "op": "bytec_3 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "\"boxMap\""
      ]
    },
    "605": {
      "op": "txn Sender",
      "defined_out": [
        "\"boxMap\"",
        "mintedAsset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "\"boxMap\"",
        "tmp%2#0"
      ]
    },
    "607": {
      "op": "concat",
      "defined_out": [
        "mintedAsset#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "tmp%3#0"
      ]
    },
    "608": {
      "op": "box_len",
      "defined_out": [
        "hasClaimed#0",
        "maybe_value%3#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%3#0",
        "hasClaimed#0"
      ]
    },
    "609": {
      "op": "bury 1",
      "stack_out": [
        "mintedAsset#0",
        "hasClaimed#0"
      ]
    },
    "611": {
      "op": "!",
      "defined_out": [
        "mintedAsset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "tmp%4#0"
      ]
    },
    "612": {
      "error": "Already claimed POA",
      "op": "assert // Already claimed POA",
      "stack_out": [
        "mintedAsset#0"
      ]
    },
    "613": {
      "op": "bytec_3 // \"boxMap\"",
      "stack_out": [
        "mintedAsset#0",
        "\"boxMap\""
      ]
    },
    "614": {
      "op": "txn Sender",
      "defined_out": [
        "\"boxMap\"",
        "mintedAsset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "\"boxMap\"",
        "tmp%5#0"
      ]
    },
    "616": {
      "op": "concat",
      "defined_out": [
        "mintedAsset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "tmp%6#0"
      ]
    },
    "617": {
      "op": "swap",
      "stack_out": [
        "tmp%6#0",
        "mintedAsset#0"
      ]
    },
    "618": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "new_box_value%0#0"
      ]
    },
    "619": {
      "op": "box_put",
      "stack_out": []
    },
    "620": {
      "retsub": true,
      "op": "retsub"
    },
    "621": {
      "subroutine": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.getPoaId",
      "params": {},
      "block": "getPoaId",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "623": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "poaId#0"
      ],
      "stack_out": [
        "poaId#0",
        "exists#0"
      ]
    },
    "624": {
      "error": "POA not found",
      "op": "assert // POA not found",
      "stack_out": [
        "poaId#0"
      ]
    },
    "625": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "626": {
      "retsub": true,
      "op": "retsub"
    },
    "627": {
      "subroutine": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.getPoaIdWithBox",
      "params": {},
      "block": "getPoaIdWithBox",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "box#0"
      ],
      "stack_out": [
        "box#0"
      ]
    },
    "629": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "exists#0"
      ]
    },
    "630": {
      "op": "swap",
      "stack_out": [
        "exists#0",
        "maybe_value%0#0"
      ]
    },
    "631": {
      "op": "btoi",
      "defined_out": [
        "exists#0",
        "poaId#0"
      ],
      "stack_out": [
        "exists#0",
        "poaId#0"
      ]
    },
    "632": {
      "op": "swap",
      "stack_out": [
        "poaId#0",
        "exists#0"
      ]
    },
    "633": {
      "error": "POA not found",
      "op": "assert // POA not found",
      "stack_out": [
        "poaId#0"
      ]
    },
    "634": {
      "retsub": true,
      "op": "retsub"
    },
    "635": {
      "subroutine": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.getPoaIdWithBoxRef",
      "params": {},
      "block": "getPoaIdWithBoxRef",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "boxRef#0"
      ],
      "stack_out": [
        "boxRef#0"
      ]
    },
    "637": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "poaId#0"
      ],
      "stack_out": [
        "poaId#0",
        "exists#0"
      ]
    },
    "638": {
      "error": "POA not found",
      "op": "assert // POA not found",
      "stack_out": [
        "poaId#0"
      ]
    },
    "639": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "640": {
      "retsub": true,
      "op": "retsub"
    },
    "641": {
      "subroutine": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.getPoaIdWithBoxMap",
      "params": {},
      "block": "getPoaIdWithBoxMap",
      "stack_in": [],
      "op": "bytec_3 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\""
      ],
      "stack_out": [
        "\"boxMap\""
      ]
    },
    "642": {
      "op": "txn Sender",
      "defined_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ]
    },
    "644": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "645": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "exists#0"
      ]
    },
    "646": {
      "op": "swap",
      "stack_out": [
        "exists#0",
        "maybe_value%0#0"
      ]
    },
    "647": {
      "op": "btoi",
      "defined_out": [
        "exists#0",
        "poaId#0"
      ],
      "stack_out": [
        "exists#0",
        "poaId#0"
      ]
    },
    "648": {
      "op": "swap",
      "stack_out": [
        "poaId#0",
        "exists#0"
      ]
    },
    "649": {
      "error": "POA not found",
      "op": "assert // POA not found",
      "stack_out": [
        "poaId#0"
      ]
    },
    "650": {
      "retsub": true,
      "op": "retsub"
    },
    "651": {
      "subroutine": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.claimPoa",
      "params": {
        "optInTxn#0": "uint64"
      },
      "block": "claimPoa",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "654": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "655": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%0#0"
      ]
    },
    "657": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "poaId#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "poaId#0",
        "exists#0"
      ]
    },
    "658": {
      "error": "POA not found, attendance validation failed!",
      "op": "assert // POA not found, attendance validation failed!",
      "stack_out": [
        "tmp%15#0",
        "poaId#0"
      ]
    },
    "659": {
      "op": "frame_dig -1",
      "defined_out": [
        "optInTxn#0 (copy)",
        "poaId#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "poaId#0",
        "optInTxn#0 (copy)"
      ]
    },
    "661": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "poaId#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "poaId#0",
        "tmp%1#0"
      ]
    },
    "663": {
      "op": "dup"
    },
    "664": {
      "op": "uncover 2",
      "defined_out": [
        "poaId#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%1#0",
        "poaId#0"
      ]
    },
    "666": {
      "op": "btoi",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "667": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "668": {
      "error": "POA ID mismatch",
      "op": "assert // POA ID mismatch",
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0"
      ]
    },
    "669": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "optInTxn#0 (copy)"
      ]
    },
    "671": {
      "op": "gtxns Fee",
      "defined_out": [
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "673": {
      "op": "!",
      "defined_out": [
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "674": {
      "error": "We got you covered for free!",
      "op": "assert // We got you covered for free!",
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0"
      ]
    },
    "675": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "optInTxn#0 (copy)"
      ]
    },
    "677": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "679": {
      "op": "!",
      "defined_out": [
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%7#0"
      ]
    },
    "680": {
      "op": "assert",
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0"
      ]
    },
    "681": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "optInTxn#0 (copy)"
      ]
    },
    "683": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%8#0"
      ]
    },
    "685": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%8#0",
        "optInTxn#0 (copy)"
      ]
    },
    "687": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%1#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "689": {
      "op": "dup",
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "690": {
      "op": "cover 2",
      "defined_out": [
        "tmp%1#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "692": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "693": {
      "op": "bz claimPoa_bool_false@3",
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0"
      ]
    },
    "696": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "698": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0",
        "tmp%12#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "tmp%9#0",
        "tmp%12#0"
      ]
    },
    "700": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%13#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "tmp%13#0"
      ]
    },
    "701": {
      "op": "bz claimPoa_bool_false@3",
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0"
      ]
    },
    "704": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "and_result%0#0"
      ]
    },
    "705": {
      "block": "claimPoa_bool_merge@4",
      "stack_in": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "and_result%0#0"
      ],
      "error": "Opt-in transaction sender and receiver must be the same",
      "op": "assert // Opt-in transaction sender and receiver must be the same",
      "defined_out": [],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0"
      ]
    },
    "706": {
      "op": "frame_dig -1",
      "defined_out": [
        "optInTxn#0 (copy)"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "optInTxn#0 (copy)"
      ]
    },
    "708": {
      "op": "gtxns AssetCloseTo",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "tmp%14#0"
      ]
    },
    "710": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "tmp%14#0",
        "optInTxn#0 (copy)"
      ]
    },
    "712": {
      "op": "gtxns RekeyTo",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "714": {
      "op": "dup",
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%15#0"
      ]
    },
    "715": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "717": {
      "op": "==",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "tmp%16#0"
      ]
    },
    "718": {
      "op": "bz claimPoa_bool_false@7",
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0"
      ]
    },
    "721": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "tmp%15#0"
      ]
    },
    "723": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%15#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "tmp%15#0",
        "tmp%18#0"
      ]
    },
    "725": {
      "op": "==",
      "defined_out": [
        "tmp%15#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "tmp%19#0"
      ]
    },
    "726": {
      "op": "bz claimPoa_bool_false@7",
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0"
      ]
    },
    "729": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "and_result%1#0"
      ]
    },
    "730": {
      "block": "claimPoa_bool_merge@8",
      "stack_in": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "and_result%1#0"
      ],
      "error": "Opt-in transaction close to must be zero address",
      "op": "assert // Opt-in transaction close to must be zero address",
      "defined_out": [],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0"
      ]
    },
    "731": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "tmp%20#0"
      ]
    },
    "733": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%1#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "tmp%20#0",
        "tmp%1#0"
      ]
    },
    "735": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.sendPoa",
      "op": "callsub sendPoa",
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0"
      ]
    },
    "738": {
      "retsub": true,
      "op": "retsub"
    },
    "739": {
      "block": "claimPoa_bool_false@7",
      "stack_in": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "and_result%1#0"
      ]
    },
    "740": {
      "op": "b claimPoa_bool_merge@8"
    },
    "743": {
      "block": "claimPoa_bool_false@3",
      "stack_in": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0",
        "tmp%9#0",
        "and_result%0#0"
      ]
    },
    "744": {
      "op": "b claimPoa_bool_merge@4"
    },
    "747": {
      "subroutine": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.claimPoaWithBox",
      "params": {
        "optInTxn#0": "uint64"
      },
      "block": "claimPoaWithBox",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "750": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "751": {
      "op": "txn Sender",
      "defined_out": [
        "box#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "box#0"
      ]
    },
    "753": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "maybe_value%0#0",
        "exists#0"
      ]
    },
    "754": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "exists#0",
        "maybe_value%0#0"
      ]
    },
    "755": {
      "op": "btoi",
      "defined_out": [
        "exists#0",
        "poaId#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "exists#0",
        "poaId#0"
      ]
    },
    "756": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "poaId#0",
        "exists#0"
      ]
    },
    "757": {
      "error": "POA not found, attendance validation failed!",
      "op": "assert // POA not found, attendance validation failed!",
      "stack_out": [
        "tmp%13#0",
        "poaId#0"
      ]
    },
    "758": {
      "op": "frame_dig -1",
      "defined_out": [
        "optInTxn#0 (copy)",
        "poaId#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "poaId#0",
        "optInTxn#0 (copy)"
      ]
    },
    "760": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "poaId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "poaId#0",
        "tmp%0#0"
      ]
    },
    "762": {
      "op": "dup"
    },
    "763": {
      "op": "uncover 2",
      "defined_out": [
        "poaId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%0#0",
        "poaId#0"
      ]
    },
    "765": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "766": {
      "error": "POA ID mismatch",
      "op": "assert // POA ID mismatch",
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0"
      ]
    },
    "767": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "optInTxn#0 (copy)"
      ]
    },
    "769": {
      "op": "gtxns Fee",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "771": {
      "op": "!",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "772": {
      "error": "We got you covered for free!",
      "op": "assert // We got you covered for free!",
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0"
      ]
    },
    "773": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "optInTxn#0 (copy)"
      ]
    },
    "775": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "777": {
      "op": "!",
      "defined_out": [
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "778": {
      "op": "assert",
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0"
      ]
    },
    "779": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "optInTxn#0 (copy)"
      ]
    },
    "781": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "783": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%6#0",
        "optInTxn#0 (copy)"
      ]
    },
    "785": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "787": {
      "op": "dup",
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%7#0"
      ]
    },
    "788": {
      "op": "cover 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "790": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "791": {
      "op": "bz claimPoaWithBox_bool_false@3",
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "794": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%7#0"
      ]
    },
    "796": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%10#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%7#0",
        "tmp%10#0"
      ]
    },
    "798": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%11#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%11#0"
      ]
    },
    "799": {
      "op": "bz claimPoaWithBox_bool_false@3",
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "802": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "and_result%0#0"
      ]
    },
    "803": {
      "block": "claimPoaWithBox_bool_merge@4",
      "stack_in": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "and_result%0#0"
      ],
      "error": "Opt-in transaction sender and receiver must be the same",
      "op": "assert // Opt-in transaction sender and receiver must be the same",
      "defined_out": [],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "804": {
      "op": "frame_dig -1",
      "defined_out": [
        "optInTxn#0 (copy)"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "optInTxn#0 (copy)"
      ]
    },
    "806": {
      "op": "gtxns AssetCloseTo",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%12#0"
      ]
    },
    "808": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%12#0",
        "optInTxn#0 (copy)"
      ]
    },
    "810": {
      "op": "gtxns RekeyTo",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "812": {
      "op": "dup",
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%13#0"
      ]
    },
    "813": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "815": {
      "op": "==",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%14#0"
      ]
    },
    "816": {
      "op": "bz claimPoaWithBox_bool_false@7",
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "819": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%13#0"
      ]
    },
    "821": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%13#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%13#0",
        "tmp%16#0"
      ]
    },
    "823": {
      "op": "==",
      "defined_out": [
        "tmp%13#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%17#0"
      ]
    },
    "824": {
      "op": "bz claimPoaWithBox_bool_false@7",
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "827": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "and_result%1#0"
      ]
    },
    "828": {
      "block": "claimPoaWithBox_bool_merge@8",
      "stack_in": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "and_result%1#0"
      ],
      "error": "Opt-in transaction close to must be zero address",
      "op": "assert // Opt-in transaction close to must be zero address",
      "defined_out": [],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "829": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%18#0"
      ]
    },
    "831": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%18#0",
        "tmp%0#0"
      ]
    },
    "833": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.sendPoa",
      "op": "callsub sendPoa",
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "836": {
      "retsub": true,
      "op": "retsub"
    },
    "837": {
      "block": "claimPoaWithBox_bool_false@7",
      "stack_in": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "and_result%1#0"
      ]
    },
    "838": {
      "op": "b claimPoaWithBox_bool_merge@8"
    },
    "841": {
      "block": "claimPoaWithBox_bool_false@3",
      "stack_in": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "tmp%7#0",
        "and_result%0#0"
      ]
    },
    "842": {
      "op": "b claimPoaWithBox_bool_merge@4"
    },
    "845": {
      "subroutine": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.claimPoaWithBoxRef",
      "params": {
        "optInTxn#0": "uint64"
      },
      "block": "claimPoaWithBoxRef",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "848": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "849": {
      "op": "txn Sender",
      "defined_out": [
        "boxRef#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "boxRef#0"
      ]
    },
    "851": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "poaId#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "poaId#0",
        "exists#0"
      ]
    },
    "852": {
      "error": "POA not found, attendance validation failed!",
      "op": "assert // POA not found, attendance validation failed!",
      "stack_out": [
        "tmp%14#0",
        "poaId#0"
      ]
    },
    "853": {
      "op": "frame_dig -1",
      "defined_out": [
        "optInTxn#0 (copy)",
        "poaId#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "poaId#0",
        "optInTxn#0 (copy)"
      ]
    },
    "855": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "poaId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "poaId#0",
        "tmp%0#0"
      ]
    },
    "857": {
      "op": "dup"
    },
    "858": {
      "op": "uncover 2",
      "defined_out": [
        "poaId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%0#0",
        "poaId#0"
      ]
    },
    "860": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "861": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "862": {
      "error": "POA ID mismatch",
      "op": "assert // POA ID mismatch",
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0"
      ]
    },
    "863": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "optInTxn#0 (copy)"
      ]
    },
    "865": {
      "op": "gtxns Fee",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "867": {
      "op": "!",
      "defined_out": [
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "868": {
      "error": "We got you covered for free!",
      "op": "assert // We got you covered for free!",
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0"
      ]
    },
    "869": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "optInTxn#0 (copy)"
      ]
    },
    "871": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "873": {
      "op": "!",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "874": {
      "op": "assert",
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0"
      ]
    },
    "875": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "optInTxn#0 (copy)"
      ]
    },
    "877": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "879": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%7#0",
        "optInTxn#0 (copy)"
      ]
    },
    "881": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "883": {
      "op": "dup",
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%8#0"
      ]
    },
    "884": {
      "op": "cover 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "886": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "887": {
      "op": "bz claimPoaWithBoxRef_bool_false@3",
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "890": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%8#0"
      ]
    },
    "892": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%8#0",
        "tmp%11#0"
      ]
    },
    "894": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%12#0"
      ]
    },
    "895": {
      "op": "bz claimPoaWithBoxRef_bool_false@3",
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "898": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "and_result%0#0"
      ]
    },
    "899": {
      "block": "claimPoaWithBoxRef_bool_merge@4",
      "stack_in": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "and_result%0#0"
      ],
      "error": "Opt-in transaction sender and receiver must be the same",
      "op": "assert // Opt-in transaction sender and receiver must be the same",
      "defined_out": [],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "900": {
      "op": "frame_dig -1",
      "defined_out": [
        "optInTxn#0 (copy)"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "optInTxn#0 (copy)"
      ]
    },
    "902": {
      "op": "gtxns AssetCloseTo",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%13#0"
      ]
    },
    "904": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%13#0",
        "optInTxn#0 (copy)"
      ]
    },
    "906": {
      "op": "gtxns RekeyTo",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "908": {
      "op": "dup",
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%14#0"
      ]
    },
    "909": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "911": {
      "op": "==",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%15#0"
      ]
    },
    "912": {
      "op": "bz claimPoaWithBoxRef_bool_false@7",
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "915": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%14#0"
      ]
    },
    "917": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%14#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%17#0"
      ]
    },
    "919": {
      "op": "==",
      "defined_out": [
        "tmp%14#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%18#0"
      ]
    },
    "920": {
      "op": "bz claimPoaWithBoxRef_bool_false@7",
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "923": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "and_result%1#0"
      ]
    },
    "924": {
      "block": "claimPoaWithBoxRef_bool_merge@8",
      "stack_in": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "and_result%1#0"
      ],
      "error": "Opt-in transaction close to must be zero address",
      "op": "assert // Opt-in transaction close to must be zero address",
      "defined_out": [],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "925": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%19#0"
      ]
    },
    "927": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%19#0",
        "tmp%0#0"
      ]
    },
    "929": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.sendPoa",
      "op": "callsub sendPoa",
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "932": {
      "retsub": true,
      "op": "retsub"
    },
    "933": {
      "block": "claimPoaWithBoxRef_bool_false@7",
      "stack_in": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "and_result%1#0"
      ]
    },
    "934": {
      "op": "b claimPoaWithBoxRef_bool_merge@8"
    },
    "937": {
      "block": "claimPoaWithBoxRef_bool_false@3",
      "stack_in": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "tmp%8#0",
        "and_result%0#0"
      ]
    },
    "938": {
      "op": "b claimPoaWithBoxRef_bool_merge@4"
    },
    "941": {
      "subroutine": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.claimPoaWithBoxMap",
      "params": {
        "optInTxn#0": "uint64"
      },
      "block": "claimPoaWithBoxMap",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "944": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "945": {
      "op": "bytec_3 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\""
      ],
      "stack_out": [
        "tmp%15#0",
        "\"boxMap\""
      ]
    },
    "946": {
      "op": "txn Sender",
      "defined_out": [
        "\"boxMap\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "\"boxMap\"",
        "tmp%0#0"
      ]
    },
    "948": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%1#0"
      ]
    },
    "949": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "maybe_value%0#0",
        "exists#0"
      ]
    },
    "950": {
      "op": "swap",
      "stack_out": [
        "tmp%15#0",
        "exists#0",
        "maybe_value%0#0"
      ]
    },
    "951": {
      "op": "btoi",
      "defined_out": [
        "exists#0",
        "poaId#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "exists#0",
        "poaId#0"
      ]
    },
    "952": {
      "op": "swap",
      "stack_out": [
        "tmp%15#0",
        "poaId#0",
        "exists#0"
      ]
    },
    "953": {
      "error": "POA not found, attendance validation failed!",
      "op": "assert // POA not found, attendance validation failed!",
      "stack_out": [
        "tmp%15#0",
        "poaId#0"
      ]
    },
    "954": {
      "op": "frame_dig -1",
      "defined_out": [
        "optInTxn#0 (copy)",
        "poaId#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "poaId#0",
        "optInTxn#0 (copy)"
      ]
    },
    "956": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "poaId#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "poaId#0",
        "tmp%2#0"
      ]
    },
    "958": {
      "op": "dup"
    },
    "959": {
      "op": "uncover 2",
      "defined_out": [
        "poaId#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%2#0",
        "poaId#0"
      ]
    },
    "961": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "962": {
      "error": "POA ID mismatch",
      "op": "assert // POA ID mismatch",
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0"
      ]
    },
    "963": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "optInTxn#0 (copy)"
      ]
    },
    "965": {
      "op": "gtxns Fee",
      "defined_out": [
        "tmp%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "967": {
      "op": "!",
      "defined_out": [
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%5#0"
      ]
    },
    "968": {
      "error": "We got you covered for free!",
      "op": "assert // We got you covered for free!",
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0"
      ]
    },
    "969": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "optInTxn#0 (copy)"
      ]
    },
    "971": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%6#0"
      ]
    },
    "973": {
      "op": "!",
      "defined_out": [
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%7#0"
      ]
    },
    "974": {
      "op": "assert",
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0"
      ]
    },
    "975": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "optInTxn#0 (copy)"
      ]
    },
    "977": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%8#0"
      ]
    },
    "979": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%8#0",
        "optInTxn#0 (copy)"
      ]
    },
    "981": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%2#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "983": {
      "op": "dup",
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "984": {
      "op": "cover 2",
      "defined_out": [
        "tmp%2#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "986": {
      "op": "==",
      "defined_out": [
        "tmp%10#0",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "987": {
      "op": "bz claimPoaWithBoxMap_bool_false@3",
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0"
      ]
    },
    "990": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "992": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%12#0",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "tmp%9#0",
        "tmp%12#0"
      ]
    },
    "994": {
      "op": "==",
      "defined_out": [
        "tmp%13#0",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "tmp%13#0"
      ]
    },
    "995": {
      "op": "bz claimPoaWithBoxMap_bool_false@3",
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0"
      ]
    },
    "998": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "and_result%0#0"
      ]
    },
    "999": {
      "block": "claimPoaWithBoxMap_bool_merge@4",
      "stack_in": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "and_result%0#0"
      ],
      "error": "Opt-in transaction sender and receiver must be the same",
      "op": "assert // Opt-in transaction sender and receiver must be the same",
      "defined_out": [],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0"
      ]
    },
    "1000": {
      "op": "frame_dig -1",
      "defined_out": [
        "optInTxn#0 (copy)"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "optInTxn#0 (copy)"
      ]
    },
    "1002": {
      "op": "gtxns AssetCloseTo",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "tmp%14#0"
      ]
    },
    "1004": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "tmp%14#0",
        "optInTxn#0 (copy)"
      ]
    },
    "1006": {
      "op": "gtxns RekeyTo",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "1008": {
      "op": "dup",
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%15#0"
      ]
    },
    "1009": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "1011": {
      "op": "==",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "tmp%16#0"
      ]
    },
    "1012": {
      "op": "bz claimPoaWithBoxMap_bool_false@7",
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0"
      ]
    },
    "1015": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "tmp%15#0"
      ]
    },
    "1017": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%15#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "tmp%15#0",
        "tmp%18#0"
      ]
    },
    "1019": {
      "op": "==",
      "defined_out": [
        "tmp%15#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "tmp%19#0"
      ]
    },
    "1020": {
      "op": "bz claimPoaWithBoxMap_bool_false@7",
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0"
      ]
    },
    "1023": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%1#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "and_result%1#0"
      ]
    },
    "1024": {
      "block": "claimPoaWithBoxMap_bool_merge@8",
      "stack_in": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "and_result%1#0"
      ],
      "error": "Opt-in transaction close to must be zero address",
      "op": "assert // Opt-in transaction close to must be zero address",
      "defined_out": [],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0"
      ]
    },
    "1025": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "tmp%20#0"
      ]
    },
    "1027": {
      "op": "frame_dig 1",
      "defined_out": [
        "tmp%2#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "tmp%20#0",
        "tmp%2#0"
      ]
    },
    "1029": {
      "callsub": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.sendPoa",
      "op": "callsub sendPoa",
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0"
      ]
    },
    "1032": {
      "retsub": true,
      "op": "retsub"
    },
    "1033": {
      "block": "claimPoaWithBoxMap_bool_false@7",
      "stack_in": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "and_result%1#0"
      ]
    },
    "1034": {
      "op": "b claimPoaWithBoxMap_bool_merge@8"
    },
    "1037": {
      "block": "claimPoaWithBoxMap_bool_false@3",
      "stack_in": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%2#0",
        "tmp%9#0",
        "and_result%0#0"
      ]
    },
    "1038": {
      "op": "b claimPoaWithBoxMap_bool_merge@4"
    },
    "1041": {
      "subroutine": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.mintPoa",
      "params": {
        "claimer#0": "bytes"
      },
      "block": "mintPoa",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1044": {
      "block": "mintPoa_while_top@3",
      "stack_in": [],
      "op": "pushint 10010 // 10010",
      "defined_out": [
        "10010"
      ],
      "stack_out": [
        "10010"
      ]
    },
    "1047": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "10010",
        "tmp%0#1"
      ],
      "stack_out": [
        "10010",
        "tmp%0#1"
      ]
    },
    "1049": {
      "op": ">",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "1050": {
      "op": "bz mintPoa_after_while@8",
      "stack_out": []
    },
    "1053": {
      "op": "itxn_begin"
    },
    "1054": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "1056": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1058": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "DeleteApplication"
      ]
    },
    "1060": {
      "op": "itxn_field OnCompletion",
      "stack_out": []
    },
    "1062": {
      "op": "bytec 5 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "0x068101"
      ]
    },
    "1064": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": []
    },
    "1066": {
      "op": "bytec 5 // 0x068101",
      "stack_out": [
        "0x068101"
      ]
    },
    "1068": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": []
    },
    "1070": {
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1072": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1074": {
      "op": "itxn_submit"
    },
    "1075": {
      "op": "b mintPoa_while_top@3"
    },
    "1078": {
      "block": "mintPoa_after_while@8",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1079": {
      "op": "bytec_0 // \"totalAttendees\"",
      "defined_out": [
        "\"totalAttendees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalAttendees\""
      ]
    },
    "1080": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1081": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1082": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1083": {
      "op": "pushbytes \"AlgoKit POA #\"",
      "defined_out": [
        "\"AlgoKit POA #\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"AlgoKit POA #\""
      ]
    },
    "1098": {
      "op": "swap",
      "stack_out": [
        "\"AlgoKit POA #\"",
        "tmp%0#0"
      ]
    },
    "1099": {
      "op": "concat",
      "defined_out": [
        "assetName#0"
      ],
      "stack_out": [
        "assetName#0"
      ]
    },
    "1100": {
      "op": "itxn_begin"
    },
    "1101": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetName#0",
        "0"
      ]
    },
    "1102": {
      "op": "bytec 4 // \"assetUrl\"",
      "defined_out": [
        "\"assetUrl\"",
        "0",
        "assetName#0"
      ],
      "stack_out": [
        "assetName#0",
        "0",
        "\"assetUrl\""
      ]
    },
    "1104": {
      "op": "app_global_get_ex",
      "defined_out": [
        "assetName#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "assetName#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1105": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetName#0",
        "maybe_value%1#0"
      ]
    },
    "1106": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetName#0",
        "claimer#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "assetName#0",
        "maybe_value%1#0",
        "claimer#0 (copy)"
      ]
    },
    "1108": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "assetName#0",
        "maybe_value%1#0"
      ]
    },
    "1110": {
      "op": "itxn_field ConfigAssetURL",
      "stack_out": [
        "assetName#0"
      ]
    },
    "1112": {
      "op": "intc_0 // 0",
      "stack_out": [
        "assetName#0",
        "0"
      ]
    },
    "1113": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "assetName#0"
      ]
    },
    "1115": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "assetName#0"
      ],
      "stack_out": [
        "assetName#0",
        "1"
      ]
    },
    "1116": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "assetName#0"
      ]
    },
    "1118": {
      "op": "pushbytes \"POA\"",
      "defined_out": [
        "\"POA\"",
        "assetName#0"
      ],
      "stack_out": [
        "assetName#0",
        "\"POA\""
      ]
    },
    "1123": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "assetName#0"
      ]
    },
    "1125": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "1127": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "1129": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1131": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1132": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1134": {
      "op": "itxn_submit"
    },
    "1135": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1137": {
      "retsub": true,
      "op": "retsub"
    },
    "1138": {
      "subroutine": "contracts/proof-of-attendance.algo.ts::ProofOfAttendance.sendPoa",
      "params": {
        "receiver#0": "bytes",
        "asset#0": "uint64"
      },
      "block": "sendPoa",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1141": {
      "op": "itxn_begin"
    },
    "1142": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1144": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "1"
      ]
    },
    "1145": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1147": {
      "op": "frame_dig -2",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "receiver#0 (copy)"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "receiver#0 (copy)"
      ]
    },
    "1149": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1151": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "1153": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "1155": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "1157": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "1158": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1160": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1161": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1163": {
      "op": "itxn_submit"
    },
    "1164": {
      "retsub": true,
      "op": "retsub"
    }
  }
}