{
    "name": "KitchenSinkContract",
    "structs": {},
    "methods": [
        {
            "name": "useState",
            "args": [
                {
                    "type": "uint64",
                    "name": "a"
                },
                {
                    "type": "string",
                    "name": "b"
                },
                {
                    "type": "uint64",
                    "name": "c"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "createApp",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "optIn",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "OptIn"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addToBox",
            "args": [
                {
                    "type": "uint64",
                    "name": "x"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addToBoxMap",
            "args": [
                {
                    "type": "string",
                    "name": "x"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "insertIntoBoxRef",
            "args": [
                {
                    "type": "byte[]",
                    "name": "content"
                },
                {
                    "type": "uint64",
                    "name": "offset"
                },
                {
                    "type": "uint64",
                    "name": "boxSize"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "sayHello",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "uint64",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "checkTransaction",
            "args": [
                {
                    "type": "pay",
                    "name": "pay"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 1
            }
        },
        "keys": {
            "global": {
                "globalInt": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsSW50"
                },
                "globalString": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "Y3VzdG9tS2V5"
                }
            },
            "local": {
                "localBigInt": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bG9jYWxCaWdJbnQ="
                }
            },
            "box": {
                "boxOfArray": {
                    "keyType": "AVMString",
                    "valueType": "uint64[]",
                    "key": "Yg=="
                },
                "boxMap": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": ""
                },
                "boxRef": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMBytes",
                    "key": "/w=="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        391,
                        478
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        114,
                        136,
                        175,
                        201,
                        219,
                        245,
                        258
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        236
                    ],
                    "errorMessage": "OnCompletion is not OptIn"
                },
                {
                    "pc": [
                        567
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        573
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        249
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        117,
                        139,
                        178,
                        204,
                        222,
                        239,
                        261
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        287,
                        305
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        127
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiADAQAIJgQBYgH/CWdsb2JhbEludAljdXN0b21LZXkxGEAABCqBBGcxG0EAP4IIBC2scV0EzAxuTQQpMU2VBPdDziEEOkmyowT12Ji3BGzg9LUESaVa6DYaAI4IAJIAhQB7AGsAWQA/ABgAAiNDMRkURDEYRDEWIglJOBAiEkSIAYAiQzEZFEQxGEQ2GgFXAgA2GgIXiAFTSRUWVwYCTFCABBUffHVMULAiQzEZFEQxGEQ2GgFXAgA2GgIXNhoDF4gA9SJDMRkURDEYRDYaAVcCAIgA1yJDMRkURDEYRDYaAReIAIEiQzEZIhJEMRhEIkMxGRREMRgURIgAZSJDMRkURDEYRDYaARc2GgJXAgA2GgMXiAACIkOKAwAjKmVEi/0LKkxnIytlRQFBAC0jK2VEi/5QK0xnMQAyCGFBABqL/xaL/RYxAE4Co4ALbG9jYWxCaWdJbnRMZokri/5nQv/WKjIIZ4mKAQAovUUBQAAUi/8WSRUkChZXBgJMUCi8SChMv4kovkRXAgCL/xZJFSQKFlcGAkxQVwIAUEkVJAoWVwYCTFAovEgoTL+JigEAMQBJvEiL/7+JigMAi/0Vi/4ISYv/DEQpvUUBQQAOKYv/uUgpi/6LAIv90okpvUSL/xNB/+4pi//TQv/nigIBgAZIZWxsbyCL/lCAASBQi/8WUImKAQCL/zgISYHQDw5BAC2LAIHoBw9BACSL/zgEMgYNQQAai/84ADEAEkEAEIv/OAcyCHIIRBJBAAMiRIkjQv/6",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 4,
            "patch": 4
        }
    },
    "events": [],
    "templateVariables": {}
}