{
    "name": "VotingContract",
    "structs": {},
    "methods": [
        {
            "name": "setTopic",
            "args": [
                {
                    "type": "string",
                    "name": "topic"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "vote",
            "args": [
                {
                    "type": "pay",
                    "name": "pay"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getVotes",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 1
            },
            "local": {
                "ints": 1,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "topic": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "dG9waWM="
                },
                "votes": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dm90ZXM="
                }
            },
            "local": {
                "voted": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dm90ZWQ="
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        185
                    ],
                    "errorMessage": "Expected 2 transactions"
                },
                {
                    "pc": [
                        194
                    ],
                    "errorMessage": "Incorrect payment amount"
                },
                {
                    "pc": [
                        93,
                        110,
                        143
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        202
                    ],
                    "errorMessage": "Payment sender must match transaction sender"
                },
                {
                    "pc": [
                        166
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        96,
                        113,
                        146
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        218,
                        234
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        123
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBjb250cmFjdHMvdm90aW5nLmFsZ28udHM6OlZvdGluZ0NvbnRyYWN0LmNsZWFyU3RhdGVQcm9ncmFtKCkgLT4gdWludDY0OgptYWluOgogICAgLy8gY29udHJhY3RzL3ZvdGluZy5hbGdvLnRzOjQ5CiAgICAvLyByZXR1cm4gdHJ1ZTsKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiACAQAmBAV2b3RlcwV0b3BpYwQVH3x1BXZvdGVkMRhAABQpgA1kZWZhdWx0X3RvcGljZygjZzEbQQBiggMEWgw4QgTzyYazBOj0cKs2GgCOAwA0ABMAAiNDMRkURDEYRIgAgxYqTFCwIkMxGRREMRhEMRYiCUk4ECISRIgAMoABACNPAlQqTFCwIkMxGRREMRhENhoBVwIAiAANIkMxGUD/tTEYFEQiQ4oBACmL/2eJigEBMgSBAhJEi/84CIGQThJEi/84ADEAEkQxACMrY0UBQQACI4kjKGVEIggoTGcxACsiZiKJIyhlRIk=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 4,
            "patch": 4
        }
    },
    "events": [],
    "templateVariables": {}
}