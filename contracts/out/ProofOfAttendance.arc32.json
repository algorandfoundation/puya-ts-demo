{
    "hints": {
        "init(uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "confirmAttendance()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "confirmAttendanceWithBox()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "confirmAttendanceWithBoxRef()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "confirmAttendanceWithBoxMap()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPoaId()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPoaIdWithBox()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPoaIdWithBoxRef()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPoaIdWithBoxMap()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claimPoa(axfer)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claimPoaWithBox(axfer)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claimPoaWithBoxRef(axfer)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claimPoaWithBoxMap(axfer)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 2
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "assetUrl": {
                    "type": "bytes",
                    "key": "assetUrl"
                },
                "maxAttendees": {
                    "type": "uint64",
                    "key": "maxAttendees"
                },
                "totalAttendees": {
                    "type": "uint64",
                    "key": "totalAttendees"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ProofOfAttendance",
        "methods": [
            {
                "name": "init",
                "args": [
                    {
                        "type": "uint64",
                        "name": "maxAttendees"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "confirmAttendance",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "confirmAttendanceWithBox",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "confirmAttendanceWithBoxRef",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "confirmAttendanceWithBoxMap",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getPoaId",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getPoaIdWithBox",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getPoaIdWithBoxRef",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getPoaIdWithBoxMap",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "claimPoa",
                "args": [
                    {
                        "type": "axfer",
                        "name": "optInTxn"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "claimPoaWithBox",
                "args": [
                    {
                        "type": "axfer",
                        "name": "optInTxn"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "claimPoaWithBoxRef",
                "args": [
                    {
                        "type": "axfer",
                        "name": "optInTxn"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "claimPoaWithBoxMap",
                "args": [
                    {
                        "type": "axfer",
                        "name": "optInTxn"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}