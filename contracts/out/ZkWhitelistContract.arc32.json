{
    "hints": {
        "create(string)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "update()void": {
            "call_config": {
                "update_application": "CALL",
                "delete_application": "CALL"
            }
        },
        "optInOrOut()void": {
            "call_config": {
                "opt_in": "CALL",
                "close_out": "CALL"
            }
        },
        "addAddressToWhitelist(address,address[])string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "isOnWhitelist(address)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verifyProof(uint64,address[],address[])bool": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 1
        }
    },
    "schema": {
        "global": {
            "declared": {
                "appName": {
                    "type": "bytes",
                    "key": "appName"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "whiteList": {
                    "type": "uint64",
                    "key": "whiteList"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "ZkWhitelistContract",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "optInOrOut",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "addAddressToWhitelist",
                "args": [
                    {
                        "type": "address",
                        "name": "address"
                    },
                    {
                        "type": "address[]",
                        "name": "proof"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "isOnWhitelist",
                "args": [
                    {
                        "type": "address",
                        "name": "address"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "verifyProof",
                "args": [
                    {
                        "type": "uint64",
                        "name": "appId"
                    },
                    {
                        "type": "address[]",
                        "name": "proof"
                    },
                    {
                        "type": "address[]",
                        "name": "publicInputs"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}