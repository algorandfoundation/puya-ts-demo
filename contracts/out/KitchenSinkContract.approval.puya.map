{
  "version": 3,
  "sources": [
    "/Users/joe/git/other/puya-ts-demo/contracts/kitchen-sink.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBE;AAA+C;;AAA/C;AADF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;AAAA;;AAwDE;;AAAA;AAAA;AAAA;;AAAA;AAxDF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwDE;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AApDF;;;AAAA;;;AAAA;;;AAAA;AAoDE;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AA1CF;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AA0CE;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAtCF;;;AAAA;;;AAsCE;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AA9BF;;;AAAA;AA8BE;;;AAAA;;AAHC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAZD;;AAAA;AAAA;AAAA;;AAAA;AAVF;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;AAUE;;;AAAA;;AAAA;;;AATA;AAAA;AAAA;AAAA;AAUE;;AAAA;AAVF;AAUE;AAAA;AATwC;AAAA;AAUlB;AAAA;;AAAtB;;;AAVwC;AAAA;AAAA;AAAA;AAWtC;;AAAA;AAXsC;AAWtC;AAAA;AAIM;;AAAwB;;AAA5B;AAAJ;;;AACuC;;AAAA;AAAa;;AAAA;AAA7B;;AAAgB;;AAAA;AAdzC;;;;;;;;;;;;;AAcI;AAAA;;AAhBsC;AAatC;;AAAA;;;;AAdJ;AAuBgC;;AAA9B;;AAMF;;;AAxBkC;AAyBX;AAAA;;AAAjB;;;AACuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AA1BK;AA0B9B;;AA1B8B;AA0B9B;AAAA;;AA1B8B;AA4Bc;AAAA;AAApB;;;AAA2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAA3B;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AA5BM;AA4B9B;;AA5B8B;AA4B9B;AAAA;;AAIJ;;;AACkB;;AAAhB;AAAA;;AAAA;;AAAA;;AAGF;;;AAC0B;;AAAA;AAAjB;;AAAA;AAAA;AAAA;;AAAA;AAAP;AAnCqB;AAoCL;AAAA;;AAAhB;;;AApCqB;AAqCnB;;AAAA;;AArCmB;AAyCrB;;AAAA;;AAAA;;AAAA;;AAzCqB;AAsCE;AAAA;AAAZ;;AAAA;AAAJ;;;AAtCc;AAuCnB;;AAAA;;;;AAKJ;;;AACS;;;;;;;;AAAA;;AAAA;AAAA;;;AAAA;AAA8B;;AAAA;AAA9B;AAAP;AAGF;;;AACE;;AAAA;;AAAA;AAC4B;;;AAD5B;AAAA;;;AAAA;;AACsB;;;AADtB;AAAA;;;AAAA;;AAAA;;AAEmC;;AAFnC;AAAA;;;AAAA;;AAAA;;AAGc;;AAHd;AAAA;;;AAAA;;AAAA;;AAImB;;AAAqB;;AAAA;AAJxC;AAAA;;;;AAAA;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 8"
    },
    "6": {
      "op": "bytecblock \"b\" 0xff \"globalInt\" \"customKey\""
    },
    "32": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "34": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "37": {
      "op": "bytec_2 // \"globalInt\"",
      "defined_out": [
        "\"globalInt\""
      ],
      "stack_out": [
        "\"globalInt\""
      ]
    },
    "38": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "\"globalInt\"",
        "4"
      ],
      "stack_out": [
        "\"globalInt\"",
        "4"
      ]
    },
    "40": {
      "op": "app_global_put",
      "stack_out": []
    },
    "41": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "43": {
      "op": "bz main_after_if_else@16",
      "stack_out": []
    },
    "46": {
      "op": "pushbytess 0x2dac715d 0xcc0c6e4d 0x29314d95 0xf743ce21 0x3a49b2a3 0xf5d898b7 0x6ce0f4b5 0x49a55ae8 // method \"useState(uint64,string,uint64)void\", method \"createApp()void\", method \"optIn()void\", method \"addToBox(uint64)void\", method \"addToBoxMap(string)void\", method \"insertIntoBoxRef(byte[],uint64,uint64)void\", method \"sayHello(string,uint64)string\", method \"checkTransaction(pay)void\"",
      "defined_out": [
        "Method(addToBox(uint64)void)",
        "Method(addToBoxMap(string)void)",
        "Method(checkTransaction(pay)void)",
        "Method(createApp()void)",
        "Method(insertIntoBoxRef(byte[],uint64,uint64)void)",
        "Method(optIn()void)",
        "Method(sayHello(string,uint64)string)",
        "Method(useState(uint64,string,uint64)void)"
      ],
      "stack_out": [
        "Method(useState(uint64,string,uint64)void)",
        "Method(createApp()void)",
        "Method(optIn()void)",
        "Method(addToBox(uint64)void)",
        "Method(addToBoxMap(string)void)",
        "Method(insertIntoBoxRef(byte[],uint64,uint64)void)",
        "Method(sayHello(string,uint64)string)",
        "Method(checkTransaction(pay)void)"
      ]
    },
    "88": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addToBox(uint64)void)",
        "Method(addToBoxMap(string)void)",
        "Method(checkTransaction(pay)void)",
        "Method(createApp()void)",
        "Method(insertIntoBoxRef(byte[],uint64,uint64)void)",
        "Method(optIn()void)",
        "Method(sayHello(string,uint64)string)",
        "Method(useState(uint64,string,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(useState(uint64,string,uint64)void)",
        "Method(createApp()void)",
        "Method(optIn()void)",
        "Method(addToBox(uint64)void)",
        "Method(addToBoxMap(string)void)",
        "Method(insertIntoBoxRef(byte[],uint64,uint64)void)",
        "Method(sayHello(string,uint64)string)",
        "Method(checkTransaction(pay)void)",
        "tmp%2#0"
      ]
    },
    "91": {
      "op": "match main_useState_route@5 main_createApp_route@6 main_optIn_route@7 main_addToBox_route@8 main_addToBoxMap_route@9 main_insertIntoBoxRef_route@10 main_sayHello_route@11 main_checkTransaction_route@12",
      "stack_out": []
    },
    "109": {
      "block": "main_after_if_else@16",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "110": {
      "op": "return",
      "stack_out": []
    },
    "111": {
      "block": "main_checkTransaction_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "113": {
      "op": "!",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "114": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "115": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "117": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "118": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "120": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "1"
      ]
    },
    "121": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "122": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "123": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "125": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "126": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "127": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "128": {
      "callsub": "contracts/kitchen-sink.algo.ts::KitchenSinkContract.checkTransaction",
      "op": "callsub checkTransaction",
      "stack_out": []
    },
    "131": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "132": {
      "op": "return",
      "stack_out": []
    },
    "133": {
      "block": "main_sayHello_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "135": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "136": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "137": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "139": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "140": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "143": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "146": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%5#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "149": {
      "op": "btoi",
      "defined_out": [
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%43#0",
        "tmp%44#0"
      ]
    },
    "150": {
      "callsub": "contracts/kitchen-sink.algo.ts::KitchenSinkContract.sayHello",
      "op": "callsub sayHello",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "153": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "154": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "155": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "156": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "159": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "160": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "161": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "167": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "168": {
      "op": "concat",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "169": {
      "op": "log",
      "stack_out": []
    },
    "170": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "171": {
      "op": "return",
      "stack_out": []
    },
    "172": {
      "block": "main_insertIntoBoxRef_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "174": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "175": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "176": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "178": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "179": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "182": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "185": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "188": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "189": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "192": {
      "op": "btoi",
      "defined_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ]
    },
    "193": {
      "callsub": "contracts/kitchen-sink.algo.ts::KitchenSinkContract.insertIntoBoxRef",
      "op": "callsub insertIntoBoxRef",
      "stack_out": []
    },
    "196": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "197": {
      "op": "return",
      "stack_out": []
    },
    "198": {
      "block": "main_addToBoxMap_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "200": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "201": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "202": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "204": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "205": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "208": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "211": {
      "callsub": "contracts/kitchen-sink.algo.ts::KitchenSinkContract.addToBoxMap",
      "op": "callsub addToBoxMap",
      "stack_out": []
    },
    "214": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "215": {
      "op": "return",
      "stack_out": []
    },
    "216": {
      "block": "main_addToBox_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "218": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "219": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "220": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "222": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "223": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "226": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "227": {
      "callsub": "contracts/kitchen-sink.algo.ts::KitchenSinkContract.addToBox",
      "op": "callsub addToBox",
      "stack_out": []
    },
    "230": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "231": {
      "op": "return",
      "stack_out": []
    },
    "232": {
      "block": "main_optIn_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "234": {
      "op": "intc_0 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "OptIn"
      ]
    },
    "235": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "236": {
      "error": "OnCompletion is not OptIn",
      "op": "assert // OnCompletion is not OptIn",
      "stack_out": []
    },
    "237": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "239": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "240": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "241": {
      "op": "return",
      "stack_out": []
    },
    "242": {
      "block": "main_createApp_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "244": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "245": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "246": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "248": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "249": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "250": {
      "callsub": "contracts/kitchen-sink.algo.ts::KitchenSinkContract.createApp",
      "op": "callsub createApp"
    },
    "253": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "254": {
      "op": "return",
      "stack_out": []
    },
    "255": {
      "block": "main_useState_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "257": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "258": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "259": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "261": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "262": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "265": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "266": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "269": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "272": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "275": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "276": {
      "callsub": "contracts/kitchen-sink.algo.ts::KitchenSinkContract.useState",
      "op": "callsub useState",
      "stack_out": []
    },
    "279": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "280": {
      "op": "return",
      "stack_out": []
    },
    "281": {
      "subroutine": "contracts/kitchen-sink.algo.ts::KitchenSinkContract.useState",
      "params": {
        "a#0": "uint64",
        "b#0": "bytes",
        "c#0": "uint64"
      },
      "block": "useState",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "284": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "285": {
      "op": "bytec_2 // \"globalInt\"",
      "defined_out": [
        "\"globalInt\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"globalInt\""
      ]
    },
    "286": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "287": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "288": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "a#0 (copy)"
      ]
    },
    "290": {
      "op": "*",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "291": {
      "op": "bytec_2 // \"globalInt\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"globalInt\""
      ]
    },
    "292": {
      "op": "swap",
      "stack_out": [
        "\"globalInt\"",
        "new_state_value%0#0"
      ]
    },
    "293": {
      "op": "app_global_put",
      "stack_out": []
    },
    "294": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "295": {
      "op": "bytec_3 // \"customKey\"",
      "defined_out": [
        "\"customKey\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"customKey\""
      ]
    },
    "296": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "297": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "299": {
      "op": "bz useState_else_body@2",
      "stack_out": []
    },
    "302": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "303": {
      "op": "bytec_3 // \"customKey\"",
      "stack_out": [
        "0",
        "\"customKey\""
      ]
    },
    "304": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "305": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "306": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "b#0 (copy)"
      ]
    },
    "308": {
      "op": "concat",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "309": {
      "op": "bytec_3 // \"customKey\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"customKey\""
      ]
    },
    "310": {
      "op": "swap",
      "stack_out": [
        "\"customKey\"",
        "new_state_value%1#0"
      ]
    },
    "311": {
      "op": "app_global_put",
      "stack_out": []
    },
    "312": {
      "block": "useState_after_if_else@3",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "314": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "316": {
      "op": "app_opted_in",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "317": {
      "op": "bz useState_after_if_else@5",
      "stack_out": []
    },
    "320": {
      "op": "frame_dig -1",
      "defined_out": [
        "c#0 (copy)"
      ],
      "stack_out": [
        "c#0 (copy)"
      ]
    },
    "322": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0"
      ]
    },
    "323": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0 (copy)",
        "reinterpret_biguint%0#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "a#0 (copy)"
      ]
    },
    "325": {
      "op": "itob",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "326": {
      "op": "txn Sender",
      "defined_out": [
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0",
        "tmp%3#0"
      ]
    },
    "328": {
      "op": "cover 2",
      "stack_out": [
        "tmp%3#0",
        "reinterpret_biguint%0#0",
        "reinterpret_biguint%1#0"
      ]
    },
    "330": {
      "op": "b*",
      "defined_out": [
        "new_state_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "new_state_value%2#0"
      ]
    },
    "331": {
      "op": "pushbytes \"localBigInt\""
    },
    "344": {
      "op": "swap",
      "defined_out": [
        "\"localBigInt\"",
        "new_state_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "\"localBigInt\"",
        "new_state_value%2#0"
      ]
    },
    "345": {
      "op": "app_local_put",
      "stack_out": []
    },
    "346": {
      "block": "useState_after_if_else@5",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "347": {
      "block": "useState_else_body@2",
      "stack_in": [],
      "op": "bytec_3 // \"customKey\"",
      "defined_out": [
        "\"customKey\""
      ],
      "stack_out": [
        "\"customKey\""
      ]
    },
    "348": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"customKey\"",
        "b#0 (copy)"
      ],
      "stack_out": [
        "\"customKey\"",
        "b#0 (copy)"
      ]
    },
    "350": {
      "op": "app_global_put",
      "stack_out": []
    },
    "351": {
      "op": "b useState_after_if_else@3"
    },
    "354": {
      "subroutine": "contracts/kitchen-sink.algo.ts::KitchenSinkContract.createApp",
      "params": {},
      "block": "createApp",
      "stack_in": [],
      "op": "bytec_2 // \"globalInt\"",
      "defined_out": [
        "\"globalInt\""
      ],
      "stack_out": [
        "\"globalInt\""
      ]
    },
    "355": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "\"globalInt\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"globalInt\"",
        "new_state_value%0#0"
      ]
    },
    "357": {
      "op": "app_global_put",
      "stack_out": []
    },
    "358": {
      "retsub": true,
      "op": "retsub"
    },
    "359": {
      "subroutine": "contracts/kitchen-sink.algo.ts::KitchenSinkContract.addToBox",
      "params": {
        "x#0": "uint64"
      },
      "block": "addToBox",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "362": {
      "op": "bytec_0 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "363": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "364": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "366": {
      "op": "bnz addToBox_else_body@2",
      "stack_out": []
    },
    "369": {
      "op": "frame_dig -1",
      "defined_out": [
        "x#0 (copy)"
      ],
      "stack_out": [
        "x#0 (copy)"
      ]
    },
    "371": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1"
      ],
      "stack_out": [
        "array%sub_item%0#1"
      ]
    },
    "372": {
      "op": "dup",
      "defined_out": [
        "array%sub_item%0#1",
        "array%sub_item%0#1 (copy)"
      ],
      "stack_out": [
        "array%sub_item%0#1",
        "array%sub_item%0#1 (copy)"
      ]
    },
    "373": {
      "op": "len",
      "defined_out": [
        "array%sub_item%0#1",
        "byte_len%0#0"
      ],
      "stack_out": [
        "array%sub_item%0#1",
        "byte_len%0#0"
      ]
    },
    "374": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "array%sub_item%0#1",
        "byte_len%0#0"
      ],
      "stack_out": [
        "array%sub_item%0#1",
        "byte_len%0#0",
        "8"
      ]
    },
    "375": {
      "op": "/",
      "defined_out": [
        "array%sub_item%0#1",
        "len_%0#0"
      ],
      "stack_out": [
        "array%sub_item%0#1",
        "len_%0#0"
      ]
    },
    "376": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "as_bytes%0#0"
      ],
      "stack_out": [
        "array%sub_item%0#1",
        "as_bytes%0#0"
      ]
    },
    "377": {
      "op": "extract 6 2",
      "defined_out": [
        "array%sub_item%0#1",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "array%sub_item%0#1",
        "len_16_bit%0#0"
      ]
    },
    "380": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "array%sub_item%0#1"
      ]
    },
    "381": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0"
      ],
      "stack_out": [
        "concat_result%0#0"
      ]
    },
    "382": {
      "op": "bytec_0 // \"b\"",
      "stack_out": [
        "concat_result%0#0",
        "\"b\""
      ]
    },
    "383": {
      "op": "box_del",
      "defined_out": [
        "concat_result%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "concat_result%0#0",
        "{box_del}"
      ]
    },
    "384": {
      "op": "pop",
      "stack_out": [
        "concat_result%0#0"
      ]
    },
    "385": {
      "op": "bytec_0 // \"b\"",
      "stack_out": [
        "concat_result%0#0",
        "\"b\""
      ]
    },
    "386": {
      "op": "swap",
      "stack_out": [
        "\"b\"",
        "concat_result%0#0"
      ]
    },
    "387": {
      "op": "box_put",
      "stack_out": []
    },
    "388": {
      "retsub": true,
      "op": "retsub"
    },
    "389": {
      "block": "addToBox_else_body@2",
      "stack_in": [],
      "op": "bytec_0 // \"b\"",
      "defined_out": [
        "\"b\""
      ],
      "stack_out": [
        "\"b\""
      ]
    },
    "390": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "391": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "392": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%1#0"
      ]
    },
    "395": {
      "op": "frame_dig -1",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "x#0 (copy)"
      ],
      "stack_out": [
        "expr_value_trimmed%1#0",
        "x#0 (copy)"
      ]
    },
    "397": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%1#1",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%1#0",
        "array%sub_item%1#1"
      ]
    },
    "398": {
      "op": "dup",
      "defined_out": [
        "array%sub_item%1#1",
        "array%sub_item%1#1 (copy)",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%1#0",
        "array%sub_item%1#1",
        "array%sub_item%1#1 (copy)"
      ]
    },
    "399": {
      "op": "len",
      "defined_out": [
        "array%sub_item%1#1",
        "byte_len%1#0",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%1#0",
        "array%sub_item%1#1",
        "byte_len%1#0"
      ]
    },
    "400": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "array%sub_item%1#1",
        "byte_len%1#0",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%1#0",
        "array%sub_item%1#1",
        "byte_len%1#0",
        "8"
      ]
    },
    "401": {
      "op": "/",
      "defined_out": [
        "array%sub_item%1#1",
        "expr_value_trimmed%1#0",
        "len_%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%1#0",
        "array%sub_item%1#1",
        "len_%1#0"
      ]
    },
    "402": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%1#1",
        "as_bytes%1#0",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%1#0",
        "array%sub_item%1#1",
        "as_bytes%1#0"
      ]
    },
    "403": {
      "op": "extract 6 2",
      "defined_out": [
        "array%sub_item%1#1",
        "expr_value_trimmed%1#0",
        "len_16_bit%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%1#0",
        "array%sub_item%1#1",
        "len_16_bit%1#0"
      ]
    },
    "406": {
      "op": "swap",
      "stack_out": [
        "expr_value_trimmed%1#0",
        "len_16_bit%1#0",
        "array%sub_item%1#1"
      ]
    },
    "407": {
      "op": "concat",
      "defined_out": [
        "concat_result%1#0",
        "expr_value_trimmed%1#0"
      ],
      "stack_out": [
        "expr_value_trimmed%1#0",
        "concat_result%1#0"
      ]
    },
    "408": {
      "op": "extract 2 0",
      "defined_out": [
        "expr_value_trimmed%1#0",
        "expr_value_trimmed%3#0"
      ],
      "stack_out": [
        "expr_value_trimmed%1#0",
        "expr_value_trimmed%3#0"
      ]
    },
    "411": {
      "op": "concat",
      "defined_out": [
        "concatenated%2#0"
      ],
      "stack_out": [
        "concatenated%2#0"
      ]
    },
    "412": {
      "op": "dup",
      "defined_out": [
        "concatenated%2#0",
        "concatenated%2#0 (copy)"
      ],
      "stack_out": [
        "concatenated%2#0",
        "concatenated%2#0 (copy)"
      ]
    },
    "413": {
      "op": "len",
      "defined_out": [
        "byte_len%2#0",
        "concatenated%2#0"
      ],
      "stack_out": [
        "concatenated%2#0",
        "byte_len%2#0"
      ]
    },
    "414": {
      "op": "intc_2 // 8",
      "stack_out": [
        "concatenated%2#0",
        "byte_len%2#0",
        "8"
      ]
    },
    "415": {
      "op": "/",
      "defined_out": [
        "concatenated%2#0",
        "len_%2#0"
      ],
      "stack_out": [
        "concatenated%2#0",
        "len_%2#0"
      ]
    },
    "416": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "concatenated%2#0"
      ],
      "stack_out": [
        "concatenated%2#0",
        "as_bytes%2#0"
      ]
    },
    "417": {
      "op": "extract 6 2",
      "defined_out": [
        "concatenated%2#0",
        "len_16_bit%2#0"
      ],
      "stack_out": [
        "concatenated%2#0",
        "len_16_bit%2#0"
      ]
    },
    "420": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%2#0",
        "concatenated%2#0"
      ]
    },
    "421": {
      "op": "concat",
      "defined_out": [
        "concat_result%2#0"
      ],
      "stack_out": [
        "concat_result%2#0"
      ]
    },
    "422": {
      "op": "bytec_0 // \"b\"",
      "stack_out": [
        "concat_result%2#0",
        "\"b\""
      ]
    },
    "423": {
      "op": "box_del",
      "defined_out": [
        "concat_result%2#0",
        "{box_del}"
      ],
      "stack_out": [
        "concat_result%2#0",
        "{box_del}"
      ]
    },
    "424": {
      "op": "pop",
      "stack_out": [
        "concat_result%2#0"
      ]
    },
    "425": {
      "op": "bytec_0 // \"b\"",
      "stack_out": [
        "concat_result%2#0",
        "\"b\""
      ]
    },
    "426": {
      "op": "swap",
      "stack_out": [
        "\"b\"",
        "concat_result%2#0"
      ]
    },
    "427": {
      "op": "box_put",
      "stack_out": []
    },
    "428": {
      "retsub": true,
      "op": "retsub"
    },
    "429": {
      "subroutine": "contracts/kitchen-sink.algo.ts::KitchenSinkContract.addToBoxMap",
      "params": {
        "x#0": "bytes"
      },
      "block": "addToBoxMap",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "432": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "434": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "435": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "{box_del}"
      ]
    },
    "436": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "437": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%0#0",
        "x#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "x#0 (copy)"
      ]
    },
    "439": {
      "op": "box_put",
      "stack_out": []
    },
    "440": {
      "retsub": true,
      "op": "retsub"
    },
    "441": {
      "subroutine": "contracts/kitchen-sink.algo.ts::KitchenSinkContract.insertIntoBoxRef",
      "params": {
        "content#0": "bytes",
        "offset#0": "uint64",
        "boxSize#0": "uint64"
      },
      "block": "insertIntoBoxRef",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "444": {
      "op": "frame_dig -3",
      "defined_out": [
        "content#0 (copy)"
      ],
      "stack_out": [
        "content#0 (copy)"
      ]
    },
    "446": {
      "op": "len",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "447": {
      "op": "frame_dig -2",
      "defined_out": [
        "offset#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "offset#0 (copy)"
      ]
    },
    "449": {
      "op": "+",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "450": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "451": {
      "op": "frame_dig -1",
      "defined_out": [
        "boxSize#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0",
        "boxSize#0 (copy)"
      ]
    },
    "453": {
      "op": "<",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "454": {
      "op": "assert",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "455": {
      "op": "bytec_1 // 0xff",
      "defined_out": [
        "0xff",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0xff"
      ]
    },
    "456": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "457": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "459": {
      "op": "bz insertIntoBoxRef_else_body@2",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "462": {
      "op": "bytec_1 // 0xff",
      "stack_out": [
        "tmp%1#0",
        "0xff"
      ]
    },
    "463": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "0xff",
        "boxSize#0 (copy)"
      ]
    },
    "465": {
      "op": "box_create",
      "defined_out": [
        "tmp%1#0",
        "{box_create}"
      ],
      "stack_out": [
        "tmp%1#0",
        "{box_create}"
      ]
    },
    "466": {
      "op": "pop",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "467": {
      "block": "insertIntoBoxRef_after_if_else@5",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "bytec_1 // 0xff",
      "defined_out": [
        "0xff"
      ],
      "stack_out": [
        "tmp%1#0",
        "0xff"
      ]
    },
    "468": {
      "op": "frame_dig -2",
      "defined_out": [
        "0xff",
        "offset#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "0xff",
        "offset#0 (copy)"
      ]
    },
    "470": {
      "op": "frame_dig 0",
      "defined_out": [
        "0xff",
        "offset#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0xff",
        "offset#0 (copy)",
        "tmp%1#0"
      ]
    },
    "472": {
      "op": "frame_dig -3",
      "defined_out": [
        "0xff",
        "content#0 (copy)",
        "offset#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0xff",
        "offset#0 (copy)",
        "tmp%1#0",
        "content#0 (copy)"
      ]
    },
    "474": {
      "op": "box_splice",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "475": {
      "retsub": true,
      "op": "retsub"
    },
    "476": {
      "block": "insertIntoBoxRef_else_body@2",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "bytec_1 // 0xff",
      "defined_out": [
        "0xff"
      ],
      "stack_out": [
        "tmp%1#0",
        "0xff"
      ]
    },
    "477": {
      "op": "box_len",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "478": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "value%0#0"
      ]
    },
    "479": {
      "op": "frame_dig -1",
      "defined_out": [
        "boxSize#0 (copy)",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "value%0#0",
        "boxSize#0 (copy)"
      ]
    },
    "481": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "482": {
      "op": "bz insertIntoBoxRef_after_if_else@5",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "485": {
      "op": "bytec_1 // 0xff",
      "stack_out": [
        "tmp%1#0",
        "0xff"
      ]
    },
    "486": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "0xff",
        "boxSize#0 (copy)"
      ]
    },
    "488": {
      "op": "box_resize",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "489": {
      "op": "b insertIntoBoxRef_after_if_else@5"
    },
    "492": {
      "subroutine": "contracts/kitchen-sink.algo.ts::KitchenSinkContract.sayHello",
      "params": {
        "name#0": "bytes",
        "a#0": "uint64"
      },
      "block": "sayHello",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "495": {
      "op": "pushbytes \"Hello \"",
      "defined_out": [
        "\"Hello \""
      ],
      "stack_out": [
        "\"Hello \""
      ]
    },
    "503": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"Hello \"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"Hello \"",
        "name#0 (copy)"
      ]
    },
    "505": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "506": {
      "op": "pushbytes \" \"",
      "defined_out": [
        "\" \"",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "\" \""
      ]
    },
    "509": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "510": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "a#0 (copy)"
      ]
    },
    "512": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "513": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "514": {
      "retsub": true,
      "op": "retsub"
    },
    "515": {
      "subroutine": "contracts/kitchen-sink.algo.ts::KitchenSinkContract.checkTransaction",
      "params": {
        "pay#0": "uint64"
      },
      "block": "checkTransaction",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "518": {
      "op": "frame_dig -1",
      "defined_out": [
        "pay#0 (copy)"
      ],
      "stack_out": [
        "pay#0 (copy)"
      ]
    },
    "520": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "522": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "523": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "2000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "2000"
      ]
    },
    "526": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "527": {
      "op": "bz checkTransaction_bool_false@6",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "530": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "532": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0",
        "1000"
      ]
    },
    "535": {
      "op": ">=",
      "defined_out": [
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%3#0"
      ]
    },
    "536": {
      "op": "bz checkTransaction_bool_false@6",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "539": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "pay#0 (copy)"
      ]
    },
    "541": {
      "op": "gtxns LastValid",
      "defined_out": [
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0"
      ]
    },
    "543": {
      "op": "global Round",
      "defined_out": [
        "tmp%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "545": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0"
      ]
    },
    "546": {
      "op": "bz checkTransaction_bool_false@6",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "549": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "pay#0 (copy)"
      ]
    },
    "551": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "553": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "555": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%9#0"
      ]
    },
    "556": {
      "op": "bz checkTransaction_bool_false@6",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "559": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "pay#0 (copy)"
      ]
    },
    "561": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%10#0"
      ]
    },
    "563": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "tmp%0#0",
        "tmp%10#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "565": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%0#0",
        "tmp%0#0",
        "tmp%10#0",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%10#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "567": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "tmp%0#0",
        "tmp%10#0",
        "value%0#0"
      ]
    },
    "568": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%12#0"
      ]
    },
    "569": {
      "op": "bz checkTransaction_bool_false@6",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "572": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "573": {
      "block": "checkTransaction_bool_merge@7",
      "stack_in": [
        "tmp%0#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "574": {
      "retsub": true,
      "op": "retsub"
    },
    "575": {
      "block": "checkTransaction_bool_false@6",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "576": {
      "op": "b checkTransaction_bool_merge@7"
    }
  }
}