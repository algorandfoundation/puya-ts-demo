{
  "version": 3,
  "sources": [
    "/Users/joe/git/other/puya-ts-demo/contracts/zk-whitelist.algo.ts"
  ],
  "mappings": "AAyBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;AAiEE;;AAAA;AAAA;AAAA;;AAAA;AAjEF;;;AAAA;AAAA;;;AAAA;;;AAiEE;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXC;;AAAA;AAAA;AAAA;;AAAA;AAtDH;;;AAsDG;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AAtBH;;;AAAA;;;AAsBG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AANA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAJH;;;AAAA;;;AAIG;;;AAAA;;AAAD;;;AAHA;;;;;;;;;AAME;;AAAA;;AAMc;;AAAuB;;AAA9B;AAAP;;AASF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYa;AAAT;AAAuB;;AAtCzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsC+B;AAA7B;AAMC;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAFD;;AADI;;AAAA;;AAAW;;;;AAKH;AAAV;;;AACK;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAIM;;AAAJ;;AAAA;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAEF;;AAhDF;AAgDkC;AAAhC;AACO;;AAAP;AAGF;;;AAIQ;;AAAwC;;AAA9B;AACZ;;;AACK;AAAP;AAE6B;;AAAA;AA5DjC;AA4DiC;AAAA;AAA/B;AAGF;;;AAMmB;AAMuB;;;;;;;AANvB;;;AAGR;;;AAHQ;AAQL;;AACL;AAAA;;;AAAA;AAAA;;;AAA0C;AAA1C;AAAA;AAAP",
  "op_pc_offset": 2,
  "pc_events": {
    "0": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "2": {
      "op": "bz main_after_if_else@12",
      "stack_out": []
    },
    "5": {
      "op": "pushbytess 0x20df3a54 0xa0e81872 0x9300aae2 0xcb77c07a 0x517637c6 0xf10773f1 // method \"create(string)void\", method \"update()void\", method \"optInOrOut()void\", method \"addAddressToWhitelist(address,address[])string\", method \"isOnWhitelist(address)bool\", method \"verifyProof(uint64,address[],address[])bool\"",
      "defined_out": [
        "Method(addAddressToWhitelist(address,address[])string)",
        "Method(create(string)void)",
        "Method(isOnWhitelist(address)bool)",
        "Method(optInOrOut()void)",
        "Method(update()void)",
        "Method(verifyProof(uint64,address[],address[])bool)"
      ],
      "stack_out": [
        "Method(create(string)void)",
        "Method(update()void)",
        "Method(optInOrOut()void)",
        "Method(addAddressToWhitelist(address,address[])string)",
        "Method(isOnWhitelist(address)bool)",
        "Method(verifyProof(uint64,address[],address[])bool)"
      ]
    },
    "37": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addAddressToWhitelist(address,address[])string)",
        "Method(create(string)void)",
        "Method(isOnWhitelist(address)bool)",
        "Method(optInOrOut()void)",
        "Method(update()void)",
        "Method(verifyProof(uint64,address[],address[])bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create(string)void)",
        "Method(update()void)",
        "Method(optInOrOut()void)",
        "Method(addAddressToWhitelist(address,address[])string)",
        "Method(isOnWhitelist(address)bool)",
        "Method(verifyProof(uint64,address[],address[])bool)",
        "tmp%2#0"
      ]
    },
    "40": {
      "op": "match main_create_route@3 main_update_route@4 main_optInOrOut_route@5 main_addAddressToWhitelist_route@6 main_isOnWhitelist_route@7 main_verifyProof_route@8",
      "stack_out": []
    },
    "54": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "55": {
      "op": "return",
      "stack_out": []
    },
    "56": {
      "block": "main_verifyProof_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "58": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "59": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "60": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "62": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "63": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "66": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "67": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32][]%1#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "reinterpret_bytes[32][]%1#0"
      ]
    },
    "70": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[32][]%1#0",
        "reinterpret_bytes[32][]%2#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "reinterpret_bytes[32][]%1#0",
        "reinterpret_bytes[32][]%2#0"
      ]
    },
    "73": {
      "callsub": "contracts/zk-whitelist.algo.ts::ZkWhitelistContract.verifyProof",
      "op": "callsub verifyProof",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "76": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "0x151f7c75"
      ]
    },
    "77": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%34#0"
      ]
    },
    "78": {
      "op": "concat",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "79": {
      "op": "log",
      "stack_out": []
    },
    "80": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "81": {
      "op": "return",
      "stack_out": []
    },
    "82": {
      "block": "main_isOnWhitelist_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "84": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "85": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "86": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "88": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "89": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "92": {
      "callsub": "contracts/zk-whitelist.algo.ts::ZkWhitelistContract.isOnWhitelist",
      "op": "callsub isOnWhitelist",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "95": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00"
      ]
    },
    "98": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00",
        "0"
      ]
    },
    "99": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%1#0"
      ]
    },
    "101": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "102": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "103": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "104": {
      "op": "concat",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "105": {
      "op": "log",
      "stack_out": []
    },
    "106": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "107": {
      "op": "return",
      "stack_out": []
    },
    "108": {
      "block": "main_addAddressToWhitelist_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "110": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "111": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "112": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "114": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "115": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "118": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32][]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32][]%0#0"
      ]
    },
    "121": {
      "callsub": "contracts/zk-whitelist.algo.ts::ZkWhitelistContract.addAddressToWhitelist",
      "op": "callsub addAddressToWhitelist",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "124": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "125": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "126": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "127": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "130": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "131": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "132": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "133": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "134": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "135": {
      "op": "log",
      "stack_out": []
    },
    "136": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "137": {
      "op": "return",
      "stack_out": []
    },
    "138": {
      "block": "main_optInOrOut_route@5",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "139": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%14#0"
      ],
      "stack_out": [
        "1",
        "tmp%14#0"
      ]
    },
    "141": {
      "op": "shl",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "142": {
      "op": "intc_2 // 6",
      "defined_out": [
        "6",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "6"
      ]
    },
    "143": {
      "op": "&",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "144": {
      "error": "OnCompletion is not one of OptIn, CloseOut",
      "op": "assert // OnCompletion is not one of OptIn, CloseOut",
      "stack_out": []
    },
    "145": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "147": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "148": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "149": {
      "op": "return",
      "stack_out": []
    },
    "150": {
      "block": "main_update_route@4",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "151": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%9#0"
      ],
      "stack_out": [
        "1",
        "tmp%9#0"
      ]
    },
    "153": {
      "op": "shl",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "154": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "48"
      ]
    },
    "156": {
      "op": "&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "157": {
      "error": "OnCompletion is not one of UpdateApplication, DeleteApplication",
      "op": "assert // OnCompletion is not one of UpdateApplication, DeleteApplication",
      "stack_out": []
    },
    "158": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "160": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "161": {
      "callsub": "contracts/zk-whitelist.algo.ts::ZkWhitelistContract.update",
      "op": "callsub update"
    },
    "164": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "165": {
      "op": "return",
      "stack_out": []
    },
    "166": {
      "block": "main_create_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "168": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "169": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "170": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "172": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "173": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "174": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "177": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "180": {
      "callsub": "contracts/zk-whitelist.algo.ts::ZkWhitelistContract.create",
      "op": "callsub create",
      "stack_out": []
    },
    "183": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "184": {
      "op": "return",
      "stack_out": []
    },
    "185": {
      "subroutine": "contracts/zk-whitelist.algo.ts::ZkWhitelistContract.create",
      "params": {
        "name#0": "bytes"
      },
      "block": "create",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "188": {
      "op": "pushbytes \"appName\"",
      "defined_out": [
        "\"appName\""
      ],
      "stack_out": [
        "\"appName\""
      ]
    },
    "197": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"appName\"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"appName\"",
        "name#0 (copy)"
      ]
    },
    "199": {
      "op": "app_global_put",
      "stack_out": []
    },
    "200": {
      "retsub": true,
      "op": "retsub"
    },
    "201": {
      "subroutine": "contracts/zk-whitelist.algo.ts::ZkWhitelistContract.update",
      "params": {},
      "block": "update",
      "stack_in": [],
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "203": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "205": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "206": {
      "op": "assert",
      "stack_out": []
    },
    "207": {
      "retsub": true,
      "op": "retsub"
    },
    "208": {
      "subroutine": "contracts/zk-whitelist.algo.ts::ZkWhitelistContract.addAddressToWhitelist",
      "params": {
        "address#0": "bytes",
        "proof#0": "bytes"
      },
      "block": "addAddressToWhitelist",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "211": {
      "block": "addAddressToWhitelist_while_top@6",
      "stack_in": [],
      "op": "pushint 145010 // 145010",
      "defined_out": [
        "145010"
      ],
      "stack_out": [
        "145010"
      ]
    },
    "215": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "145010",
        "tmp%0#1"
      ],
      "stack_out": [
        "145010",
        "tmp%0#1"
      ]
    },
    "217": {
      "op": ">",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "218": {
      "op": "bz addAddressToWhitelist_after_while@11",
      "stack_out": []
    },
    "221": {
      "op": "itxn_begin"
    },
    "222": {
      "op": "intc_2 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "223": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "225": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "DeleteApplication"
      ]
    },
    "227": {
      "op": "itxn_field OnCompletion",
      "stack_out": []
    },
    "229": {
      "op": "bytec_1 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "0x068101"
      ]
    },
    "230": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": []
    },
    "232": {
      "op": "bytec_1 // 0x068101",
      "stack_out": [
        "0x068101"
      ]
    },
    "233": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": []
    },
    "235": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "236": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "238": {
      "op": "itxn_submit"
    },
    "239": {
      "op": "b addAddressToWhitelist_while_top@6"
    },
    "242": {
      "block": "addAddressToWhitelist_after_while@11",
      "stack_in": [],
      "op": "intc_3 // 32",
      "defined_out": [
        "32"
      ],
      "stack_out": [
        "32"
      ]
    },
    "243": {
      "op": "bzero",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "244": {
      "op": "frame_dig -2",
      "defined_out": [
        "address#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "address#0 (copy)"
      ]
    },
    "246": {
      "op": "pushbytes 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001",
      "defined_out": [
        "0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001",
        "address#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "address#0 (copy)",
        "0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001"
      ]
    },
    "280": {
      "op": "b%",
      "defined_out": [
        "reinterpret_bytes%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_bytes%0#0"
      ]
    },
    "281": {
      "op": "b|",
      "defined_out": [
        "addressMod#0"
      ],
      "stack_out": [
        "addressMod#0"
      ]
    },
    "282": {
      "op": "dup",
      "defined_out": [
        "addressMod#0",
        "addressMod#0 (copy)"
      ],
      "stack_out": [
        "addressMod#0",
        "addressMod#0 (copy)"
      ]
    },
    "283": {
      "op": "len",
      "defined_out": [
        "addressMod#0",
        "byte_len%0#0"
      ],
      "stack_out": [
        "addressMod#0",
        "byte_len%0#0"
      ]
    },
    "284": {
      "op": "intc_3 // 32",
      "stack_out": [
        "addressMod#0",
        "byte_len%0#0",
        "32"
      ]
    },
    "285": {
      "op": "/",
      "defined_out": [
        "addressMod#0",
        "len_%0#0"
      ],
      "stack_out": [
        "addressMod#0",
        "len_%0#0"
      ]
    },
    "286": {
      "op": "itob",
      "defined_out": [
        "addressMod#0",
        "as_bytes%0#0"
      ],
      "stack_out": [
        "addressMod#0",
        "as_bytes%0#0"
      ]
    },
    "287": {
      "op": "extract 6 2",
      "defined_out": [
        "addressMod#0",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "addressMod#0",
        "len_16_bit%0#0"
      ]
    },
    "290": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "addressMod#0"
      ]
    },
    "291": {
      "op": "concat",
      "defined_out": [
        "concat_result%0#0"
      ],
      "stack_out": [
        "concat_result%0#0"
      ]
    },
    "292": {
      "op": "intc 4 // TMPL_VERIFIER_APP_ID",
      "defined_out": [
        "TMPL_VERIFIER_APP_ID",
        "concat_result%0#0"
      ],
      "stack_out": [
        "concat_result%0#0",
        "TMPL_VERIFIER_APP_ID"
      ]
    },
    "294": {
      "op": "frame_dig -1",
      "defined_out": [
        "TMPL_VERIFIER_APP_ID",
        "concat_result%0#0",
        "proof#0 (copy)"
      ],
      "stack_out": [
        "concat_result%0#0",
        "TMPL_VERIFIER_APP_ID",
        "proof#0 (copy)"
      ]
    },
    "296": {
      "op": "uncover 2",
      "stack_out": [
        "TMPL_VERIFIER_APP_ID",
        "proof#0 (copy)",
        "concat_result%0#0"
      ]
    },
    "298": {
      "callsub": "contracts/zk-whitelist.algo.ts::ZkWhitelistContract.verifyProof",
      "op": "callsub verifyProof",
      "defined_out": [
        "verified#0"
      ],
      "stack_out": [
        "verified#0"
      ]
    },
    "301": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "verified#0"
      ],
      "stack_out": [
        "verified#0",
        "0"
      ]
    },
    "302": {
      "op": "getbit",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "303": {
      "op": "bnz addAddressToWhitelist_after_if_else@2",
      "stack_out": []
    },
    "306": {
      "op": "pushbytes \"Proof verification failed\"",
      "defined_out": [
        "\"Proof verification failed\""
      ],
      "stack_out": [
        "\"Proof verification failed\""
      ]
    },
    "333": {
      "retsub": true,
      "op": "retsub"
    },
    "334": {
      "block": "addAddressToWhitelist_after_if_else@2",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "336": {
      "op": "frame_dig -2",
      "defined_out": [
        "address#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "address#0 (copy)"
      ]
    },
    "338": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "339": {
      "op": "bz addAddressToWhitelist_after_if_else@4",
      "stack_out": []
    },
    "342": {
      "op": "pushbytes \"Sender address does not match authorized address\"",
      "defined_out": [
        "\"Sender address does not match authorized address\""
      ],
      "stack_out": [
        "\"Sender address does not match authorized address\""
      ]
    },
    "392": {
      "retsub": true,
      "op": "retsub"
    },
    "393": {
      "block": "addAddressToWhitelist_after_if_else@4",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0 (copy)"
      ]
    },
    "395": {
      "op": "bytec_2 // \"whiteList\"",
      "defined_out": [
        "\"whiteList\"",
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0 (copy)",
        "\"whiteList\""
      ]
    },
    "396": {
      "op": "intc_0 // 1",
      "defined_out": [
        "\"whiteList\"",
        "1",
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0 (copy)",
        "\"whiteList\"",
        "1"
      ]
    },
    "397": {
      "op": "app_local_put",
      "stack_out": []
    },
    "398": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\""
      ],
      "stack_out": [
        "\"\""
      ]
    },
    "400": {
      "retsub": true,
      "op": "retsub"
    },
    "401": {
      "subroutine": "contracts/zk-whitelist.algo.ts::ZkWhitelistContract.isOnWhitelist",
      "params": {
        "address#0": "bytes"
      },
      "block": "isOnWhitelist",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "404": {
      "op": "frame_dig -1",
      "defined_out": [
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0 (copy)"
      ]
    },
    "406": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "address#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "address#0 (copy)",
        "tmp%0#0"
      ]
    },
    "408": {
      "op": "app_opted_in",
      "defined_out": [
        "optedIn#0"
      ],
      "stack_out": [
        "optedIn#0"
      ]
    },
    "409": {
      "op": "bnz isOnWhitelist_after_if_else@2",
      "stack_out": []
    },
    "412": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "413": {
      "retsub": true,
      "op": "retsub"
    },
    "414": {
      "block": "isOnWhitelist_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0 (copy)"
      ]
    },
    "416": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0 (copy)",
        "0"
      ]
    },
    "417": {
      "op": "bytec_2 // \"whiteList\"",
      "defined_out": [
        "\"whiteList\"",
        "0",
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0 (copy)",
        "0",
        "\"whiteList\""
      ]
    },
    "418": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "419": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "420": {
      "retsub": true,
      "op": "retsub"
    },
    "421": {
      "subroutine": "contracts/zk-whitelist.algo.ts::ZkWhitelistContract.verifyProof",
      "params": {
        "appId#0": "uint64",
        "proof#0": "bytes",
        "publicInputs#0": "bytes"
      },
      "block": "verifyProof",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "424": {
      "op": "itxn_begin"
    },
    "425": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "426": {
      "op": "itxn_field OnCompletion",
      "stack_out": []
    },
    "428": {
      "op": "frame_dig -3",
      "defined_out": [
        "appId#0 (copy)"
      ],
      "stack_out": [
        "appId#0 (copy)"
      ]
    },
    "430": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "432": {
      "op": "intc_2 // 6",
      "defined_out": [
        "6"
      ],
      "stack_out": [
        "6"
      ]
    },
    "433": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "435": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "436": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "438": {
      "op": "itxn_submit"
    },
    "439": {
      "op": "itxn LastLog",
      "defined_out": [
        "verified#0"
      ],
      "stack_out": [
        "verified#0"
      ]
    },
    "441": {
      "op": "dup",
      "defined_out": [
        "verified#0",
        "verified#0 (copy)"
      ],
      "stack_out": [
        "verified#0",
        "verified#0 (copy)"
      ]
    },
    "442": {
      "op": "extract 4 0",
      "defined_out": [
        "tmp%0#0",
        "verified#0"
      ],
      "stack_out": [
        "verified#0",
        "tmp%0#0"
      ]
    },
    "445": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "verified#0"
      ]
    },
    "446": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "449": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "450": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "451": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "452": {
      "retsub": true,
      "op": "retsub"
    }
  }
}