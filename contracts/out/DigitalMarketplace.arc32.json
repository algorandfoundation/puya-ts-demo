{
    "hints": {
        "listingsBoxMbr()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "quantityPrice(uint64,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getListingsMbr()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "allowAsset(pay,asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "firstDeposit(pay,axfer,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deposit(axfer,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setPrice(asset,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "buy(address,asset,uint64,pay,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(asset,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "bid(address,asset,uint64,pay,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "acceptBid(asset,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "DigitalMarketplace",
        "methods": [
            {
                "name": "listingsBoxMbr",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "quantityPrice",
                "args": [
                    {
                        "type": "uint64",
                        "name": "quantity"
                    },
                    {
                        "type": "uint64",
                        "name": "price"
                    },
                    {
                        "type": "uint64",
                        "name": "assetDecimals"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getListingsMbr",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "allowAsset",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbrPay"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "firstDeposit",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbrPay"
                    },
                    {
                        "type": "axfer",
                        "name": "xfer"
                    },
                    {
                        "type": "uint64",
                        "name": "unitaryPrice"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "deposit",
                "args": [
                    {
                        "type": "axfer",
                        "name": "xfer"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "setPrice",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    },
                    {
                        "type": "uint64",
                        "name": "unitaryPrice"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "buy",
                "args": [
                    {
                        "type": "address",
                        "name": "owner"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    },
                    {
                        "type": "pay",
                        "name": "buyPay"
                    },
                    {
                        "type": "uint64",
                        "name": "quantity"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "bid",
                "args": [
                    {
                        "type": "address",
                        "name": "owner"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    },
                    {
                        "type": "pay",
                        "name": "bidPay"
                    },
                    {
                        "type": "uint64",
                        "name": "quantity"
                    },
                    {
                        "type": "uint64",
                        "name": "unitaryPrice"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "acceptBid",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "uint64",
                        "name": "nonce"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}