{
  "version": 3,
  "sources": [
    "/home/parallels/dev/puya-ts-demo/contracts/big-box/big-box.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDE;AAAmD;AAAnD;AATF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AA0FE;;AAAA;AAAA;AAAA;;AAAA;AA1FF;;;AAAA;;;AAAA;;;AA0FE;;;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;AAnEF;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAmEE;;;AAAA;;AA5CA;;AAAA;AAAA;AAAA;;AAAA;AAvBF;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuBE;;;AAAA;;AAZC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAYD;;;AAdA;AAAA;AAAA;AAAA;AAqByB;AAAA;;AAAA;AAAsB;AAAtB;AAGd;AAAA;AACF;;AAAA;AAEI;;AAAA;AAJM;;AAAA;AA1CD;AA0CC;AAAA;AAAA;AAQ0B;;AAAA;AAAA;;AAApC;AAAP;AAEA;;AAAA;AAAA;AAEmC;AAAT;AAnC5B;AAmCE;AAAA;AAGE;;AApDuB;;;AAoDvB;AACC;;AAAW;AAAX;AAlDsB;;;AAkDvB;AAtDwB;AAsDxB;AADA;AAEA;;AAAW;;AAAX;AAvDwB;AAuDxB;AAFA;AAGA;;AAxDwB;AAwDxB;AAHA;AAKF;;AAAA;;AACmB;;AADnB;AAAA;;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;;;;;;AAeF;;;AAEsD;;AAAA;AAAA;AAAA;AAAA;;AAAA;AACpC;AAAA;;;AAhFA;AAgFT;AAAP;AAEW;AAAM;AAAf;;AAAA;AAAA;;;AAA8D;;AAAJ;;AAAI;AAAzB;;AAAA;AAArC;;;;AADF;AAIK;;AAAA;AAAA;AAAyB;AAAA;;AAA1B;;;AACF;AAAA;;AAAA;;AAAA;;AAG2B;AAAA;AAAA;AAAzB;;AAAA;AADF;;AAAA;;AAAA;;;;;;AAYJ;;;AAE2D;;AAAA;AAAA;AAAM;;;AAExD;;AAvGG;;;AAuGH;AAAA;;;AAAoB;;AAtGb;AAsGa;AAApB;;;AAA4C;;AAxGnC;AAwGmC;AAA5C;;;;AAAP;AACO;;AAvGO;AAuGP;AAAP;AAEmC;;AAAA;AAAA;AAAnC;;AAAA;;AAAA;;AAAA;AAAA;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 400"
    },
    "7": {
      "op": "bytecblock \"currentIndex\" 0x00 0x02"
    },
    "26": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "28": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "31": {
      "op": "bytec_0 // \"currentIndex\"",
      "defined_out": [
        "\"currentIndex\""
      ],
      "stack_out": [
        "\"currentIndex\""
      ]
    },
    "32": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"currentIndex\"",
        "0"
      ],
      "stack_out": [
        "\"currentIndex\"",
        "0"
      ]
    },
    "33": {
      "op": "app_global_put",
      "stack_out": []
    },
    "34": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "36": {
      "op": "bz main_after_if_else@12",
      "stack_out": []
    },
    "39": {
      "op": "pushbytess 0xb8447b36 0xa05b5669 0xd66ea64e 0xbf3856f8 // method \"createApplication()void\", method \"startUpload(string,uint64,uint64,pay)void\", method \"upload(string,uint64,byte[])void\", method \"setStatus(string,uint8)void\"",
      "defined_out": [
        "Method(createApplication()void)",
        "Method(setStatus(string,uint8)void)",
        "Method(startUpload(string,uint64,uint64,pay)void)",
        "Method(upload(string,uint64,byte[])void)"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "Method(startUpload(string,uint64,uint64,pay)void)",
        "Method(upload(string,uint64,byte[])void)",
        "Method(setStatus(string,uint8)void)"
      ]
    },
    "61": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createApplication()void)",
        "Method(setStatus(string,uint8)void)",
        "Method(startUpload(string,uint64,uint64,pay)void)",
        "Method(upload(string,uint64,byte[])void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "Method(startUpload(string,uint64,uint64,pay)void)",
        "Method(upload(string,uint64,byte[])void)",
        "Method(setStatus(string,uint8)void)",
        "tmp%2#0"
      ]
    },
    "64": {
      "op": "match main_createApplication_route@5 main_startUpload_route@6 main_upload_route@7 main_setStatus_route@8",
      "stack_out": []
    },
    "74": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "75": {
      "op": "return",
      "stack_out": []
    },
    "76": {
      "block": "main_setStatus_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "78": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "79": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "80": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "82": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "83": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "86": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "89": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "92": {
      "callsub": "contracts/big-box/big-box.algo.ts::BigBox.setStatus",
      "op": "callsub setStatus",
      "stack_out": []
    },
    "95": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "96": {
      "op": "return",
      "stack_out": []
    },
    "97": {
      "block": "main_upload_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "99": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "100": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "101": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "103": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "104": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "107": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "110": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "113": {
      "op": "btoi",
      "defined_out": [
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "114": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "117": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%24#0"
      ]
    },
    "120": {
      "callsub": "contracts/big-box/big-box.algo.ts::BigBox.upload",
      "op": "callsub upload",
      "stack_out": []
    },
    "123": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "124": {
      "op": "return",
      "stack_out": []
    },
    "125": {
      "block": "main_startUpload_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "127": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "128": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "129": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "131": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "132": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "135": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "138": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "141": {
      "op": "btoi",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "142": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "145": {
      "op": "btoi",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "146": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "148": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "1"
      ]
    },
    "149": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "gtxn_idx%0#0"
      ]
    },
    "150": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "151": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "153": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "154": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "155": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "gtxn_idx%0#0"
      ]
    },
    "156": {
      "callsub": "contracts/big-box/big-box.algo.ts::BigBox.startUpload",
      "op": "callsub startUpload",
      "stack_out": []
    },
    "159": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "160": {
      "op": "return",
      "stack_out": []
    },
    "161": {
      "block": "main_createApplication_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "163": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "164": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "165": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "167": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "168": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "169": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "170": {
      "op": "return",
      "stack_out": []
    },
    "171": {
      "subroutine": "contracts/big-box/big-box.algo.ts::BigBox.startUpload",
      "params": {
        "dataIdentifier#0": "bytes",
        "numBoxes#0": "uint64",
        "endBoxSize#0": "uint64",
        "mbrPayment#0": "uint64"
      },
      "block": "startUpload",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "174": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "175": {
      "op": "bytec_0 // \"currentIndex\"",
      "defined_out": [
        "\"currentIndex\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"currentIndex\""
      ]
    },
    "176": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "startBox#0"
      ],
      "stack_out": [
        "startBox#0",
        "maybe_exists%0#0"
      ]
    },
    "177": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "startBox#0"
      ]
    },
    "178": {
      "op": "dup",
      "defined_out": [
        "startBox#0",
        "startBox#0 (copy)"
      ],
      "stack_out": [
        "startBox#0",
        "startBox#0 (copy)"
      ]
    },
    "179": {
      "op": "frame_dig -3",
      "defined_out": [
        "numBoxes#0 (copy)",
        "startBox#0",
        "startBox#0 (copy)"
      ],
      "stack_out": [
        "startBox#0",
        "startBox#0 (copy)",
        "numBoxes#0 (copy)"
      ]
    },
    "181": {
      "op": "+",
      "defined_out": [
        "startBox#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "startBox#0",
        "tmp%0#0"
      ]
    },
    "182": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "startBox#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "startBox#0",
        "tmp%0#0",
        "1"
      ]
    },
    "183": {
      "op": "-",
      "defined_out": [
        "endBox#0",
        "startBox#0"
      ],
      "stack_out": [
        "startBox#0",
        "endBox#0"
      ]
    },
    "184": {
      "op": "swap",
      "stack_out": [
        "endBox#0",
        "startBox#0"
      ]
    },
    "185": {
      "op": "itob",
      "defined_out": [
        "endBox#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "endBox#0",
        "val_as_bytes%0#0"
      ]
    },
    "186": {
      "op": "dig 1",
      "defined_out": [
        "endBox#0",
        "endBox#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "endBox#0",
        "val_as_bytes%0#0",
        "endBox#0 (copy)"
      ]
    },
    "188": {
      "op": "itob",
      "defined_out": [
        "endBox#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "endBox#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "189": {
      "op": "frame_dig -2",
      "defined_out": [
        "endBox#0",
        "endBoxSize#0 (copy)",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "endBox#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "endBoxSize#0 (copy)"
      ]
    },
    "191": {
      "op": "itob",
      "defined_out": [
        "endBox#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "endBox#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "192": {
      "op": "cover 2",
      "stack_out": [
        "endBox#0",
        "val_as_bytes%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "194": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "endBox#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "endBox#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "195": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "encoded_tuple_buffer%2#0",
        "endBox#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "endBox#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "0x00"
      ]
    },
    "196": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "endBox#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "endBox#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "197": {
      "op": "swap",
      "stack_out": [
        "endBox#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "198": {
      "op": "concat",
      "defined_out": [
        "endBox#0",
        "metadata#0"
      ],
      "stack_out": [
        "endBox#0",
        "metadata#0"
      ]
    },
    "199": {
      "op": "frame_dig -4",
      "defined_out": [
        "dataIdentifier#0 (copy)",
        "endBox#0",
        "metadata#0"
      ],
      "stack_out": [
        "endBox#0",
        "metadata#0",
        "dataIdentifier#0 (copy)"
      ]
    },
    "201": {
      "op": "box_len",
      "defined_out": [
        "endBox#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "metadata#0"
      ],
      "stack_out": [
        "endBox#0",
        "metadata#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "202": {
      "op": "bury 1",
      "stack_out": [
        "endBox#0",
        "metadata#0",
        "maybe_exists%1#0"
      ]
    },
    "204": {
      "op": "!",
      "defined_out": [
        "endBox#0",
        "metadata#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "endBox#0",
        "metadata#0",
        "tmp%2#0"
      ]
    },
    "205": {
      "op": "assert",
      "stack_out": [
        "endBox#0",
        "metadata#0"
      ]
    },
    "206": {
      "op": "frame_dig -4",
      "stack_out": [
        "endBox#0",
        "metadata#0",
        "dataIdentifier#0 (copy)"
      ]
    },
    "208": {
      "op": "swap",
      "stack_out": [
        "endBox#0",
        "dataIdentifier#0 (copy)",
        "metadata#0"
      ]
    },
    "209": {
      "op": "box_put",
      "stack_out": [
        "endBox#0"
      ]
    },
    "210": {
      "op": "intc_0 // 1",
      "stack_out": [
        "endBox#0",
        "1"
      ]
    },
    "211": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "212": {
      "op": "bytec_0 // \"currentIndex\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"currentIndex\""
      ]
    },
    "213": {
      "op": "swap",
      "stack_out": [
        "\"currentIndex\"",
        "new_state_value%0#0"
      ]
    },
    "214": {
      "op": "app_global_put",
      "stack_out": []
    },
    "215": {
      "op": "frame_dig -3",
      "stack_out": [
        "numBoxes#0 (copy)"
      ]
    },
    "217": {
      "op": "pushint 2500 // 2500",
      "defined_out": [
        "2500",
        "numBoxes#0 (copy)"
      ],
      "stack_out": [
        "numBoxes#0 (copy)",
        "2500"
      ]
    },
    "220": {
      "op": "*",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "221": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%4#0",
        "numBoxes#0 (copy)"
      ]
    },
    "223": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%4#0",
        "numBoxes#0 (copy)",
        "1"
      ]
    },
    "224": {
      "op": "-",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "225": {
      "op": "pushint 4096 // 4096",
      "defined_out": [
        "4096",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0",
        "4096"
      ]
    },
    "228": {
      "op": "*",
      "defined_out": [
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "229": {
      "op": "intc_2 // 400",
      "defined_out": [
        "400",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%6#0",
        "400"
      ]
    },
    "230": {
      "op": "*",
      "defined_out": [
        "tmp%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%7#0"
      ]
    },
    "231": {
      "op": "+",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "232": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%8#0",
        "numBoxes#0 (copy)"
      ]
    },
    "234": {
      "op": "pushint 64 // 64",
      "defined_out": [
        "64",
        "numBoxes#0 (copy)",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "numBoxes#0 (copy)",
        "64"
      ]
    },
    "236": {
      "op": "*",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "237": {
      "op": "intc_2 // 400",
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "400"
      ]
    },
    "238": {
      "op": "*",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "239": {
      "op": "+",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "240": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%11#0",
        "endBoxSize#0 (copy)"
      ]
    },
    "242": {
      "op": "intc_2 // 400",
      "stack_out": [
        "tmp%11#0",
        "endBoxSize#0 (copy)",
        "400"
      ]
    },
    "243": {
      "op": "*",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "244": {
      "op": "+",
      "defined_out": [
        "totalCost#0"
      ],
      "stack_out": [
        "totalCost#0"
      ]
    },
    "245": {
      "op": "frame_dig -1",
      "defined_out": [
        "mbrPayment#0 (copy)",
        "totalCost#0"
      ],
      "stack_out": [
        "totalCost#0",
        "mbrPayment#0 (copy)"
      ]
    },
    "247": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%13#0",
        "totalCost#0"
      ],
      "stack_out": [
        "totalCost#0",
        "tmp%13#0"
      ]
    },
    "249": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0",
        "totalCost#0"
      ],
      "stack_out": [
        "totalCost#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "251": {
      "op": "==",
      "defined_out": [
        "tmp%15#0",
        "totalCost#0"
      ],
      "stack_out": [
        "totalCost#0",
        "tmp%15#0"
      ]
    },
    "252": {
      "op": "bz startUpload_bool_false@3",
      "stack_out": [
        "totalCost#0"
      ]
    },
    "255": {
      "op": "frame_dig -1",
      "stack_out": [
        "totalCost#0",
        "mbrPayment#0 (copy)"
      ]
    },
    "257": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%16#0",
        "totalCost#0"
      ],
      "stack_out": [
        "totalCost#0",
        "tmp%16#0"
      ]
    },
    "259": {
      "op": "frame_dig 0",
      "stack_out": [
        "totalCost#0",
        "tmp%16#0",
        "totalCost#0"
      ]
    },
    "261": {
      "op": "==",
      "defined_out": [
        "tmp%17#0",
        "totalCost#0"
      ],
      "stack_out": [
        "totalCost#0",
        "tmp%17#0"
      ]
    },
    "262": {
      "op": "bz startUpload_bool_false@3",
      "stack_out": [
        "totalCost#0"
      ]
    },
    "265": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0",
        "totalCost#0"
      ],
      "stack_out": [
        "totalCost#0",
        "and_result%0#0"
      ]
    },
    "266": {
      "block": "startUpload_bool_merge@4",
      "stack_in": [
        "totalCost#0",
        "and_result%0#0"
      ],
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "defined_out": [],
      "stack_out": [
        "totalCost#0"
      ]
    },
    "267": {
      "retsub": true,
      "op": "retsub"
    },
    "268": {
      "block": "startUpload_bool_false@3",
      "stack_in": [
        "totalCost#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "totalCost#0",
        "and_result%0#0"
      ]
    },
    "269": {
      "op": "b startUpload_bool_merge@4"
    },
    "272": {
      "subroutine": "contracts/big-box/big-box.algo.ts::BigBox.upload",
      "params": {
        "dataIdentifier#0": "bytes",
        "boxIndex#0": "uint64",
        "data#0": "bytes"
      },
      "block": "upload",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "275": {
      "op": "frame_dig -3",
      "defined_out": [
        "dataIdentifier#0 (copy)"
      ],
      "stack_out": [
        "dataIdentifier#0 (copy)"
      ]
    },
    "277": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "metadata#0"
      ],
      "stack_out": [
        "metadata#0",
        "maybe_exists%0#0"
      ]
    },
    "278": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "metadata#0"
      ]
    },
    "279": {
      "op": "dup",
      "stack_out": [
        "maybe_exists%0#0",
        "metadata#0",
        "metadata#0 (copy)"
      ]
    },
    "280": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "metadata#0"
      ],
      "stack_out": [
        "metadata#0",
        "metadata#0",
        "maybe_exists%0#0"
      ]
    },
    "282": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "metadata#0",
        "metadata#0"
      ]
    },
    "283": {
      "op": "dup",
      "defined_out": [
        "metadata#0",
        "metadata#0 (copy)"
      ],
      "stack_out": [
        "metadata#0",
        "metadata#0",
        "metadata#0 (copy)"
      ]
    },
    "284": {
      "error": "Index access is out of bounds",
      "op": "extract 16 1 // on error: Index access is out of bounds",
      "defined_out": [
        "metadata#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "metadata#0",
        "metadata#0",
        "tmp%1#0"
      ]
    },
    "287": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "metadata#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "metadata#0",
        "metadata#0",
        "tmp%1#0",
        "0x00"
      ]
    },
    "288": {
      "op": "==",
      "defined_out": [
        "metadata#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "metadata#0",
        "metadata#0",
        "tmp%2#0"
      ]
    },
    "289": {
      "op": "assert",
      "stack_out": [
        "metadata#0",
        "metadata#0"
      ]
    },
    "290": {
      "op": "intc_1 // 0",
      "stack_out": [
        "metadata#0",
        "metadata#0",
        "0"
      ]
    },
    "291": {
      "op": "extract_uint64",
      "defined_out": [
        "metadata#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "metadata#0",
        "tmp%4#0"
      ]
    },
    "292": {
      "op": "frame_dig -2",
      "defined_out": [
        "boxIndex#0 (copy)",
        "metadata#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "metadata#0",
        "tmp%4#0",
        "boxIndex#0 (copy)"
      ]
    },
    "294": {
      "op": "<=",
      "defined_out": [
        "metadata#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "metadata#0",
        "tmp%5#0"
      ]
    },
    "295": {
      "op": "bz upload_bool_false@3",
      "stack_out": [
        "metadata#0"
      ]
    },
    "298": {
      "op": "frame_dig 0",
      "stack_out": [
        "metadata#0",
        "metadata#0"
      ]
    },
    "300": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "metadata#0"
      ],
      "stack_out": [
        "metadata#0",
        "metadata#0",
        "8"
      ]
    },
    "302": {
      "op": "extract_uint64",
      "defined_out": [
        "metadata#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "metadata#0",
        "tmp%7#0"
      ]
    },
    "303": {
      "op": "frame_dig -2",
      "stack_out": [
        "metadata#0",
        "tmp%7#0",
        "boxIndex#0 (copy)"
      ]
    },
    "305": {
      "op": ">=",
      "defined_out": [
        "metadata#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "metadata#0",
        "tmp%8#0"
      ]
    },
    "306": {
      "op": "bz upload_bool_false@3",
      "stack_out": [
        "metadata#0"
      ]
    },
    "309": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0",
        "metadata#0"
      ],
      "stack_out": [
        "metadata#0",
        "and_result%0#0"
      ]
    },
    "310": {
      "block": "upload_bool_merge@4",
      "stack_in": [
        "metadata#0",
        "and_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "metadata#0"
      ]
    },
    "311": {
      "op": "frame_dig -2",
      "defined_out": [
        "boxIndex#0 (copy)"
      ],
      "stack_out": [
        "metadata#0",
        "boxIndex#0 (copy)"
      ]
    },
    "313": {
      "op": "itob",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "metadata#0",
        "tmp%9#0"
      ]
    },
    "314": {
      "op": "dup",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "metadata#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "315": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "metadata#0",
        "tmp%9#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "316": {
      "op": "bury 1",
      "stack_out": [
        "metadata#0",
        "tmp%9#0",
        "maybe_exists%1#0"
      ]
    },
    "318": {
      "op": "bnz upload_else_body@6",
      "stack_out": [
        "metadata#0",
        "tmp%9#0"
      ]
    },
    "321": {
      "op": "dup",
      "defined_out": [
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "metadata#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "322": {
      "op": "box_del",
      "defined_out": [
        "tmp%9#0",
        "{box_del}"
      ],
      "stack_out": [
        "metadata#0",
        "tmp%9#0",
        "{box_del}"
      ]
    },
    "323": {
      "op": "pop",
      "stack_out": [
        "metadata#0",
        "tmp%9#0"
      ]
    },
    "324": {
      "op": "frame_dig -1",
      "defined_out": [
        "data#0 (copy)",
        "tmp%9#0"
      ],
      "stack_out": [
        "metadata#0",
        "tmp%9#0",
        "data#0 (copy)"
      ]
    },
    "326": {
      "op": "box_put",
      "stack_out": [
        "metadata#0"
      ]
    },
    "327": {
      "retsub": true,
      "op": "retsub"
    },
    "328": {
      "block": "upload_else_body@6",
      "stack_in": [
        "metadata#0",
        "tmp%9#0"
      ],
      "op": "dup",
      "defined_out": [
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "metadata#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "329": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "metadata#0",
        "tmp%9#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "330": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "metadata#0",
        "tmp%9#0",
        "maybe_value%2#0"
      ]
    },
    "331": {
      "op": "frame_dig -1",
      "defined_out": [
        "data#0 (copy)",
        "maybe_value%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "metadata#0",
        "tmp%9#0",
        "maybe_value%2#0",
        "data#0 (copy)"
      ]
    },
    "333": {
      "op": "concat",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "metadata#0",
        "tmp%9#0",
        "new_box_value%0#0"
      ]
    },
    "334": {
      "op": "dig 1",
      "stack_out": [
        "metadata#0",
        "tmp%9#0",
        "new_box_value%0#0",
        "tmp%9#0 (copy)"
      ]
    },
    "336": {
      "op": "box_del",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%9#0",
        "{box_del}"
      ],
      "stack_out": [
        "metadata#0",
        "tmp%9#0",
        "new_box_value%0#0",
        "{box_del}"
      ]
    },
    "337": {
      "op": "pop",
      "stack_out": [
        "metadata#0",
        "tmp%9#0",
        "new_box_value%0#0"
      ]
    },
    "338": {
      "op": "box_put",
      "stack_out": [
        "metadata#0"
      ]
    },
    "339": {
      "retsub": true,
      "op": "retsub"
    },
    "340": {
      "block": "upload_bool_false@3",
      "stack_in": [
        "metadata#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "metadata#0",
        "and_result%0#0"
      ]
    },
    "341": {
      "op": "b upload_bool_merge@4"
    },
    "344": {
      "subroutine": "contracts/big-box/big-box.algo.ts::BigBox.setStatus",
      "params": {
        "dataIdentifier#0": "bytes",
        "status#0": "bytes"
      },
      "block": "setStatus",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "347": {
      "op": "frame_dig -2",
      "defined_out": [
        "dataIdentifier#0 (copy)"
      ],
      "stack_out": [
        "dataIdentifier#0 (copy)"
      ]
    },
    "349": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "350": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "351": {
      "error": "Index access is out of bounds",
      "op": "extract 16 1 // on error: Index access is out of bounds",
      "defined_out": [
        "currentStatus#0"
      ],
      "stack_out": [
        "currentStatus#0"
      ]
    },
    "354": {
      "op": "frame_dig -1",
      "defined_out": [
        "currentStatus#0",
        "status#0 (copy)"
      ],
      "stack_out": [
        "currentStatus#0",
        "status#0 (copy)"
      ]
    },
    "356": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01",
        "currentStatus#0",
        "status#0 (copy)"
      ],
      "stack_out": [
        "currentStatus#0",
        "status#0 (copy)",
        "0x01"
      ]
    },
    "359": {
      "op": "==",
      "defined_out": [
        "currentStatus#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "currentStatus#0",
        "tmp%1#0"
      ]
    },
    "360": {
      "op": "bnz setStatus_bool_true@3",
      "stack_out": [
        "currentStatus#0"
      ]
    },
    "363": {
      "op": "frame_dig -1",
      "stack_out": [
        "currentStatus#0",
        "status#0 (copy)"
      ]
    },
    "365": {
      "op": "bytec_2 // 0x02",
      "defined_out": [
        "0x02",
        "currentStatus#0",
        "status#0 (copy)"
      ],
      "stack_out": [
        "currentStatus#0",
        "status#0 (copy)",
        "0x02"
      ]
    },
    "366": {
      "op": "==",
      "defined_out": [
        "currentStatus#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "currentStatus#0",
        "tmp%2#0"
      ]
    },
    "367": {
      "op": "bnz setStatus_bool_true@3",
      "stack_out": [
        "currentStatus#0"
      ]
    },
    "370": {
      "op": "frame_dig -1",
      "stack_out": [
        "currentStatus#0",
        "status#0 (copy)"
      ]
    },
    "372": {
      "op": "bytec_1 // 0x00",
      "defined_out": [
        "0x00",
        "currentStatus#0",
        "status#0 (copy)"
      ],
      "stack_out": [
        "currentStatus#0",
        "status#0 (copy)",
        "0x00"
      ]
    },
    "373": {
      "op": "==",
      "defined_out": [
        "currentStatus#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "currentStatus#0",
        "tmp%3#0"
      ]
    },
    "374": {
      "op": "bz setStatus_bool_false@4",
      "stack_out": [
        "currentStatus#0"
      ]
    },
    "377": {
      "block": "setStatus_bool_true@3",
      "stack_in": [
        "currentStatus#0"
      ],
      "op": "intc_0 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "currentStatus#0",
        "or_result%0#0"
      ]
    },
    "378": {
      "block": "setStatus_bool_merge@5",
      "stack_in": [
        "currentStatus#0",
        "or_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "currentStatus#0"
      ]
    },
    "379": {
      "op": "frame_dig 0",
      "defined_out": [
        "currentStatus#0"
      ],
      "stack_out": [
        "currentStatus#0",
        "currentStatus#0"
      ]
    },
    "381": {
      "op": "bytec_2 // 0x02",
      "defined_out": [
        "0x02",
        "currentStatus#0"
      ],
      "stack_out": [
        "currentStatus#0",
        "currentStatus#0",
        "0x02"
      ]
    },
    "382": {
      "op": "!=",
      "defined_out": [
        "currentStatus#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "currentStatus#0",
        "tmp%4#0"
      ]
    },
    "383": {
      "op": "assert",
      "stack_out": [
        "currentStatus#0"
      ]
    },
    "384": {
      "op": "frame_dig -2",
      "defined_out": [
        "currentStatus#0",
        "dataIdentifier#0 (copy)"
      ],
      "stack_out": [
        "currentStatus#0",
        "dataIdentifier#0 (copy)"
      ]
    },
    "386": {
      "op": "box_get",
      "defined_out": [
        "currentStatus#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "currentStatus#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "387": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "currentStatus#0",
        "maybe_value%1#0"
      ]
    },
    "388": {
      "op": "frame_dig -1",
      "defined_out": [
        "currentStatus#0",
        "maybe_value%1#0",
        "status#0 (copy)"
      ],
      "stack_out": [
        "currentStatus#0",
        "maybe_value%1#0",
        "status#0 (copy)"
      ]
    },
    "390": {
      "op": "replace2 16",
      "defined_out": [
        "currentStatus#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "currentStatus#0",
        "updated_data%0#0"
      ]
    },
    "392": {
      "op": "frame_dig -2",
      "stack_out": [
        "currentStatus#0",
        "updated_data%0#0",
        "dataIdentifier#0 (copy)"
      ]
    },
    "394": {
      "op": "swap",
      "stack_out": [
        "currentStatus#0",
        "dataIdentifier#0 (copy)",
        "updated_data%0#0"
      ]
    },
    "395": {
      "op": "box_put",
      "stack_out": [
        "currentStatus#0"
      ]
    },
    "396": {
      "retsub": true,
      "op": "retsub"
    },
    "397": {
      "block": "setStatus_bool_false@4",
      "stack_in": [
        "currentStatus#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "currentStatus#0",
        "or_result%0#0"
      ]
    },
    "398": {
      "op": "b setStatus_bool_merge@5"
    }
  }
}