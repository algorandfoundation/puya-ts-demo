{
    "name": "BigBox",
    "structs": {
        "Metadata": [
            {
                "name": "start",
                "type": "uint64"
            },
            {
                "name": "end",
                "type": "uint64"
            },
            {
                "name": "status",
                "type": "uint8"
            },
            {
                "name": "endSize",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "createApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "startUpload",
            "args": [
                {
                    "type": "string",
                    "name": "dataIdentifier",
                    "desc": "The unique identifier for the data"
                },
                {
                    "type": "uint64",
                    "name": "numBoxes",
                    "desc": "The number of boxes that the data will take up"
                },
                {
                    "type": "uint64",
                    "name": "endBoxSize",
                    "desc": "The size of the last box"
                },
                {
                    "type": "pay",
                    "name": "mbrPayment",
                    "desc": "Payment from the uploader to cover the box MBR"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "\nAllocate boxes to begin data upload process",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "upload",
            "args": [
                {
                    "type": "string",
                    "name": "dataIdentifier",
                    "desc": "The unique identifier for the data"
                },
                {
                    "type": "uint64",
                    "name": "boxIndex",
                    "desc": "The index of the box to upload the given chunk of data to"
                },
                {
                    "type": "uint64",
                    "name": "offset",
                    "desc": "The offset within the box to start writing the data"
                },
                {
                    "type": "byte[]",
                    "name": "data",
                    "desc": "The data to write"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "\nUpload data to a specific offset in a box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setStatus",
            "args": [
                {
                    "type": "string",
                    "name": "dataIdentifier",
                    "desc": "The unique identifier for the data"
                },
                {
                    "type": "uint8",
                    "name": "status",
                    "desc": "The new status for the data"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "\nSet the status of the data",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "currentIndex": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y3VycmVudEluZGV4"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "dataBoxes": {
                    "keyType": "uint64",
                    "valueType": "AVMBytes",
                    "prefix": ""
                },
                "metadata": {
                    "keyType": "AVMBytes",
                    "valueType": "Metadata",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        232,
                        320
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        36
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        196
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        114
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        110
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiADAQAIJgMMY3VycmVudEluZGV4AQABAjEYQAADKCNnMRkURDEYQQAdggMEoFtWaQQbffo1BL84Vvg2GgCOAwARAH8A7ACABLhEezY2GgCOAQABACJDNhoBVwIANhoCFzYaAxcxFiIJSTgQIhJEIyhlRElLBAgiCUwWSwEWUClQSwMWUEsFvUUBFERPBUy/IggoTGdLAoHEEwtLAyIJgYCAoAYLCE8DgYDIAQsITwKBkAMLCEsBOAcyChJPAjgITwISEEMjNhoBVwIANhoCF0lPAjYaAxdOAjYaBFcCAE4CvkxJTgJOA0RJVxABKRJEI1sPQQA4SSRbSwQPQQAvIkRLAkAAF0sDSRZFBksBJFsSQQATSYERW0sFTLlISwMWSwNLA7siQ4GAgAJC/+ojQv/ONhoBVwIASTYaAklPAr5EVxABTIABARJAAA5LASoSQAAHSwEpEkEADyJESSoTREsCgRBLA7siQyNC/+4=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}