#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 400
    bytecblock "currentIndex" 0x00 0x02
    txn ApplicationID
    bnz main_after_if_else@2
    // contracts/big-box/big-box.algo.ts:54
    // currentIndex = GlobalState<uint64>({ initialValue: 0 });
    bytec_0 // "currentIndex"
    intc_1 // 0
    app_global_put

main_after_if_else@2:
    // contracts/big-box/big-box.algo.ts:45
    // export class BigBox extends Contract {
    txn NumAppArgs
    bz main_after_if_else@12
    pushbytess 0xb8447b36 0xa05b5669 0xd66ea64e 0xbf3856f8 // method "createApplication()void", method "startUpload(string,uint64,uint64,pay)void", method "upload(string,uint64,byte[])void", method "setStatus(string,uint8)void"
    txna ApplicationArgs 0
    match main_createApplication_route@5 main_startUpload_route@6 main_upload_route@7 main_setStatus_route@8

main_after_if_else@12:
    // contracts/big-box/big-box.algo.ts:45
    // export class BigBox extends Contract {
    intc_1 // 0
    return

main_setStatus_route@8:
    // contracts/big-box/big-box.algo.ts:135
    // setStatus(dataIdentifier: string, status: UintN<8>): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/big-box/big-box.algo.ts:45
    // export class BigBox extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    // contracts/big-box/big-box.algo.ts:135
    // setStatus(dataIdentifier: string, status: UintN<8>): void {
    callsub setStatus
    intc_0 // 1
    return

main_upload_route@7:
    // contracts/big-box/big-box.algo.ts:112
    // upload(dataIdentifier: string, boxIndex: uint64, data: bytes): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/big-box/big-box.algo.ts:45
    // export class BigBox extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    extract 2 0
    // contracts/big-box/big-box.algo.ts:112
    // upload(dataIdentifier: string, boxIndex: uint64, data: bytes): void {
    callsub upload
    intc_0 // 1
    return

main_startUpload_route@6:
    // contracts/big-box/big-box.algo.ts:68-73
    // startUpload(
    //   dataIdentifier: string,
    //   numBoxes: uint64,
    //   endBoxSize: uint64,
    //   mbrPayment: gtxn.PaymentTxn,
    // ): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/big-box/big-box.algo.ts:45
    // export class BigBox extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // contracts/big-box/big-box.algo.ts:68-73
    // startUpload(
    //   dataIdentifier: string,
    //   numBoxes: uint64,
    //   endBoxSize: uint64,
    //   mbrPayment: gtxn.PaymentTxn,
    // ): void {
    callsub startUpload
    intc_0 // 1
    return

main_createApplication_route@5:
    // contracts/big-box/big-box.algo.ts:56
    // @abimethod({ onCreate: "require" })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// contracts/big-box/big-box.algo.ts::BigBox.startUpload(dataIdentifier: bytes, numBoxes: uint64, endBoxSize: uint64, mbrPayment: uint64) -> void:
startUpload:
    // contracts/big-box/big-box.algo.ts:68-73
    // startUpload(
    //   dataIdentifier: string,
    //   numBoxes: uint64,
    //   endBoxSize: uint64,
    //   mbrPayment: gtxn.PaymentTxn,
    // ): void {
    proto 4 0
    // contracts/big-box/big-box.algo.ts:54
    // currentIndex = GlobalState<uint64>({ initialValue: 0 });
    intc_1 // 0
    bytec_0 // "currentIndex"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/big-box/big-box.algo.ts:75
    // const endBox: uint64 = startBox + numBoxes - 1;
    dup
    frame_dig -3
    +
    intc_0 // 1
    -
    // contracts/big-box/big-box.algo.ts:78
    // start: new UintN64(startBox),
    swap
    itob
    // contracts/big-box/big-box.algo.ts:79
    // end: new UintN64(endBox),
    dig 1
    itob
    // contracts/big-box/big-box.algo.ts:81
    // endSize: new UintN64(endBoxSize),
    frame_dig -2
    itob
    // contracts/big-box/big-box.algo.ts:77-82
    // const metadata = new Metadata({
    //   start: new UintN64(startBox),
    //   end: new UintN64(endBox),
    //   status: IN_PROGRESS,
    //   endSize: new UintN64(endBoxSize),
    // });
    cover 2
    concat
    // contracts/big-box/big-box.algo.ts:35
    // const IN_PROGRESS = new UintN<8>(0);
    bytec_1 // 0x00
    // contracts/big-box/big-box.algo.ts:77-82
    // const metadata = new Metadata({
    //   start: new UintN64(startBox),
    //   end: new UintN64(endBox),
    //   status: IN_PROGRESS,
    //   endSize: new UintN64(endBoxSize),
    // });
    concat
    swap
    concat
    // contracts/big-box/big-box.algo.ts:85
    // assert(!this.metadata(dataIdentifierBytes).exists);
    frame_dig -4
    box_len
    bury 1
    !
    assert
    // contracts/big-box/big-box.algo.ts:87
    // this.metadata(dataIdentifierBytes).value = metadata.copy();
    frame_dig -4
    swap
    box_put
    // contracts/big-box/big-box.algo.ts:89
    // this.currentIndex.value = endBox + 1;
    intc_0 // 1
    +
    // contracts/big-box/big-box.algo.ts:54
    // currentIndex = GlobalState<uint64>({ initialValue: 0 });
    bytec_0 // "currentIndex"
    // contracts/big-box/big-box.algo.ts:89
    // this.currentIndex.value = endBox + 1;
    swap
    app_global_put
    // contracts/big-box/big-box.algo.ts:92
    // numBoxes * COST_PER_BOX + // cost of boxes
    frame_dig -3
    // contracts/big-box/big-box.algo.ts:40
    // const COST_PER_BOX: uint64 = 2500;
    pushint 2500 // 2500
    // contracts/big-box/big-box.algo.ts:92
    // numBoxes * COST_PER_BOX + // cost of boxes
    *
    // contracts/big-box/big-box.algo.ts:93
    // (numBoxes - 1) * MAX_BOX_SIZE * COST_PER_BYTE + // cost of data
    frame_dig -3
    intc_0 // 1
    -
    // contracts/big-box/big-box.algo.ts:43
    // const MAX_BOX_SIZE: uint64 = 4096;
    pushint 4096 // 4096
    // contracts/big-box/big-box.algo.ts:93
    // (numBoxes - 1) * MAX_BOX_SIZE * COST_PER_BYTE + // cost of data
    *
    // contracts/big-box/big-box.algo.ts:39
    // const COST_PER_BYTE: uint64 = 400;
    intc_2 // 400
    // contracts/big-box/big-box.algo.ts:93
    // (numBoxes - 1) * MAX_BOX_SIZE * COST_PER_BYTE + // cost of data
    *
    // contracts/big-box/big-box.algo.ts:92-93
    // numBoxes * COST_PER_BOX + // cost of boxes
    // (numBoxes - 1) * MAX_BOX_SIZE * COST_PER_BYTE + // cost of data
    +
    // contracts/big-box/big-box.algo.ts:94
    // numBoxes * 64 * COST_PER_BYTE + // cost of keys
    frame_dig -3
    pushint 64 // 64
    *
    // contracts/big-box/big-box.algo.ts:39
    // const COST_PER_BYTE: uint64 = 400;
    intc_2 // 400
    // contracts/big-box/big-box.algo.ts:94
    // numBoxes * 64 * COST_PER_BYTE + // cost of keys
    *
    // contracts/big-box/big-box.algo.ts:92-94
    // numBoxes * COST_PER_BOX + // cost of boxes
    // (numBoxes - 1) * MAX_BOX_SIZE * COST_PER_BYTE + // cost of data
    // numBoxes * 64 * COST_PER_BYTE + // cost of keys
    +
    // contracts/big-box/big-box.algo.ts:95
    // endBoxSize * COST_PER_BYTE; // cost of last box data
    frame_dig -2
    // contracts/big-box/big-box.algo.ts:39
    // const COST_PER_BYTE: uint64 = 400;
    intc_2 // 400
    // contracts/big-box/big-box.algo.ts:95
    // endBoxSize * COST_PER_BYTE; // cost of last box data
    *
    // contracts/big-box/big-box.algo.ts:92-95
    // numBoxes * COST_PER_BOX + // cost of boxes
    // (numBoxes - 1) * MAX_BOX_SIZE * COST_PER_BYTE + // cost of data
    // numBoxes * 64 * COST_PER_BYTE + // cost of keys
    // endBoxSize * COST_PER_BYTE; // cost of last box data
    +
    // contracts/big-box/big-box.algo.ts:97-100
    // assertMatch(mbrPayment, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: totalCost,
    // });
    frame_dig -1
    gtxns Receiver
    // contracts/big-box/big-box.algo.ts:98
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // contracts/big-box/big-box.algo.ts:97-100
    // assertMatch(mbrPayment, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: totalCost,
    // });
    ==
    bz startUpload_bool_false@3
    frame_dig -1
    gtxns Amount
    frame_dig 0
    ==
    bz startUpload_bool_false@3
    intc_0 // 1

startUpload_bool_merge@4:
    // contracts/big-box/big-box.algo.ts:97-100
    // assertMatch(mbrPayment, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: totalCost,
    // });
    assert // assert target is match for conditions
    retsub

startUpload_bool_false@3:
    intc_1 // 0
    b startUpload_bool_merge@4


// contracts/big-box/big-box.algo.ts::BigBox.upload(dataIdentifier: bytes, boxIndex: uint64, data: bytes) -> void:
upload:
    // contracts/big-box/big-box.algo.ts:112
    // upload(dataIdentifier: string, boxIndex: uint64, data: bytes): void {
    proto 3 0
    // contracts/big-box/big-box.algo.ts:114
    // const metadata = this.metadata(dataIdentifierBytes).value.copy();
    frame_dig -3
    box_get
    swap
    dup
    uncover 2
    assert // Box must have value
    // contracts/big-box/big-box.algo.ts:115
    // assert(metadata.status === IN_PROGRESS);
    dup
    extract 16 1 // on error: Index access is out of bounds
    // contracts/big-box/big-box.algo.ts:35
    // const IN_PROGRESS = new UintN<8>(0);
    bytec_1 // 0x00
    // contracts/big-box/big-box.algo.ts:115
    // assert(metadata.status === IN_PROGRESS);
    ==
    assert
    // contracts/big-box/big-box.algo.ts:117
    // metadata.start.native <= boxIndex && boxIndex <= metadata.end.native,
    intc_1 // 0
    extract_uint64
    frame_dig -2
    <=
    bz upload_bool_false@3
    frame_dig 0
    pushint 8 // 8
    extract_uint64
    frame_dig -2
    >=
    bz upload_bool_false@3
    intc_0 // 1

upload_bool_merge@4:
    // contracts/big-box/big-box.algo.ts:116-118
    // assert(
    //   metadata.start.native <= boxIndex && boxIndex <= metadata.end.native,
    // );
    assert
    // contracts/big-box/big-box.algo.ts:120
    // if (!this.dataBoxes(boxIndex).exists) {
    frame_dig -2
    itob
    dup
    box_len
    bury 1
    bnz upload_else_body@6
    // contracts/big-box/big-box.algo.ts:121
    // this.dataBoxes(boxIndex).value = data;
    dup
    box_del
    pop
    frame_dig -1
    box_put
    retsub

upload_else_body@6:
    // contracts/big-box/big-box.algo.ts:124
    // this.dataBoxes(boxIndex).value.concat(data);
    dup
    box_get
    assert // Box must have value
    frame_dig -1
    concat
    // contracts/big-box/big-box.algo.ts:123-124
    // this.dataBoxes(boxIndex).value =
    //   this.dataBoxes(boxIndex).value.concat(data);
    dig 1
    box_del
    pop
    box_put
    retsub

upload_bool_false@3:
    intc_1 // 0
    b upload_bool_merge@4


// contracts/big-box/big-box.algo.ts::BigBox.setStatus(dataIdentifier: bytes, status: bytes) -> void:
setStatus:
    // contracts/big-box/big-box.algo.ts:135
    // setStatus(dataIdentifier: string, status: UintN<8>): void {
    proto 2 0
    // contracts/big-box/big-box.algo.ts:137
    // const currentStatus = this.metadata(dataIdentifierBytes).value.status;
    frame_dig -2
    box_get
    assert // Box must have value
    extract 16 1 // on error: Index access is out of bounds
    // contracts/big-box/big-box.algo.ts:139
    // assert(status === READY || status === IMMUTABLE || status === IN_PROGRESS);
    frame_dig -1
    // contracts/big-box/big-box.algo.ts:36
    // const READY = new UintN<8>(1);
    pushbytes 0x01
    // contracts/big-box/big-box.algo.ts:139
    // assert(status === READY || status === IMMUTABLE || status === IN_PROGRESS);
    ==
    bnz setStatus_bool_true@3
    frame_dig -1
    // contracts/big-box/big-box.algo.ts:37
    // const IMMUTABLE = new UintN<8>(2);
    bytec_2 // 0x02
    // contracts/big-box/big-box.algo.ts:139
    // assert(status === READY || status === IMMUTABLE || status === IN_PROGRESS);
    ==
    bnz setStatus_bool_true@3
    frame_dig -1
    // contracts/big-box/big-box.algo.ts:35
    // const IN_PROGRESS = new UintN<8>(0);
    bytec_1 // 0x00
    // contracts/big-box/big-box.algo.ts:139
    // assert(status === READY || status === IMMUTABLE || status === IN_PROGRESS);
    ==
    bz setStatus_bool_false@4

setStatus_bool_true@3:
    intc_0 // 1

setStatus_bool_merge@5:
    // contracts/big-box/big-box.algo.ts:139
    // assert(status === READY || status === IMMUTABLE || status === IN_PROGRESS);
    assert
    // contracts/big-box/big-box.algo.ts:140
    // assert(currentStatus !== IMMUTABLE);
    frame_dig 0
    // contracts/big-box/big-box.algo.ts:37
    // const IMMUTABLE = new UintN<8>(2);
    bytec_2 // 0x02
    // contracts/big-box/big-box.algo.ts:140
    // assert(currentStatus !== IMMUTABLE);
    !=
    assert
    // contracts/big-box/big-box.algo.ts:142
    // this.metadata(dataIdentifierBytes).value.status = status;
    frame_dig -2
    box_get
    assert // Box must have value
    frame_dig -1
    replace2 16
    frame_dig -2
    swap
    box_put
    retsub

setStatus_bool_false@4:
    intc_1 // 0
    b setStatus_bool_merge@5
