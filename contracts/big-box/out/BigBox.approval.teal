#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 8
    bytecblock "currentIndex" 0x00 0x02
    txn ApplicationID
    bnz main_after_if_else@2
    // contracts/big-box/big-box.algo.ts:48
    // currentIndex = GlobalState<uint64>({ initialValue: 0 });
    bytec_0 // "currentIndex"
    intc_1 // 0
    app_global_put

main_after_if_else@2:
    // contracts/big-box/big-box.algo.ts:39
    // export class BigBox extends Contract {
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    bz main_create_NoOp@9
    pushbytess 0xa05b5669 0x1b7dfa35 0xbf3856f8 // method "startUpload(string,uint64,uint64,pay)void", method "upload(string,uint64,uint64,byte[])void", method "setStatus(string,uint8)void"
    txna ApplicationArgs 0
    match startUpload upload setStatus
    err

main_create_NoOp@9:
    // contracts/big-box/big-box.algo.ts:39
    // export class BigBox extends Contract {
    pushbytes 0xb8447b36 // method "createApplication()void"
    txna ApplicationArgs 0
    match main_createApplication_route@10
    err

main_createApplication_route@10:
    // contracts/big-box/big-box.algo.ts:50
    // @abimethod({ onCreate: "require" })
    intc_0 // 1
    return


// contracts/big-box/big-box.algo.ts::BigBox.startUpload[routing]() -> void:
startUpload:
    // contracts/big-box/big-box.algo.ts:62-67
    // startUpload(
    //   dataIdentifier: string,
    //   numBoxes: uint64,
    //   endBoxSize: uint64,
    //   mbrPayment: gtxn.PaymentTxn,
    // ): void {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // contracts/big-box/big-box.algo.ts:68
    // const startBox = this.currentIndex.value;
    intc_1 // 0
    // contracts/big-box/big-box.algo.ts:48
    // currentIndex = GlobalState<uint64>({ initialValue: 0 });
    bytec_0 // "currentIndex"
    // contracts/big-box/big-box.algo.ts:68
    // const startBox = this.currentIndex.value;
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/big-box/big-box.algo.ts:69
    // const endBox: uint64 = startBox + numBoxes - 1;
    dup
    dig 4
    +
    intc_0 // 1
    -
    // contracts/big-box/big-box.algo.ts:71-76
    // const metadata: Metadata = {
    //   start: startBox,
    //   end: endBox,
    //   status: IN_PROGRESS,
    //   endSize: endBoxSize,
    // };
    swap
    itob
    dig 1
    itob
    concat
    // contracts/big-box/big-box.algo.ts:74
    // status: IN_PROGRESS,
    bytec_1 // 0x00
    // contracts/big-box/big-box.algo.ts:71-76
    // const metadata: Metadata = {
    //   start: startBox,
    //   end: endBox,
    //   status: IN_PROGRESS,
    //   endSize: endBoxSize,
    // };
    concat
    dig 3
    itob
    concat
    // contracts/big-box/big-box.algo.ts:79
    // assert(!this.metadata(dataIdentifierBytes).exists);
    dig 5
    box_len
    bury 1
    !
    assert
    // contracts/big-box/big-box.algo.ts:81
    // this.metadata(dataIdentifierBytes).value = clone(metadata);
    uncover 5
    swap
    box_put
    // contracts/big-box/big-box.algo.ts:83
    // this.currentIndex.value = endBox + 1;
    intc_0 // 1
    +
    // contracts/big-box/big-box.algo.ts:48
    // currentIndex = GlobalState<uint64>({ initialValue: 0 });
    bytec_0 // "currentIndex"
    // contracts/big-box/big-box.algo.ts:83
    // this.currentIndex.value = endBox + 1;
    swap
    app_global_put
    // contracts/big-box/big-box.algo.ts:86
    // numBoxes * COST_PER_BOX + // cost of boxes
    dig 2
    pushint 2500 // 2500
    *
    // contracts/big-box/big-box.algo.ts:87
    // (numBoxes - 1) * MAX_BOX_SIZE * COST_PER_BYTE + // cost of data
    dig 3
    intc_0 // 1
    -
    pushint 13107200 // 13107200
    *
    // contracts/big-box/big-box.algo.ts:86-87
    // numBoxes * COST_PER_BOX + // cost of boxes
    // (numBoxes - 1) * MAX_BOX_SIZE * COST_PER_BYTE + // cost of data
    +
    // contracts/big-box/big-box.algo.ts:88
    // numBoxes * 64 * COST_PER_BYTE + // cost of keys
    uncover 3
    pushint 25600 // 25600
    *
    // contracts/big-box/big-box.algo.ts:86-88
    // numBoxes * COST_PER_BOX + // cost of boxes
    // (numBoxes - 1) * MAX_BOX_SIZE * COST_PER_BYTE + // cost of data
    // numBoxes * 64 * COST_PER_BYTE + // cost of keys
    +
    // contracts/big-box/big-box.algo.ts:89
    // endBoxSize * COST_PER_BYTE; // cost of last box data
    uncover 2
    pushint 400 // 400
    *
    // contracts/big-box/big-box.algo.ts:86-89
    // numBoxes * COST_PER_BOX + // cost of boxes
    // (numBoxes - 1) * MAX_BOX_SIZE * COST_PER_BYTE + // cost of data
    // numBoxes * 64 * COST_PER_BYTE + // cost of keys
    // endBoxSize * COST_PER_BYTE; // cost of last box data
    +
    // contracts/big-box/big-box.algo.ts:91-94
    // assertMatch(mbrPayment, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: totalCost,
    // });
    dig 1
    gtxns Receiver
    // contracts/big-box/big-box.algo.ts:92
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // contracts/big-box/big-box.algo.ts:91-94
    // assertMatch(mbrPayment, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: totalCost,
    // });
    ==
    uncover 2
    gtxns Amount
    uncover 2
    ==
    &&
    // contracts/big-box/big-box.algo.ts:62-67
    // startUpload(
    //   dataIdentifier: string,
    //   numBoxes: uint64,
    //   endBoxSize: uint64,
    //   mbrPayment: gtxn.PaymentTxn,
    // ): void {
    return // on error: assert target is match for conditions


// contracts/big-box/big-box.algo.ts::BigBox.upload[routing]() -> void:
upload:
    intc_1 // 0
    // contracts/big-box/big-box.algo.ts:106-111
    // upload(
    //   dataIdentifier: string,
    //   boxIndex: uint64,
    //   offset: uint64,
    //   data: bytes,
    // ): void {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    dup
    uncover 2
    txna ApplicationArgs 3
    btoi
    cover 2
    txna ApplicationArgs 4
    extract 2 0
    cover 2
    // contracts/big-box/big-box.algo.ts:112
    // const metadata = clone(this.metadata(Bytes(dataIdentifier)).value);
    box_get
    swap
    dup
    cover 2
    cover 3
    assert // Box must have value
    // contracts/big-box/big-box.algo.ts:113
    // assert(metadata.status === IN_PROGRESS);
    dup
    extract 16 1
    bytec_1 // 0x00
    ==
    assert
    // contracts/big-box/big-box.algo.ts:114
    // assert(metadata.start <= boxIndex && boxIndex <= metadata.end);
    intc_1 // 0
    extract_uint64
    >=
    bz upload_bool_false@4
    dup
    intc_2 // 8
    extract_uint64
    dig 4
    >=
    bz upload_bool_false@4
    intc_0 // 1

upload_bool_merge@5:
    // contracts/big-box/big-box.algo.ts:114
    // assert(metadata.start <= boxIndex && boxIndex <= metadata.end);
    assert
    // contracts/big-box/big-box.algo.ts:116
    // if (offset === 0) {
    dig 2
    bnz upload_after_if_else@10
    // contracts/big-box/big-box.algo.ts:117
    // this.dataBoxes(boxIndex).create({
    dig 3
    dup
    itob
    bury 6
    // contracts/big-box/big-box.algo.ts:118
    // size: boxIndex === metadata.end ? metadata.endSize : MAX_BOX_SIZE,
    dig 1
    intc_2 // 8
    extract_uint64
    ==
    bz upload_ternary_false@8
    dup
    pushint 17 // 17
    extract_uint64

upload_ternary_merge@9:
    // contracts/big-box/big-box.algo.ts:117-119
    // this.dataBoxes(boxIndex).create({
    //   size: boxIndex === metadata.end ? metadata.endSize : MAX_BOX_SIZE,
    // });
    dig 5
    swap
    box_create
    pop

upload_after_if_else@10:
    // contracts/big-box/big-box.algo.ts:122
    // this.dataBoxes(boxIndex).replace(offset, data);
    dig 3
    itob
    dig 3
    dig 3
    box_replace
    // contracts/big-box/big-box.algo.ts:106-111
    // upload(
    //   dataIdentifier: string,
    //   boxIndex: uint64,
    //   offset: uint64,
    //   data: bytes,
    // ): void {
    intc_0 // 1
    return

upload_ternary_false@8:
    // contracts/big-box/big-box.algo.ts:118
    // size: boxIndex === metadata.end ? metadata.endSize : MAX_BOX_SIZE,
    pushint 32768 // 32768
    b upload_ternary_merge@9

upload_bool_false@4:
    intc_1 // 0
    b upload_bool_merge@5


// contracts/big-box/big-box.algo.ts::BigBox.setStatus[routing]() -> void:
setStatus:
    // contracts/big-box/big-box.algo.ts:132
    // setStatus(dataIdentifier: string, status: Uint<8>): void {
    txna ApplicationArgs 1
    extract 2 0
    dup
    txna ApplicationArgs 2
    dup
    uncover 2
    // contracts/big-box/big-box.algo.ts:134
    // const currentStatus = this.metadata(dataIdentifierBytes).value.status;
    box_get
    assert // Box must have value
    extract 16 1
    swap
    // contracts/big-box/big-box.algo.ts:136
    // assert(status === READY || status === IMMUTABLE || status === IN_PROGRESS);
    pushbytes 0x01
    ==
    bnz setStatus_bool_true@4
    dig 1
    bytec_2 // 0x02
    ==
    bnz setStatus_bool_true@4
    dig 1
    bytec_1 // 0x00
    ==
    bz setStatus_bool_false@5

setStatus_bool_true@4:
    intc_0 // 1

setStatus_bool_merge@6:
    // contracts/big-box/big-box.algo.ts:136
    // assert(status === READY || status === IMMUTABLE || status === IN_PROGRESS);
    assert
    // contracts/big-box/big-box.algo.ts:137
    // assert(currentStatus !== IMMUTABLE);
    dup
    bytec_2 // 0x02
    !=
    assert
    // contracts/big-box/big-box.algo.ts:139
    // this.metadata(dataIdentifierBytes).value.status = status;
    dig 2
    pushint 16 // 16
    dig 3
    box_replace
    // contracts/big-box/big-box.algo.ts:132
    // setStatus(dataIdentifier: string, status: Uint<8>): void {
    intc_0 // 1
    return

setStatus_bool_false@5:
    intc_1 // 0
    b setStatus_bool_merge@6
