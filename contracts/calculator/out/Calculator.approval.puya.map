{
  "version": 3,
  "sources": [
    "/home/parallels/dev/puya-ts-demo/contracts/calculator/calculator.algo.ts"
  ],
  "mappings": ";AAOA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AACG;;AAAA;AAkCD;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;AAGoB;;;;;AAAd;AAAJ;;;AA1BO;;AAAA;;AAAA;AAuBT;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAKa;AAAc;;;;;;;;;;;;AAAd;AAAJ;AAjBA;;AAAA;;AAAA;AAAA;;;AAAS;;AAAA;;AAAA;;;;AAAQ;;AAAA;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "3": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "4": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "5": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "7": {
      "op": "bz main_create_NoOp@5",
      "stack_out": []
    },
    "10": {
      "op": "pushbytes 0x76a7ef33 // method \"doMath(uint64,uint64,string)uint64\"",
      "defined_out": [
        "Method(doMath(uint64,uint64,string)uint64)"
      ],
      "stack_out": [
        "Method(doMath(uint64,uint64,string)uint64)"
      ]
    },
    "16": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(doMath(uint64,uint64,string)uint64)",
        "tmp%4#0"
      ],
      "stack_out": [
        "Method(doMath(uint64,uint64,string)uint64)",
        "tmp%4#0"
      ]
    },
    "19": {
      "op": "match doMath",
      "stack_out": []
    },
    "23": {
      "op": "err"
    },
    "24": {
      "block": "main_create_NoOp@5",
      "stack_in": [],
      "op": "pushbytes 0xb8447b36 // method \"createApplication()void\"",
      "defined_out": [
        "Method(createApplication()void)"
      ],
      "stack_out": [
        "Method(createApplication()void)"
      ]
    },
    "30": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createApplication()void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "tmp%5#0"
      ]
    },
    "33": {
      "op": "match main_createApplication_route@6",
      "stack_out": []
    },
    "37": {
      "op": "err"
    },
    "38": {
      "block": "main_createApplication_route@6",
      "stack_in": [],
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "40": {
      "op": "return",
      "stack_out": []
    },
    "41": {
      "subroutine": "contracts/calculator/calculator.algo.ts::Calculator.doMath[routing]",
      "params": {},
      "block": "doMath",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "44": {
      "op": "btoi",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "45": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "reinterpret_Encoded(uint64)%1#0"
      ],
      "stack_out": [
        "a#0",
        "reinterpret_Encoded(uint64)%1#0"
      ]
    },
    "48": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "49": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "a#0",
        "b#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "52": {
      "op": "extract 2 0",
      "defined_out": [
        "a#0",
        "b#0",
        "operation#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0"
      ]
    },
    "55": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "b#0",
        "operation#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "operation#0"
      ]
    },
    "56": {
      "op": "pushbytes \"sum\"",
      "defined_out": [
        "\"sum\"",
        "a#0",
        "b#0",
        "operation#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "operation#0",
        "\"sum\""
      ]
    },
    "61": {
      "op": "==",
      "defined_out": [
        "a#0",
        "b#0",
        "operation#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "tmp%0#1"
      ]
    },
    "62": {
      "op": "bz doMath_else_body@3",
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0"
      ]
    },
    "65": {
      "op": "dig 2",
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "a#0"
      ]
    },
    "67": {
      "op": "dig 2",
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "a#0",
        "b#0"
      ]
    },
    "69": {
      "op": "+",
      "defined_out": [
        "a#0",
        "b#0",
        "operation#0",
        "result#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "result#0"
      ]
    },
    "70": {
      "block": "doMath_after_if_else@7",
      "stack_in": [
        "a#0",
        "b#0",
        "operation#0",
        "result#0"
      ],
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "71": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "77": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "78": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "tmp%5#0"
      ]
    },
    "79": {
      "op": "log",
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0"
      ]
    },
    "80": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "1"
      ]
    },
    "82": {
      "op": "return",
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0"
      ]
    },
    "83": {
      "block": "doMath_else_body@3",
      "stack_in": [
        "a#0",
        "b#0",
        "operation#0"
      ],
      "op": "dup",
      "defined_out": [
        "operation#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "operation#0"
      ]
    },
    "84": {
      "op": "pushbytes \"difference\"",
      "defined_out": [
        "\"difference\"",
        "operation#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "operation#0",
        "\"difference\""
      ]
    },
    "96": {
      "op": "==",
      "defined_out": [
        "operation#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "tmp%2#1"
      ]
    },
    "97": {
      "error": "Invalid operation",
      "op": "assert // Invalid operation",
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0"
      ]
    },
    "98": {
      "op": "dig 2",
      "defined_out": [
        "a#0",
        "operation#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "a#0"
      ]
    },
    "100": {
      "op": "dig 2",
      "defined_out": [
        "a#0",
        "b#0",
        "operation#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "a#0",
        "b#0"
      ]
    },
    "102": {
      "op": ">=",
      "defined_out": [
        "a#0",
        "b#0",
        "operation#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "tmp%0#1"
      ]
    },
    "103": {
      "op": "bz doMath_ternary_false@10",
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0"
      ]
    },
    "106": {
      "op": "dig 2",
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "a#0"
      ]
    },
    "108": {
      "op": "dig 2",
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "a#0",
        "b#0"
      ]
    },
    "110": {
      "op": "-",
      "defined_out": [
        "a#0",
        "b#0",
        "operation#0",
        "result#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "result#0"
      ]
    },
    "111": {
      "op": "b doMath_after_if_else@7"
    },
    "114": {
      "block": "doMath_ternary_false@10",
      "stack_in": [
        "a#0",
        "b#0",
        "operation#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "b#0"
      ]
    },
    "116": {
      "op": "dig 3",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "b#0",
        "a#0"
      ]
    },
    "118": {
      "op": "-",
      "defined_out": [
        "a#0",
        "b#0",
        "result#0"
      ],
      "stack_out": [
        "a#0",
        "b#0",
        "operation#0",
        "result#0"
      ]
    },
    "119": {
      "op": "b doMath_after_if_else@7"
    }
  }
}