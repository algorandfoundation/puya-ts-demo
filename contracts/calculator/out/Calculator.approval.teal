#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    // contracts/calculator/calculator.algo.ts:8
    // export class Calculator extends Contract {
    txn NumAppArgs
    bz main_after_if_else@8
    pushbytess 0xb8447b36 0x76a7ef33 // method "createApplication()void", method "doMath(uint64,uint64,string)uint64"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_doMath_route@4

main_after_if_else@8:
    // contracts/calculator/calculator.algo.ts:8
    // export class Calculator extends Contract {
    pushint 0 // 0
    return

main_doMath_route@4:
    // contracts/calculator/calculator.algo.ts:43
    // doMath(a: uint64, b: uint64, operation: string): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/calculator/calculator.algo.ts:8
    // export class Calculator extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    extract 2 0
    // contracts/calculator/calculator.algo.ts:43
    // doMath(a: uint64, b: uint64, operation: string): uint64 {
    callsub doMath
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    pushint 1 // 1
    return

main_createApplication_route@3:
    // contracts/calculator/calculator.algo.ts:9
    // @abimethod({ onCreate: "require" })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    pushint 1 // 1
    return


// contracts/calculator/calculator.algo.ts::Calculator.doMath(a: uint64, b: uint64, operation: bytes) -> uint64:
doMath:
    // contracts/calculator/calculator.algo.ts:43
    // doMath(a: uint64, b: uint64, operation: string): uint64 {
    proto 3 1
    // contracts/calculator/calculator.algo.ts:46
    // if (operation === "sum") {
    frame_dig -1
    pushbytes "sum"
    ==
    bz doMath_else_body@2
    // contracts/calculator/calculator.algo.ts:20
    // return a + b;
    frame_dig -3
    frame_dig -2
    +
    // contracts/calculator/calculator.algo.ts:52
    // return result;
    retsub

doMath_else_body@2:
    // contracts/calculator/calculator.algo.ts:48
    // } else if (operation === "difference") {
    frame_dig -1
    pushbytes "difference"
    ==
    assert // Invalid operation
    // contracts/calculator/calculator.algo.ts:31
    // return a >= b ? a - b : b - a;
    frame_dig -3
    frame_dig -2
    >=
    bz doMath_ternary_false@9
    frame_dig -3
    frame_dig -2
    -
    // contracts/calculator/calculator.algo.ts:52
    // return result;
    retsub

doMath_ternary_false@9:
    // contracts/calculator/calculator.algo.ts:31
    // return a >= b ? a - b : b - a;
    frame_dig -2
    frame_dig -3
    -
    // contracts/calculator/calculator.algo.ts:52
    // return result;
    retsub
