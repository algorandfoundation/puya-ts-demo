/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from "@algorandfoundation/algokit-utils";
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from "@algorandfoundation/algokit-utils/types/app";
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from "@algorandfoundation/algokit-utils/types/app-client";
import type { AppSpec } from "@algorandfoundation/algokit-utils/types/app-spec";
import type {
  SendTransactionResult,
  TransactionToSign,
  SendTransactionFrom,
} from "@algorandfoundation/algokit-utils/types/transaction";
import type { ABIResult, TransactionWithSigner, modelsv2 } from "algosdk";
import {
  Algodv2,
  OnApplicationComplete,
  Transaction,
  AtomicTransactionComposer,
} from "algosdk";
export const APP_SPEC: AppSpec = {
  hints: {
    "createApplication()void": {
      call_config: {
        no_op: "CREATE",
      },
    },
    "allowOptInsFrom(address)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "disableOptInsFrom(address)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "verifyCreator(axfer)void": {
      call_config: {
        no_op: "CALL",
      },
    },
  },
  source: {
    approval:
      "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAwCiAgICAvLyBjb250cmFjdHMvbHNpZy13aXRoLWFwcC9sc2lnLXdpdGgtYXBwLmFsZ28udHM6NTIKICAgIC8vIGV4cG9ydCBjbGFzcyBDcmVhdG9yVmVyaWZpZXIgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9hZnRlcl9pZl9lbHNlQDEwCiAgICBwdXNoYnl0ZXNzIDB4Yjg0NDdiMzYgMHhmMWJmMmNhOCAweGJjMjhhYzJiIDB4OGQ1YWE3MjcgLy8gbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbigpdm9pZCIsIG1ldGhvZCAiYWxsb3dPcHRJbnNGcm9tKGFkZHJlc3Mpdm9pZCIsIG1ldGhvZCAiZGlzYWJsZU9wdEluc0Zyb20oYWRkcmVzcyl2b2lkIiwgbWV0aG9kICJ2ZXJpZnlDcmVhdG9yKGF4ZmVyKXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2NyZWF0ZUFwcGxpY2F0aW9uX3JvdXRlQDMgbWFpbl9hbGxvd09wdEluc0Zyb21fcm91dGVANCBtYWluX2Rpc2FibGVPcHRJbnNGcm9tX3JvdXRlQDUgbWFpbl92ZXJpZnlDcmVhdG9yX3JvdXRlQDYKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxMDoKICAgIC8vIGNvbnRyYWN0cy9sc2lnLXdpdGgtYXBwL2xzaWctd2l0aC1hcHAuYWxnby50czo1MgogICAgLy8gZXhwb3J0IGNsYXNzIENyZWF0b3JWZXJpZmllciBleHRlbmRzIENvbnRyYWN0IHsKICAgIGludGNfMSAvLyAwCiAgICByZXR1cm4KCm1haW5fdmVyaWZ5Q3JlYXRvcl9yb3V0ZUA2OgogICAgLy8gY29udHJhY3RzL2xzaWctd2l0aC1hcHAvbHNpZy13aXRoLWFwcC5hbGdvLnRzOjc0CiAgICAvLyB2ZXJpZnlDcmVhdG9yKG9wdEluOiBndHhuLkFzc2V0VHJhbnNmZXJUeG4pOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gY29udHJhY3RzL2xzaWctd2l0aC1hcHAvbHNpZy13aXRoLWFwcC5hbGdvLnRzOjUyCiAgICAvLyBleHBvcnQgY2xhc3MgQ3JlYXRvclZlcmlmaWVyIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBwdXNoaW50IDQgLy8gYXhmZXIKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBheGZlcgogICAgLy8gY29udHJhY3RzL2xzaWctd2l0aC1hcHAvbHNpZy13aXRoLWFwcC5hbGdvLnRzOjc0CiAgICAvLyB2ZXJpZnlDcmVhdG9yKG9wdEluOiBndHhuLkFzc2V0VHJhbnNmZXJUeG4pOiB2b2lkIHsKICAgIGNhbGxzdWIgdmVyaWZ5Q3JlYXRvcgogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9kaXNhYmxlT3B0SW5zRnJvbV9yb3V0ZUA1OgogICAgLy8gY29udHJhY3RzL2xzaWctd2l0aC1hcHAvbHNpZy13aXRoLWFwcC5hbGdvLnRzOjY4CiAgICAvLyBkaXNhYmxlT3B0SW5zRnJvbShjcmVhdG9yOiBBZGRyZXNzKTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIGNvbnRyYWN0cy9sc2lnLXdpdGgtYXBwL2xzaWctd2l0aC1hcHAuYWxnby50czo1MgogICAgLy8gZXhwb3J0IGNsYXNzIENyZWF0b3JWZXJpZmllciBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIGNvbnRyYWN0cy9sc2lnLXdpdGgtYXBwL2xzaWctd2l0aC1hcHAuYWxnby50czo2OAogICAgLy8gZGlzYWJsZU9wdEluc0Zyb20oY3JlYXRvcjogQWRkcmVzcyk6IHZvaWQgewogICAgY2FsbHN1YiBkaXNhYmxlT3B0SW5zRnJvbQogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9hbGxvd09wdEluc0Zyb21fcm91dGVANDoKICAgIC8vIGNvbnRyYWN0cy9sc2lnLXdpdGgtYXBwL2xzaWctd2l0aC1hcHAuYWxnby50czo2MgogICAgLy8gYWxsb3dPcHRJbnNGcm9tKGNyZWF0b3I6IEFkZHJlc3MpOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gY29udHJhY3RzL2xzaWctd2l0aC1hcHAvbHNpZy13aXRoLWFwcC5hbGdvLnRzOjUyCiAgICAvLyBleHBvcnQgY2xhc3MgQ3JlYXRvclZlcmlmaWVyIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gY29udHJhY3RzL2xzaWctd2l0aC1hcHAvbHNpZy13aXRoLWFwcC5hbGdvLnRzOjYyCiAgICAvLyBhbGxvd09wdEluc0Zyb20oY3JlYXRvcjogQWRkcmVzcyk6IHZvaWQgewogICAgY2FsbHN1YiBhbGxvd09wdEluc0Zyb20KICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fY3JlYXRlQXBwbGljYXRpb25fcm91dGVAMzoKICAgIC8vIGNvbnRyYWN0cy9sc2lnLXdpdGgtYXBwL2xzaWctd2l0aC1hcHAuYWxnby50czo1MwogICAgLy8gQGFiaW1ldGhvZCh7IG9uQ3JlYXRlOiAicmVxdWlyZSIgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gY29udHJhY3RzL2xzaWctd2l0aC1hcHAvbHNpZy13aXRoLWFwcC5hbGdvLnRzOjpDcmVhdG9yVmVyaWZpZXIuYWxsb3dPcHRJbnNGcm9tKGNyZWF0b3I6IGJ5dGVzKSAtPiB2b2lkOgphbGxvd09wdEluc0Zyb206CiAgICAvLyBjb250cmFjdHMvbHNpZy13aXRoLWFwcC9sc2lnLXdpdGgtYXBwLmFsZ28udHM6NjIKICAgIC8vIGFsbG93T3B0SW5zRnJvbShjcmVhdG9yOiBBZGRyZXNzKTogdm9pZCB7CiAgICBwcm90byAxIDAKICAgIC8vIGNvbnRyYWN0cy9sc2lnLXdpdGgtYXBwL2xzaWctd2l0aC1hcHAuYWxnby50czo2MwogICAgLy8gdGhpcy5hbGxvd2VkQ3JlYXRvcnMobmV3IFR1cGxlKG5ldyBBZGRyZXNzKFR4bi5zZW5kZXIpLCBjcmVhdG9yKSkudmFsdWUgPQogICAgdHhuIFNlbmRlcgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy9sc2lnLXdpdGgtYXBwL2xzaWctd2l0aC1hcHAuYWxnby50czo2NAogICAgLy8gbmV3IEJvb2wodHJ1ZSk7CiAgICBwdXNoYnl0ZXMgMHg4MAogICAgLy8gY29udHJhY3RzL2xzaWctd2l0aC1hcHAvbHNpZy13aXRoLWFwcC5hbGdvLnRzOjYzLTY0CiAgICAvLyB0aGlzLmFsbG93ZWRDcmVhdG9ycyhuZXcgVHVwbGUobmV3IEFkZHJlc3MoVHhuLnNlbmRlciksIGNyZWF0b3IpKS52YWx1ZSA9CiAgICAvLyAgIG5ldyBCb29sKHRydWUpOwogICAgYm94X3B1dAogICAgcmV0c3ViCgoKLy8gY29udHJhY3RzL2xzaWctd2l0aC1hcHAvbHNpZy13aXRoLWFwcC5hbGdvLnRzOjpDcmVhdG9yVmVyaWZpZXIuZGlzYWJsZU9wdEluc0Zyb20oY3JlYXRvcjogYnl0ZXMpIC0+IHZvaWQ6CmRpc2FibGVPcHRJbnNGcm9tOgogICAgLy8gY29udHJhY3RzL2xzaWctd2l0aC1hcHAvbHNpZy13aXRoLWFwcC5hbGdvLnRzOjY4CiAgICAvLyBkaXNhYmxlT3B0SW5zRnJvbShjcmVhdG9yOiBBZGRyZXNzKTogdm9pZCB7CiAgICBwcm90byAxIDAKICAgIC8vIGNvbnRyYWN0cy9sc2lnLXdpdGgtYXBwL2xzaWctd2l0aC1hcHAuYWxnby50czo2OQogICAgLy8gdGhpcy5hbGxvd2VkQ3JlYXRvcnMobmV3IFR1cGxlKG5ldyBBZGRyZXNzKFR4bi5zZW5kZXIpLCBjcmVhdG9yKSkudmFsdWUgPQogICAgdHhuIFNlbmRlcgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIC8vIGNvbnRyYWN0cy9sc2lnLXdpdGgtYXBwL2xzaWctd2l0aC1hcHAuYWxnby50czo3MAogICAgLy8gbmV3IEJvb2woZmFsc2UpOwogICAgcHVzaGJ5dGVzIDB4MDAKICAgIC8vIGNvbnRyYWN0cy9sc2lnLXdpdGgtYXBwL2xzaWctd2l0aC1hcHAuYWxnby50czo2OS03MAogICAgLy8gdGhpcy5hbGxvd2VkQ3JlYXRvcnMobmV3IFR1cGxlKG5ldyBBZGRyZXNzKFR4bi5zZW5kZXIpLCBjcmVhdG9yKSkudmFsdWUgPQogICAgLy8gICBuZXcgQm9vbChmYWxzZSk7CiAgICBib3hfcHV0CiAgICByZXRzdWIKCgovLyBjb250cmFjdHMvbHNpZy13aXRoLWFwcC9sc2lnLXdpdGgtYXBwLmFsZ28udHM6OkNyZWF0b3JWZXJpZmllci52ZXJpZnlDcmVhdG9yKG9wdEluOiB1aW50NjQpIC0+IHZvaWQ6CnZlcmlmeUNyZWF0b3I6CiAgICAvLyBjb250cmFjdHMvbHNpZy13aXRoLWFwcC9sc2lnLXdpdGgtYXBwLmFsZ28udHM6NzQKICAgIC8vIHZlcmlmeUNyZWF0b3Iob3B0SW46IGd0eG4uQXNzZXRUcmFuc2ZlclR4bik6IHZvaWQgewogICAgcHJvdG8gMSAwCiAgICAvLyBjb250cmFjdHMvbHNpZy13aXRoLWFwcC9sc2lnLXdpdGgtYXBwLmFsZ28udHM6NzkKICAgIC8vIG5ldyBBZGRyZXNzKG9wdEluLnNlbmRlciksCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFNlbmRlcgogICAgLy8gY29udHJhY3RzL2xzaWctd2l0aC1hcHAvbHNpZy13aXRoLWFwcC5hbGdvLnRzOjgwCiAgICAvLyBuZXcgQWRkcmVzcyhvcHRJbi54ZmVyQXNzZXQuY3JlYXRvciksCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFhmZXJBc3NldAogICAgYXNzZXRfcGFyYW1zX2dldCBBc3NldENyZWF0b3IKICAgIGFzc2VydCAvLyBhc3NldCBleGlzdHMKICAgIC8vIGNvbnRyYWN0cy9sc2lnLXdpdGgtYXBwL2xzaWctd2l0aC1hcHAuYWxnby50czo3OC04MQogICAgLy8gbmV3IFR1cGxlKAogICAgLy8gICBuZXcgQWRkcmVzcyhvcHRJbi5zZW5kZXIpLAogICAgLy8gICBuZXcgQWRkcmVzcyhvcHRJbi54ZmVyQXNzZXQuY3JlYXRvciksCiAgICAvLyApLAogICAgY29uY2F0CiAgICAvLyBjb250cmFjdHMvbHNpZy13aXRoLWFwcC9sc2lnLXdpdGgtYXBwLmFsZ28udHM6ODIKICAgIC8vICkudmFsdWUubmF0aXZlLAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGludGNfMSAvLyAwCiAgICBnZXRiaXQKICAgIC8vIGNvbnRyYWN0cy9sc2lnLXdpdGgtYXBwL2xzaWctd2l0aC1hcHAuYWxnby50czo3Ni04MwogICAgLy8gYXNzZXJ0KAogICAgLy8gICB0aGlzLmFsbG93ZWRDcmVhdG9ycygKICAgIC8vICAgICBuZXcgVHVwbGUoCiAgICAvLyAgICAgICBuZXcgQWRkcmVzcyhvcHRJbi5zZW5kZXIpLAogICAgLy8gICAgICAgbmV3IEFkZHJlc3Mob3B0SW4ueGZlckFzc2V0LmNyZWF0b3IpLAogICAgLy8gICAgICksCiAgICAvLyAgICkudmFsdWUubmF0aXZlLAogICAgLy8gKTsKICAgIGFzc2VydAogICAgcmV0c3ViCg==",
    clear:
      "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg==",
  },
  state: {
    global: {
      num_byte_slices: 0,
      num_uints: 0,
    },
    local: {
      num_byte_slices: 0,
      num_uints: 0,
    },
  },
  schema: {
    global: {
      declared: {},
      reserved: {},
    },
    local: {
      declared: {},
      reserved: {},
    },
  },
  contract: {
    name: "CreatorVerifier",
    methods: [
      {
        name: "createApplication",
        args: [],
        readonly: false,
        returns: {
          type: "void",
        },
      },
      {
        name: "allowOptInsFrom",
        args: [
          {
            type: "address",
            name: "creator",
          },
        ],
        readonly: false,
        returns: {
          type: "void",
        },
        desc: "Allow anyone to use the lsig to opt in the txn sender into an asset created by the creator",
      },
      {
        name: "disableOptInsFrom",
        args: [
          {
            type: "address",
            name: "creator",
          },
        ],
        readonly: false,
        returns: {
          type: "void",
        },
        desc: "Disable opt-ins for ASAs from the given creator",
      },
      {
        name: "verifyCreator",
        args: [
          {
            type: "axfer",
            name: "optIn",
          },
        ],
        readonly: false,
        returns: {
          type: "void",
        },
      },
    ],
    networks: {},
  },
  bare_call_config: {},
};

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = {
  onCompleteAction?: "no_op" | OnApplicationComplete.NoOpOC;
};
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = {
  onCompleteAction: "opt_in" | OnApplicationComplete.OptInOC;
};
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = {
  onCompleteAction: "close_out" | OnApplicationComplete.CloseOutOC;
};
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = {
  onCompleteAction:
    | "delete_application"
    | OnApplicationComplete.DeleteApplicationOC;
};
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = {
  onCompleteAction:
    | "update_application"
    | OnApplicationComplete.UpdateApplicationOC;
};
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt
   */
  asBigInt(): bigint;
  /**
   * Gets the state value as a number.
   */
  asNumber(): number;
};
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array;
  /**
   * Gets the state value as a string
   */
  asString(): string;
};

/**
 * Defines the types of available calls and state of the CreatorVerifier smart contract.
 */
export type CreatorVerifier = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    "createApplication()void" | "createApplication",
    {
      argsObj: {};
      argsTuple: [];
      returns: void;
    }
  > &
    Record<
      "allowOptInsFrom(address)void" | "allowOptInsFrom",
      {
        argsObj: {
          creator: string;
        };
        argsTuple: [creator: string];
        returns: void;
      }
    > &
    Record<
      "disableOptInsFrom(address)void" | "disableOptInsFrom",
      {
        argsObj: {
          creator: string;
        };
        argsTuple: [creator: string];
        returns: void;
      }
    > &
    Record<
      "verifyCreator(axfer)void" | "verifyCreator",
      {
        argsObj: {
          optIn:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>;
        };
        argsTuple: [
          optIn:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>,
        ];
        returns: void;
      }
    >;
};
/**
 * Defines the possible abi call signatures
 */
export type CreatorVerifierSig = keyof CreatorVerifier["methods"];
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CreatorVerifierSig | undefined> =
  {
    method: TSignature;
    methodArgs: TSignature extends undefined
      ? undefined
      : Array<ABIAppCallArg | undefined>;
  } & AppClientCallCoreParams &
    CoreAppCallArgs;
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>;
/**
 * Maps a method signature from the CreatorVerifier smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CreatorVerifierSig> =
  CreatorVerifier["methods"][TSignature]["argsObj" | "argsTuple"];
/**
 * Maps a method signature from the CreatorVerifier smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CreatorVerifierSig> =
  CreatorVerifier["methods"][TSignature]["returns"];

/**
 * A factory for available 'create' calls
 */
export type CreatorVerifierCreateCalls =
  (typeof CreatorVerifierCallFactory)["create"];
/**
 * Defines supported create methods for this smart contract
 */
export type CreatorVerifierCreateCallParams =
  TypedCallParams<"createApplication()void"> & OnCompleteNoOp;
/**
 * Defines arguments required for the deploy method.
 */
export type CreatorVerifierDeployArgs = {
  deployTimeParams?: TealTemplateParams;
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (
    callFactory: CreatorVerifierCreateCalls,
  ) => CreatorVerifierCreateCallParams;
};

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CreatorVerifierCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the CreatorVerifier smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(
        args: MethodArgs<"createApplication()void">,
        params: AppClientCallCoreParams &
          CoreAppCallArgs &
          AppClientCompilationParams &
          OnCompleteNoOp = {},
      ) {
        return {
          method: "createApplication()void" as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        };
      },
    };
  }

  /**
   * Constructs a no op call for the allowOptInsFrom(address)void ABI method
   *
   * Allow anyone to use the lsig to opt in the txn sender into an asset created by the creator
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static allowOptInsFrom(
    args: MethodArgs<"allowOptInsFrom(address)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: "allowOptInsFrom(address)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.creator],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the disableOptInsFrom(address)void ABI method
   *
   * Disable opt-ins for ASAs from the given creator
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static disableOptInsFrom(
    args: MethodArgs<"disableOptInsFrom(address)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: "disableOptInsFrom(address)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.creator],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the verifyCreator(axfer)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static verifyCreator(
    args: MethodArgs<"verifyCreator(axfer)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: "verifyCreator(axfer)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.optIn],
      ...params,
    };
  }
}

/**
 * A client to make calls to the CreatorVerifier smart contract
 */
export class CreatorVerifierClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient;

  private readonly sender: SendTransactionFrom | undefined;

  /**
   * Creates a new instance of `CreatorVerifierClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(
    appDetails: AppDetails,
    private algod: Algodv2,
  ) {
    this.sender = appDetails.sender;
    this.appClient = algokit.getAppClient(
      {
        ...appDetails,
        app: APP_SPEC,
      },
      algod,
    );
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(
    result: AppCallTransactionResult,
    returnValueFormatter?: (value: any) => TReturn,
  ): AppCallTransactionResultOfType<TReturn> {
    if (result.return?.decodeError) {
      throw result.return.decodeError;
    }
    const returnValue =
      result.return?.returnValue !== undefined &&
      returnValueFormatter !== undefined
        ? returnValueFormatter(result.return.returnValue)
        : (result.return?.returnValue as TReturn | undefined);
    return { ...result, return: returnValue };
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof CreatorVerifier["methods"]>(
    typedCallParams: TypedCallParams<TSignature>,
    returnValueFormatter?: (value: any) => MethodReturn<TSignature>,
  ) {
    return this.mapReturnValue<MethodReturn<TSignature>>(
      await this.appClient.call(typedCallParams),
      returnValueFormatter,
    );
  }

  /**
   * Idempotently deploys the CreatorVerifier smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(
    params: CreatorVerifierDeployArgs & AppClientDeployCoreParams = {},
  ): ReturnType<ApplicationClient["deploy"]> {
    const createArgs = params.createCall?.(CreatorVerifierCallFactory.create);
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    });
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this;
    return {
      /**
       * Creates a new instance of the CreatorVerifier smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(
        args: MethodArgs<"createApplication()void">,
        params: AppClientCallCoreParams &
          AppClientCompilationParams &
          OnCompleteNoOp = {},
      ): Promise<
        AppCallTransactionResultOfType<MethodReturn<"createApplication()void">>
      > {
        return $this.mapReturnValue(
          await $this.appClient.create(
            CreatorVerifierCallFactory.create.createApplication(args, params),
          ),
        );
      },
    };
  }

  /**
   * Makes a clear_state call to an existing instance of the CreatorVerifier smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(
    args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.appClient.clearState(args);
  }

  /**
   * Calls the allowOptInsFrom(address)void ABI method.
   *
   * Allow anyone to use the lsig to opt in the txn sender into an asset created by the creator
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public allowOptInsFrom(
    args: MethodArgs<"allowOptInsFrom(address)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(CreatorVerifierCallFactory.allowOptInsFrom(args, params));
  }

  /**
   * Calls the disableOptInsFrom(address)void ABI method.
   *
   * Disable opt-ins for ASAs from the given creator
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public disableOptInsFrom(
    args: MethodArgs<"disableOptInsFrom(address)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(
      CreatorVerifierCallFactory.disableOptInsFrom(args, params),
    );
  }

  /**
   * Calls the verifyCreator(axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public verifyCreator(
    args: MethodArgs<"verifyCreator(axfer)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(CreatorVerifierCallFactory.verifyCreator(args, params));
  }

  public compose(): CreatorVerifierComposer {
    const client = this;
    const atc = new AtomicTransactionComposer();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<undefined | ((x: any) => any)> = [];
    return {
      allowOptInsFrom(
        args: MethodArgs<"allowOptInsFrom(address)void">,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.allowOptInsFrom(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      disableOptInsFrom(
        args: MethodArgs<"disableOptInsFrom(address)void">,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.disableOptInsFrom(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      verifyCreator(
        args: MethodArgs<"verifyCreator(axfer)void">,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.verifyCreator(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      clearState(
        args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.clearState({
            ...args,
            sendParams: { ...args?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      addTransaction(
        txn:
          | TransactionWithSigner
          | TransactionToSign
          | Transaction
          | Promise<SendTransactionResult>,
        defaultSender?: SendTransactionFrom,
      ) {
        promiseChain = promiseChain.then(async () =>
          atc.addTransaction(
            await algokit.getTransactionWithSigner(
              txn,
              defaultSender ?? client.sender,
            ),
          ),
        );
        return this;
      },
      async atc() {
        await promiseChain;
        return atc;
      },
      async simulate() {
        await promiseChain;
        const result = await atc.simulate(client.algod);
        return result;
      },
      async execute() {
        await promiseChain;
        const result = await algokit.sendAtomicTransactionComposer(
          { atc, sendParams: {} },
          client.algod,
        );
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val.returnValue)
              : val.returnValue,
          ),
        };
      },
    } as unknown as CreatorVerifierComposer;
  }
}
export type CreatorVerifierComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the allowOptInsFrom(address)void ABI method.
   *
   * Allow anyone to use the lsig to opt in the txn sender into an asset created by the creator
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  allowOptInsFrom(
    args: MethodArgs<"allowOptInsFrom(address)void">,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): CreatorVerifierComposer<
    [...TReturns, MethodReturn<"allowOptInsFrom(address)void">]
  >;

  /**
   * Calls the disableOptInsFrom(address)void ABI method.
   *
   * Disable opt-ins for ASAs from the given creator
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  disableOptInsFrom(
    args: MethodArgs<"disableOptInsFrom(address)void">,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): CreatorVerifierComposer<
    [...TReturns, MethodReturn<"disableOptInsFrom(address)void">]
  >;

  /**
   * Calls the verifyCreator(axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verifyCreator(
    args: MethodArgs<"verifyCreator(axfer)void">,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): CreatorVerifierComposer<
    [...TReturns, MethodReturn<"verifyCreator(axfer)void">]
  >;

  /**
   * Makes a clear_state call to an existing instance of the CreatorVerifier smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(
    args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs,
  ): CreatorVerifierComposer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(
    txn:
      | TransactionWithSigner
      | TransactionToSign
      | Transaction
      | Promise<SendTransactionResult>,
    defaultSender?: SendTransactionFrom,
  ): CreatorVerifierComposer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CreatorVerifierComposerSimulateResult>;
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<CreatorVerifierComposerResults<TReturns>>;
};
export type CreatorVerifierComposerSimulateResult = {
  methodResults: ABIResult[];
  simulateResponse: modelsv2.SimulateResponse;
};
export type CreatorVerifierComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns;
  groupId: string;
  txIds: string[];
  transactions: Transaction[];
};
