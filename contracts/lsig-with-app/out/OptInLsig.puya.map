{
  "version": 3,
  "sources": [
    "/home/parallels/dev/puya-ts-demo/contracts/lsig-with-app/lsig-with-app.algo.ts"
  ],
  "mappings": "AA6BI;;AAAA;AAAA;;AAEqB;;AAFrB;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAOkB;;AAPlB;AAAA;AAAA;;AASuB;;AATvB;AAAA;AAAA;AAY4C;;AAAa;;AAAjB;AAAxB;AAAA;;AAAA;;AAAA;AAAA;AAED;AAAA;;AAAU;AAAlB;AAAP;AACuB;;AAAhB;;AAAuB;;;;;;AAAvB;AACP",
  "op_pc_offset": 1,
  "pc_events": {
    "0": {
      "op": "txn AssetAmount",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "3": {
      "op": "txn AssetReceiver",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "5": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "7": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%4#0"
      ]
    },
    "8": {
      "op": "&&",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "9": {
      "op": "txn Fee",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "11": {
      "op": "!",
      "defined_out": [
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "12": {
      "op": "&&",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "13": {
      "op": "txn RekeyTo",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "15": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "17": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%11#0"
      ]
    },
    "18": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "19": {
      "op": "txn AssetCloseTo",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "21": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "23": {
      "op": "==",
      "defined_out": [
        "tmp%12#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%15#0"
      ]
    },
    "24": {
      "op": "&&",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "25": {
      "error": "assert target is match for conditions",
      "op": "assert // assert target is match for conditions",
      "stack_out": []
    },
    "26": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "28": {
      "op": "pushint 1 // 1",
      "defined_out": [
        "1",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "1"
      ]
    },
    "30": {
      "op": "+",
      "defined_out": [
        "appCall#0"
      ],
      "stack_out": [
        "appCall#0"
      ]
    },
    "31": {
      "op": "dup",
      "defined_out": [
        "appCall#0",
        "appCall#0 (copy)"
      ],
      "stack_out": [
        "appCall#0",
        "appCall#0 (copy)"
      ]
    },
    "32": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "appCall#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "appCall#0",
        "gtxn_type%0#0"
      ]
    },
    "34": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appCall#0",
        "appl",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "appCall#0",
        "gtxn_type%0#0",
        "appl"
      ]
    },
    "36": {
      "op": "==",
      "defined_out": [
        "appCall#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "appCall#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "37": {
      "error": "transaction type is appl",
      "op": "assert // transaction type is appl",
      "stack_out": [
        "appCall#0"
      ]
    },
    "38": {
      "op": "dup",
      "stack_out": [
        "appCall#0",
        "appCall#0 (copy)"
      ]
    },
    "39": {
      "op": "gtxns ApplicationID",
      "defined_out": [
        "appCall#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "appCall#0",
        "tmp%18#0"
      ]
    },
    "41": {
      "op": "intc_0 // TMPL_APP_ID",
      "defined_out": [
        "TMPL_APP_ID",
        "appCall#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "appCall#0",
        "tmp%18#0",
        "TMPL_APP_ID"
      ]
    },
    "42": {
      "op": "==",
      "defined_out": [
        "appCall#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "appCall#0",
        "tmp%19#0"
      ]
    },
    "43": {
      "op": "assert",
      "stack_out": [
        "appCall#0"
      ]
    },
    "44": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "0",
        "appCall#0"
      ],
      "stack_out": [
        "appCall#0",
        "0"
      ]
    },
    "46": {
      "op": "gtxnsas ApplicationArgs",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "48": {
      "op": "pushbytes 0x8d5aa727 // method \"verifyCreator(axfer)void\"",
      "defined_out": [
        "Method(verifyCreator(axfer)void)",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "Method(verifyCreator(axfer)void)"
      ]
    },
    "54": {
      "op": "==",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "55": {
      "op": "return",
      "stack_out": []
    }
  }
}