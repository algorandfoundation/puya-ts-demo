#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1
    // contracts/lsig-with-app/lsig-with-app.algo.ts:50
    // export class CreatorVerifier extends Contract {
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    bz main_create_NoOp@7
    pushbytess 0xf1bf2ca8 0xbc28ac2b 0x8d5aa727 // method "allowOptInsFrom(address)void", method "disableOptInsFrom(address)void", method "verifyCreator(axfer)void"
    txna ApplicationArgs 0
    match allowOptInsFrom disableOptInsFrom verifyCreator
    err

main_create_NoOp@7:
    // contracts/lsig-with-app/lsig-with-app.algo.ts:50
    // export class CreatorVerifier extends Contract {
    pushbytes 0xb8447b36 // method "createApplication()void"
    txna ApplicationArgs 0
    match main_createApplication_route@8
    err

main_createApplication_route@8:
    // contracts/lsig-with-app/lsig-with-app.algo.ts:51
    // @abimethod({ onCreate: "require" })
    intc_0 // 1
    return


// contracts/lsig-with-app/lsig-with-app.algo.ts::CreatorVerifier.allowOptInsFrom[routing]() -> void:
allowOptInsFrom:
    // contracts/lsig-with-app/lsig-with-app.algo.ts:61
    // this.allowedCreators([Txn.sender, creator.native]).value = new Bool(true);
    txn Sender
    // contracts/lsig-with-app/lsig-with-app.algo.ts:60
    // allowOptInsFrom(creator: Address): void {
    txna ApplicationArgs 1
    // contracts/lsig-with-app/lsig-with-app.algo.ts:61
    // this.allowedCreators([Txn.sender, creator.native]).value = new Bool(true);
    concat
    pushbytes 0x80
    box_put
    // contracts/lsig-with-app/lsig-with-app.algo.ts:60
    // allowOptInsFrom(creator: Address): void {
    intc_0 // 1
    return


// contracts/lsig-with-app/lsig-with-app.algo.ts::CreatorVerifier.disableOptInsFrom[routing]() -> void:
disableOptInsFrom:
    // contracts/lsig-with-app/lsig-with-app.algo.ts:66
    // this.allowedCreators([Txn.sender, creator.native]).value = new Bool(false);
    txn Sender
    // contracts/lsig-with-app/lsig-with-app.algo.ts:65
    // disableOptInsFrom(creator: Address): void {
    txna ApplicationArgs 1
    // contracts/lsig-with-app/lsig-with-app.algo.ts:66
    // this.allowedCreators([Txn.sender, creator.native]).value = new Bool(false);
    concat
    pushbytes 0x00
    box_put
    // contracts/lsig-with-app/lsig-with-app.algo.ts:65
    // disableOptInsFrom(creator: Address): void {
    intc_0 // 1
    return


// contracts/lsig-with-app/lsig-with-app.algo.ts::CreatorVerifier.verifyCreator[routing]() -> void:
verifyCreator:
    // contracts/lsig-with-app/lsig-with-app.algo.ts:70
    // verifyCreator(optIn: gtxn.AssetTransferTxn): void {
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    pushint 4 // axfer
    ==
    assert // transaction type is axfer
    // contracts/lsig-with-app/lsig-with-app.algo.ts:73
    // this.allowedCreators([optIn.sender, optIn.xferAsset.creator]).value
    dup
    gtxns Sender
    swap
    gtxns XferAsset
    asset_params_get AssetCreator
    assert // asset exists
    concat
    box_get
    assert // Box must have value
    // contracts/lsig-with-app/lsig-with-app.algo.ts:74
    // .native,
    pushint 0 // 0
    getbit
    // contracts/lsig-with-app/lsig-with-app.algo.ts:70
    // verifyCreator(optIn: gtxn.AssetTransferTxn): void {
    return
