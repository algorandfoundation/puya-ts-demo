{
  "version": 3,
  "sources": [
    "/home/parallels/dev/puya-ts-demo/contracts/lsig-with-app/lsig-with-app.algo.ts"
  ],
  "mappings": ";;;;AAiDA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AACG;AAAA;AAU2B;;AAD5B;;;AACuB;AAAsC;;;AAA3D;AADF;AAAA;AAM4B;;AAD5B;;;AACuB;AAAsC;;;AAA3D;AADF;AAAA;AAKA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAGgC;AAAA;;AAAc;AAAA;;AAAU;;AAAA;AAA/B;AAAyC;AAAA;AAC3D;;AAAA;AAJP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "7": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "8": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "10": {
      "op": "bz main_create_NoOp@7",
      "stack_out": []
    },
    "13": {
      "op": "pushbytess 0xf1bf2ca8 0xbc28ac2b 0x8d5aa727 // method \"allowOptInsFrom(address)void\", method \"disableOptInsFrom(address)void\", method \"verifyCreator(axfer)void\"",
      "defined_out": [
        "Method(allowOptInsFrom(address)void)",
        "Method(disableOptInsFrom(address)void)",
        "Method(verifyCreator(axfer)void)"
      ],
      "stack_out": [
        "Method(allowOptInsFrom(address)void)",
        "Method(disableOptInsFrom(address)void)",
        "Method(verifyCreator(axfer)void)"
      ]
    },
    "30": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(allowOptInsFrom(address)void)",
        "Method(disableOptInsFrom(address)void)",
        "Method(verifyCreator(axfer)void)",
        "tmp%4#0"
      ],
      "stack_out": [
        "Method(allowOptInsFrom(address)void)",
        "Method(disableOptInsFrom(address)void)",
        "Method(verifyCreator(axfer)void)",
        "tmp%4#0"
      ]
    },
    "33": {
      "op": "match allowOptInsFrom disableOptInsFrom verifyCreator",
      "stack_out": []
    },
    "41": {
      "op": "err"
    },
    "42": {
      "block": "main_create_NoOp@7",
      "stack_in": [],
      "op": "pushbytes 0xb8447b36 // method \"createApplication()void\"",
      "defined_out": [
        "Method(createApplication()void)"
      ],
      "stack_out": [
        "Method(createApplication()void)"
      ]
    },
    "48": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createApplication()void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "tmp%5#0"
      ]
    },
    "51": {
      "op": "match main_createApplication_route@8",
      "stack_out": []
    },
    "55": {
      "op": "err"
    },
    "56": {
      "block": "main_createApplication_route@8",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "57": {
      "op": "return",
      "stack_out": []
    },
    "58": {
      "subroutine": "contracts/lsig-with-app/lsig-with-app.algo.ts::CreatorVerifier.allowOptInsFrom[routing]",
      "params": {},
      "block": "allowOptInsFrom",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "60": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "creator#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "creator#0"
      ]
    },
    "63": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "64": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "0x80"
      ]
    },
    "67": {
      "op": "box_put",
      "stack_out": []
    },
    "68": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "69": {
      "op": "return",
      "stack_out": []
    },
    "70": {
      "subroutine": "contracts/lsig-with-app/lsig-with-app.algo.ts::CreatorVerifier.disableOptInsFrom[routing]",
      "params": {},
      "block": "disableOptInsFrom",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "72": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "creator#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "creator#0"
      ]
    },
    "75": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "76": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0",
        "0x00"
      ]
    },
    "79": {
      "op": "box_put",
      "stack_out": []
    },
    "80": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "81": {
      "op": "return",
      "stack_out": []
    },
    "82": {
      "subroutine": "contracts/lsig-with-app/lsig-with-app.algo.ts::CreatorVerifier.verifyCreator[routing]",
      "params": {},
      "block": "verifyCreator",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "84": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "85": {
      "op": "-",
      "defined_out": [
        "optIn#0"
      ],
      "stack_out": [
        "optIn#0"
      ]
    },
    "86": {
      "op": "dup",
      "defined_out": [
        "optIn#0",
        "optIn#0 (copy)"
      ],
      "stack_out": [
        "optIn#0",
        "optIn#0 (copy)"
      ]
    },
    "87": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0",
        "optIn#0"
      ],
      "stack_out": [
        "optIn#0",
        "gtxn_type%0#0"
      ]
    },
    "89": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_type%0#0",
        "optIn#0"
      ],
      "stack_out": [
        "optIn#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "91": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0",
        "optIn#0"
      ],
      "stack_out": [
        "optIn#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "92": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "optIn#0"
      ]
    },
    "93": {
      "op": "dup",
      "stack_out": [
        "optIn#0",
        "optIn#0 (copy)"
      ]
    },
    "94": {
      "op": "gtxns Sender",
      "defined_out": [
        "optIn#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "optIn#0",
        "tmp%0#1"
      ]
    },
    "96": {
      "op": "swap",
      "stack_out": [
        "tmp%0#1",
        "optIn#0"
      ]
    },
    "97": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "tmp%1#0"
      ]
    },
    "99": {
      "op": "asset_params_get AssetCreator",
      "defined_out": [
        "check%0#0",
        "tmp%0#1",
        "value%0#0"
      ],
      "stack_out": [
        "tmp%0#1",
        "value%0#0",
        "check%0#0"
      ]
    },
    "101": {
      "error": "asset exists",
      "op": "assert // asset exists",
      "stack_out": [
        "tmp%0#1",
        "value%0#0"
      ]
    },
    "102": {
      "op": "concat",
      "defined_out": [
        "aggregate%head%1#0"
      ],
      "stack_out": [
        "aggregate%head%1#0"
      ]
    },
    "103": {
      "op": "box_get",
      "defined_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "aggregate%box_get%1#0"
      ]
    },
    "104": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "aggregate%box_get%0#0"
      ]
    },
    "105": {
      "op": "pushint 0 // 0",
      "defined_out": [
        "0",
        "aggregate%box_get%0#0"
      ],
      "stack_out": [
        "aggregate%box_get%0#0",
        "0"
      ]
    },
    "107": {
      "op": "getbit",
      "defined_out": [
        "aggregate%get_bit%0#0"
      ],
      "stack_out": [
        "aggregate%get_bit%0#0"
      ]
    },
    "108": {
      "op": "return",
      "stack_out": []
    }
  }
}