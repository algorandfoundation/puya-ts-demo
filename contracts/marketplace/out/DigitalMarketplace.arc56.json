{
    "name": "DigitalMarketplace",
    "structs": {
        "ListingValue": [
            {
                "name": "deposited",
                "type": "uint64"
            },
            {
                "name": "unitaryPrice",
                "type": "uint64"
            },
            {
                "name": "bidder",
                "type": "address"
            },
            {
                "name": "bid",
                "type": "uint64"
            },
            {
                "name": "bidUnitaryPrice",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "listingsBoxMbr",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "quantityPrice",
            "args": [
                {
                    "type": "uint64",
                    "name": "quantity"
                },
                {
                    "type": "uint64",
                    "name": "price"
                },
                {
                    "type": "uint64",
                    "name": "assetDecimals"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getListingsMbr",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "allowAsset",
            "args": [
                {
                    "type": "pay",
                    "name": "mbrPay"
                },
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "firstDeposit",
            "args": [
                {
                    "type": "pay",
                    "name": "mbrPay"
                },
                {
                    "type": "axfer",
                    "name": "xfer"
                },
                {
                    "type": "uint64",
                    "name": "unitaryPrice"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deposit",
            "args": [
                {
                    "type": "axfer",
                    "name": "xfer"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setPrice",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                },
                {
                    "type": "uint64",
                    "name": "unitaryPrice"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buy",
            "args": [
                {
                    "type": "address",
                    "name": "owner"
                },
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                },
                {
                    "type": "pay",
                    "name": "buyPay"
                },
                {
                    "type": "uint64",
                    "name": "quantity"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "bid",
            "args": [
                {
                    "type": "address",
                    "name": "owner"
                },
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                },
                {
                    "type": "pay",
                    "name": "bidPay"
                },
                {
                    "type": "uint64",
                    "name": "quantity"
                },
                {
                    "type": "uint64",
                    "name": "unitaryPrice"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "acceptBid",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "uint64",
                    "name": "nonce"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "listings": {
                    "keyType": "AVMString",
                    "valueType": "ListingValue",
                    "key": "bGlzdGluZ3M="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        662,
                        718,
                        768,
                        888,
                        994,
                        1133
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        664,
                        669,
                        674,
                        679,
                        720,
                        725,
                        730,
                        735,
                        770,
                        814,
                        819,
                        824,
                        889,
                        995,
                        1087,
                        1091,
                        1135,
                        1164,
                        1225
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        170,
                        191,
                        231,
                        252,
                        290,
                        314,
                        339,
                        378,
                        406,
                        417,
                        451
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        782,
                        911,
                        1027,
                        1058,
                        1176
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        467
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        173,
                        194,
                        234,
                        255,
                        293,
                        317,
                        342,
                        381,
                        409,
                        420,
                        454
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        327,
                        363
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        216,
                        277,
                        353,
                        391
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAFAQAEMMSKAyYECGxpc3RpbmdzIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADBUffHUAAAAAAADFRAgAAAAAAAAAADEbQQF6ggsEvksx4wSgyzaTBNmO9qkEVu/PtQQS8IyYBJtLgjQEWgW8VwQcgNcUBMvIGeUEvHXOsQTdYZIENhoAjgsBGwD5AO4A0gCrAJIAegBUAD8AFwACI0MxGRREMRhENhoBF8AwNhoCiAOeIkMxGRREMRhENhoBNhoCF8AwNhoDMRYiCUk4ECISRDYaBDYaBYgC6iJDMRkURDEYRDYaARfAMDYaAogCbCJDMRkURDEYRDYaATYaAhfAMDYaAzEWIglJOBAiEkQ2GgQXiAHRIkMxGRREMRhENhoBF8AwNhoCNhoDiAGIIkMxGRREMRhEMRYiCUk4ECQSRDYaAYgBHiJDMRkURDEYRDEWgQIJSTgQIhJEMRYiCUk4ECQSRDYaATYaAogApiJDMRkURDEYRDEWIglJOBAiEkQ2GgEXwDCIAFkiQzEZFEQxGEQqsCJDMRkURDEYRDYaARc2GgIXNhoDF4gAIhaABBUffHVMULAiQzEZFEQxGEQqsCJDMRlA/tUxGBREIkOKAwGL/ov9HYEKi/+VH0YCTBREiYoCADIKi/9wAEUBFESL/jgHMgoSRIv+OAgyEBJEsTIKI7ISshSL/7IRJLIQI7IBs4mKBACL/DgAMQASRIv8OAcyChJEi/w4CCEEEkQxAIv9OBEWUIv/UChMUEm9RQEURIv9OAAxABJEi/04FDIKEkSL/TgSSUQWi/5QKVArUCtQv4mKAgAxAIv+OBEWUIv/UIv+OAAxABJEi/44FDIKEkSL/jgSSUQoTwJQSb5ESVcwCEsBVzgISwJXECBLA1cICE8EI1tPBggWTFBMUE8CUExQv4mKAwAxAIv9FlCL/lAoTFBJvkRJVzAISwFXOAhLAlcQIE8DVwAIi/9QTFBPAlBMUL+JigUAi/wWi/tMUIv9UChMUEm+RElXCAhLAYEIW4v8cQFEi/9OAoj+wIv+OAAxABJEi/44B4v7EkSL/jgIEkRLAVcwCEsCVzgISwNXECBPBCNbi/8JFk8EUExQTwJQTFC/sTEAi/+yErIUi/yyESSyECOyAbOJigIAMQCL/hZQi/9QKExQSb5MSU8CRFcQIEkpE0EAH4sBSSVbTIE4W4v+cQFEiP5DsbIIiwKyByKyECOyAbOLALxIsTEAIQSyCLIHIrIQI7IBs7ExAIsBI1uyErIUi/6yESSyECOyAbOJigYAi/sWi/pMUIv8UChMUEm+TElPAkRXECBJKRNBACyL/xeLAUlOAoE4W0xLAQ1ETCVbi/txAURMTgKI/cyxsgiLArIHIrIQI7IBs4v+F4v/F4v7cQFEiP2wi/04ADEAEkSL/TgHMgoSRIv9OAgSRIsBSVcACExXCAgxAE4CUExQi/5Qi/9QiwBMv4mKAgAxAIv+FlCL/1AoTFBJvkxJTwJESVcQIElOAikTREkjW0lPAiVbSU4CDEEAYYsDiwFJVzgISwGBOFuL/nEBRE8ESU4DTgKI/TOxMQCyB7IIIrIQI7IBs7FJshKLAklOArIUi/6yESSyECOyAbNPA1cICIsDSwIJFosETwMJFkxPAlBPAlBMUExQiwBMv4mLBEL/nA==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}