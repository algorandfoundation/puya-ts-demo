{
    "name": "ZkWhitelistContract",
    "structs": {},
    "methods": [
        {
            "name": "create",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "UpdateApplication",
                    "DeleteApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "optInOrOut",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "OptIn",
                    "CloseOut"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addAddressToWhitelist",
            "args": [
                {
                    "type": "address",
                    "name": "address"
                },
                {
                    "type": "address[]",
                    "name": "proof"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "isOnWhitelist",
            "args": [
                {
                    "type": "address",
                    "name": "address"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verifyProof",
            "args": [
                {
                    "type": "uint64",
                    "name": "appId"
                },
                {
                    "type": "address[]",
                    "name": "proof"
                },
                {
                    "type": "address[]",
                    "name": "publicInputs"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 1
            },
            "local": {
                "ints": 1,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "appName": {
                    "keyType": "AVMString",
                    "valueType": "string",
                    "key": "YXBwTmFtZQ=="
                }
            },
            "local": {
                "whiteList": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "d2hpdGVMaXN0"
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        461
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        59,
                        87,
                        106,
                        156
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        131
                    ],
                    "errorMessage": "OnCompletion is not one of OptIn, CloseOut"
                },
                {
                    "pc": [
                        144
                    ],
                    "errorMessage": "OnCompletion is not one of UpdateApplication, DeleteApplication"
                },
                {
                    "pc": [
                        160
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        62,
                        90,
                        109,
                        134,
                        147
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        408
                    ],
                    "errorMessage": "check LocalState exists"
                }
            ],
            "pcOffsetMethod": "cblocks"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAQAGACYEBBUffHUDBoEBCXdoaXRlTGlzdAEAMRtBADGCBgQg3zpUBKDoGHIEkwCq4gTLd8B6BFF2N8YE8Qdz8TYaAI4GAGMAUwBHADEAHgACI0MxGRREMRhENhoBFzYaAjYaA4gBU0YCKExQsCJDMRkURDEYRDYaAYgBJShMULAiQzEZFEQxGEQ2GgE2GgKIAEkoTFCwIkMiMRmQJBpEMRhEIkMiMRmQgTAaRDEYRIgAIiJDMRkURDEYFEQ2GgGIAAIiQ4oBAIAHYXBwTmFtZYv/Z4kyCTEAEkSJigIBgfLsCDIMDUEAFbEkshCBBbIZKbIeKbIfI7IBs0L/4YEgr4v+gCAwZE5y4TGgKbhQRbaBgVhdKDPoSHm5cJFD4fWT8AAAAaqrgAIAAUxQJYv/TwKIAIZIjP8jU0AAHoAbABlQcm9vZiB2ZXJpZmljYXRpb24gZmFpbGVkiTEAi/4TQQA1gDIAMFNlbmRlciBhZGRyZXNzIGRvZXMgbm90IG1hdGNoIGF1dGhvcml6ZWQgYWRkcmVzc4mL/ioiZoACAACJigEBi/8yCGFAAAIriYv/IypjRCsjTwJUiYoDA7EjshmABIo87HqyGov+shqL/7Iai/2yGCSyECOyAbO0PklXBABMVwAEKBJEi/6L/4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 4,
            "patch": 4
        }
    },
    "events": [],
    "templateVariables": {
        "VERIFIER_APP_ID": {
            "type": "AVMUint64"
        }
    }
}