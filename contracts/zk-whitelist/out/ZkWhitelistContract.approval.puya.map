{
  "version": 3,
  "sources": [
    "/home/parallels/dev/puya-ts-demo/contracts/zk-whitelist/zk-whitelist.algo.ts"
  ],
  "mappings": "AA4BA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AAgBG;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AANA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AATD;;;;;;;;;AAGC;;;AAGC;AAHD;AAAA;AASe;;AAAuB;;AAA9B;AAHR;AAYA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeY;;AAAT;AAA6B;;AAAyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAzB;AAA7B;AAOA;;;;AAAA;AAAA;AAFA;AADe;;AAAA;;AAAA;;;AAAA;;AAKH;AAAA;AAAV;;;AACK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzBV;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BS;;AAAJ;;AAAA;AAAJ;;;AACS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9BV;;;AAgCC;;AApDF;AAoDkC;AAAhC;AACO;;;;AAjCR;;;AAoCA;;;AAAA;AAI+C;;AAA9B;AACZ;;;AACK;AANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ6C;AAAA;AAhE9C;AAgE8C;AAAA;AACrC;AAAA;AAAA;;AAAA;AATR;;;AAYD;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAMmB;AASkB;;;AAJ7B;;;;;;;;;;;;;;;;;;;;AALW;;;AAGR;;;AAHQ;AAWL;;AACL;AAAA;;;AAAA;AAAA;;;AACG;AADH;AAAA;AAAP;;AAAA;;AAAA",
  "op_pc_offset": 2,
  "pc_events": {
    "0": {
      "op": "pushbytess 0xa0e81872 0x9300aae2 // method \"update()void\", method \"optInOrOut()void\"",
      "defined_out": [
        "Method(optInOrOut()void)",
        "Method(update()void)"
      ],
      "stack_out": [
        "Method(update()void)",
        "Method(optInOrOut()void)"
      ]
    },
    "12": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(optInOrOut()void)",
        "Method(update()void)",
        "tmp%0#1"
      ],
      "stack_out": [
        "Method(update()void)",
        "Method(optInOrOut()void)",
        "tmp%0#1"
      ]
    },
    "15": {
      "op": "match main_update_route@2 main_optInOrOut_route@3",
      "stack_out": []
    },
    "21": {
      "block": "main_switch_case_next@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "23": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "24": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "25": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "27": {
      "op": "bz main_create_NoOp@10",
      "stack_out": []
    },
    "30": {
      "op": "pushbytess 0xcb77c07a 0x517637c6 0xf10773f1 // method \"addAddressToWhitelist(address,address[])string\", method \"isOnWhitelist(address)bool\", method \"verifyProof(uint64,address[],address[])bool\"",
      "defined_out": [
        "Method(addAddressToWhitelist(address,address[])string)",
        "Method(isOnWhitelist(address)bool)",
        "Method(verifyProof(uint64,address[],address[])bool)"
      ],
      "stack_out": [
        "Method(addAddressToWhitelist(address,address[])string)",
        "Method(isOnWhitelist(address)bool)",
        "Method(verifyProof(uint64,address[],address[])bool)"
      ]
    },
    "47": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addAddressToWhitelist(address,address[])string)",
        "Method(isOnWhitelist(address)bool)",
        "Method(verifyProof(uint64,address[],address[])bool)",
        "tmp%17#0"
      ],
      "stack_out": [
        "Method(addAddressToWhitelist(address,address[])string)",
        "Method(isOnWhitelist(address)bool)",
        "Method(verifyProof(uint64,address[],address[])bool)",
        "tmp%17#0"
      ]
    },
    "50": {
      "op": "match addAddressToWhitelist isOnWhitelist verifyProof",
      "stack_out": []
    },
    "58": {
      "op": "err"
    },
    "59": {
      "block": "main_create_NoOp@10",
      "stack_in": [],
      "op": "pushbytes 0x20df3a54 // method \"create(string)void\"",
      "defined_out": [
        "Method(create(string)void)"
      ],
      "stack_out": [
        "Method(create(string)void)"
      ]
    },
    "65": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create(string)void)",
        "tmp%18#0"
      ],
      "stack_out": [
        "Method(create(string)void)",
        "tmp%18#0"
      ]
    },
    "68": {
      "op": "match create",
      "stack_out": []
    },
    "72": {
      "op": "err"
    },
    "73": {
      "block": "main_optInOrOut_route@3",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "74": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%7#0"
      ],
      "stack_out": [
        "1",
        "tmp%7#0"
      ]
    },
    "76": {
      "op": "shl",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "77": {
      "op": "intc_2 // 6",
      "defined_out": [
        "6",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "6"
      ]
    },
    "78": {
      "op": "&",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "79": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "81": {
      "op": "&&",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "82": {
      "error": "OnCompletion must be one of OptIn, CloseOut && can only call when not creating",
      "op": "return // on error: OnCompletion must be one of OptIn, CloseOut && can only call when not creating",
      "stack_out": []
    },
    "83": {
      "block": "main_update_route@2",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "84": {
      "op": "txn OnCompletion",
      "defined_out": [
        "1",
        "tmp%1#0"
      ],
      "stack_out": [
        "1",
        "tmp%1#0"
      ]
    },
    "86": {
      "op": "shl",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "87": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "48"
      ]
    },
    "89": {
      "op": "&",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "90": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "92": {
      "op": "&&",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "93": {
      "error": "OnCompletion must be one of UpdateApplication, DeleteApplication && can only call when not creating",
      "op": "assert // OnCompletion must be one of UpdateApplication, DeleteApplication && can only call when not creating",
      "stack_out": []
    },
    "94": {
      "op": "b update"
    },
    "97": {
      "subroutine": "contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.create[routing]",
      "params": {},
      "block": "create",
      "stack_in": [],
      "op": "pushbytes \"appName\"",
      "defined_out": [
        "\"appName\""
      ],
      "stack_out": [
        "\"appName\""
      ]
    },
    "106": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "\"appName\"",
        "name#0"
      ],
      "stack_out": [
        "\"appName\"",
        "name#0"
      ]
    },
    "109": {
      "op": "app_global_put",
      "stack_out": []
    },
    "110": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "111": {
      "op": "return",
      "stack_out": []
    },
    "112": {
      "subroutine": "contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.update[routing]",
      "params": {},
      "block": "update",
      "stack_in": [],
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "114": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "116": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "117": {
      "op": "return",
      "defined_out": [],
      "stack_out": []
    },
    "118": {
      "subroutine": "contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.addAddressToWhitelist[routing]",
      "params": {},
      "block": "addAddressToWhitelist",
      "stack_in": [],
      "op": "txna ApplicationArgs 1"
    },
    "121": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "address#0",
        "proof#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0"
      ]
    },
    "124": {
      "block": "addAddressToWhitelist_while_top@8",
      "stack_in": [
        "address#0",
        "proof#0"
      ],
      "op": "pushint 145010 // 145010",
      "defined_out": [
        "145010"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "145010"
      ]
    },
    "128": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "145010",
        "tmp%1#2"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "145010",
        "tmp%1#2"
      ]
    },
    "130": {
      "op": ">",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "tmp%2#1"
      ]
    },
    "131": {
      "op": "bz addAddressToWhitelist_after_while@13",
      "stack_out": [
        "address#0",
        "proof#0"
      ]
    },
    "134": {
      "op": "itxn_begin"
    },
    "135": {
      "op": "intc_2 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "appl"
      ]
    },
    "136": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "address#0",
        "proof#0"
      ]
    },
    "138": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "DeleteApplication"
      ]
    },
    "140": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "address#0",
        "proof#0"
      ]
    },
    "142": {
      "op": "bytec_1 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "0x068101"
      ]
    },
    "143": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "address#0",
        "proof#0"
      ]
    },
    "145": {
      "op": "bytec_1 // 0x068101",
      "stack_out": [
        "address#0",
        "proof#0",
        "0x068101"
      ]
    },
    "146": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "address#0",
        "proof#0"
      ]
    },
    "148": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "0"
      ]
    },
    "149": {
      "op": "itxn_field Fee",
      "stack_out": [
        "address#0",
        "proof#0"
      ]
    },
    "151": {
      "op": "itxn_submit"
    },
    "152": {
      "op": "b addAddressToWhitelist_while_top@8"
    },
    "155": {
      "block": "addAddressToWhitelist_after_while@13",
      "stack_in": [
        "address#0",
        "proof#0"
      ],
      "op": "pushint 32 // 32",
      "defined_out": [
        "32"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "32"
      ]
    },
    "157": {
      "op": "bzero",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "tmp%0#0"
      ]
    },
    "158": {
      "op": "dig 2",
      "defined_out": [
        "address#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "tmp%0#0",
        "address#0"
      ]
    },
    "160": {
      "op": "pushbytes 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001",
      "defined_out": [
        "0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001",
        "address#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "tmp%0#0",
        "address#0",
        "0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001"
      ]
    },
    "194": {
      "op": "b%",
      "defined_out": [
        "address#0",
        "tmp%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "tmp%0#0",
        "tmp%1#1"
      ]
    },
    "195": {
      "op": "b|",
      "defined_out": [
        "address#0",
        "addressMod#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "addressMod#0"
      ]
    },
    "196": {
      "op": "pushbytes 0x0001",
      "defined_out": [
        "0x0001",
        "address#0",
        "addressMod#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "addressMod#0",
        "0x0001"
      ]
    },
    "200": {
      "op": "swap",
      "stack_out": [
        "address#0",
        "proof#0",
        "0x0001",
        "addressMod#0"
      ]
    },
    "201": {
      "op": "concat",
      "defined_out": [
        "address#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "aggregate%head%0#0"
      ]
    },
    "202": {
      "op": "intc_3 // TMPL_VERIFIER_APP_ID",
      "defined_out": [
        "TMPL_VERIFIER_APP_ID",
        "address#0",
        "aggregate%head%0#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "aggregate%head%0#0",
        "TMPL_VERIFIER_APP_ID"
      ]
    },
    "203": {
      "op": "dig 2",
      "defined_out": [
        "TMPL_VERIFIER_APP_ID",
        "address#0",
        "aggregate%head%0#0",
        "proof#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "aggregate%head%0#0",
        "TMPL_VERIFIER_APP_ID",
        "proof#0"
      ]
    },
    "205": {
      "op": "uncover 2",
      "stack_out": [
        "address#0",
        "proof#0",
        "TMPL_VERIFIER_APP_ID",
        "proof#0",
        "aggregate%head%0#0"
      ]
    },
    "207": {
      "callsub": "contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.verifyProof",
      "op": "callsub contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.verifyProof",
      "defined_out": [
        "address#0",
        "proof#0",
        "verified#0",
        "verifyProof%2#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "verified#0",
        "proof#0",
        "verifyProof%2#0"
      ]
    },
    "210": {
      "op": "popn 2",
      "stack_out": [
        "address#0",
        "proof#0",
        "verified#0"
      ]
    },
    "212": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "address#0",
        "proof#0",
        "verified#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "verified#0",
        "0"
      ]
    },
    "213": {
      "op": "getbit",
      "defined_out": [
        "address#0",
        "aggregate%get_bit%0#0",
        "proof#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "aggregate%get_bit%0#0"
      ]
    },
    "214": {
      "op": "bnz addAddressToWhitelist_after_if_else@3",
      "stack_out": [
        "address#0",
        "proof#0"
      ]
    },
    "217": {
      "op": "pushbytes 0x001950726f6f6620766572696669636174696f6e206661696c6564",
      "defined_out": [
        "address#0",
        "proof#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "tmp%0#0"
      ]
    },
    "246": {
      "block": "addAddressToWhitelist_after_inlined_contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.addAddressToWhitelist@6",
      "stack_in": [
        "address#0",
        "proof#0",
        "tmp%0#0"
      ],
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "247": {
      "op": "swap",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "248": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "tmp%1#0"
      ]
    },
    "249": {
      "op": "log",
      "stack_out": [
        "address#0",
        "proof#0"
      ]
    },
    "250": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "1"
      ]
    },
    "251": {
      "op": "return",
      "stack_out": [
        "address#0",
        "proof#0"
      ]
    },
    "252": {
      "block": "addAddressToWhitelist_after_if_else@3",
      "stack_in": [
        "address#0",
        "proof#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "tmp%4#0"
      ]
    },
    "254": {
      "op": "dig 2",
      "defined_out": [
        "address#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "tmp%4#0",
        "address#0"
      ]
    },
    "256": {
      "op": "!=",
      "defined_out": [
        "address#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "tmp%5#0"
      ]
    },
    "257": {
      "op": "bz addAddressToWhitelist_after_if_else@5",
      "stack_out": [
        "address#0",
        "proof#0"
      ]
    },
    "260": {
      "op": "pushbytes 0x003053656e646572206164647265737320646f6573206e6f74206d6174636820617574686f72697a65642061646472657373",
      "defined_out": [
        "address#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "tmp%0#0"
      ]
    },
    "312": {
      "op": "b addAddressToWhitelist_after_inlined_contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.addAddressToWhitelist@6"
    },
    "315": {
      "block": "addAddressToWhitelist_after_if_else@5",
      "stack_in": [
        "address#0",
        "proof#0"
      ],
      "op": "dig 1",
      "defined_out": [
        "address#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "address#0"
      ]
    },
    "317": {
      "op": "bytec_2 // \"whiteList\"",
      "defined_out": [
        "\"whiteList\"",
        "address#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "address#0",
        "\"whiteList\""
      ]
    },
    "318": {
      "op": "intc_0 // 1",
      "defined_out": [
        "\"whiteList\"",
        "1",
        "address#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "address#0",
        "\"whiteList\"",
        "1"
      ]
    },
    "319": {
      "op": "app_local_put",
      "stack_out": [
        "address#0",
        "proof#0"
      ]
    },
    "320": {
      "op": "pushbytes 0x0000",
      "defined_out": [
        "address#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "address#0",
        "proof#0",
        "tmp%0#0"
      ]
    },
    "324": {
      "op": "b addAddressToWhitelist_after_inlined_contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.addAddressToWhitelist@6"
    },
    "327": {
      "subroutine": "contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.isOnWhitelist[routing]",
      "params": {},
      "block": "isOnWhitelist",
      "stack_in": [],
      "op": "txna ApplicationArgs 1"
    },
    "330": {
      "op": "dup"
    },
    "331": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "address#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "address#0",
        "address#0",
        "tmp%1#1"
      ]
    },
    "333": {
      "op": "app_opted_in",
      "defined_out": [
        "address#0",
        "optedIn#0"
      ],
      "stack_out": [
        "address#0",
        "optedIn#0"
      ]
    },
    "334": {
      "op": "bnz isOnWhitelist_after_if_else@3",
      "stack_out": [
        "address#0"
      ]
    },
    "337": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "address#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "address#0",
        "tmp%0#0"
      ]
    },
    "338": {
      "block": "isOnWhitelist_after_inlined_contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.isOnWhitelist@4",
      "stack_in": [
        "address#0",
        "tmp%0#0"
      ],
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75"
      ],
      "stack_out": [
        "address#0",
        "tmp%0#0",
        "0x151f7c75"
      ]
    },
    "339": {
      "op": "swap",
      "defined_out": [
        "0x151f7c75",
        "tmp%0#0"
      ],
      "stack_out": [
        "address#0",
        "0x151f7c75",
        "tmp%0#0"
      ]
    },
    "340": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "address#0",
        "tmp%1#0"
      ]
    },
    "341": {
      "op": "log",
      "stack_out": [
        "address#0"
      ]
    },
    "342": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "address#0",
        "1"
      ]
    },
    "343": {
      "op": "return",
      "stack_out": [
        "address#0"
      ]
    },
    "344": {
      "block": "isOnWhitelist_after_if_else@3",
      "stack_in": [
        "address#0"
      ],
      "op": "dup",
      "defined_out": [
        "address#0"
      ],
      "stack_out": [
        "address#0",
        "address#0"
      ]
    },
    "345": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "address#0"
      ],
      "stack_out": [
        "address#0",
        "address#0",
        "0"
      ]
    },
    "346": {
      "op": "bytec_2 // \"whiteList\"",
      "defined_out": [
        "\"whiteList\"",
        "0",
        "address#0"
      ],
      "stack_out": [
        "address#0",
        "address#0",
        "0",
        "\"whiteList\""
      ]
    },
    "347": {
      "op": "app_local_get_ex",
      "defined_out": [
        "address#0",
        "maybe_exists%0#0",
        "whitelisted#0"
      ],
      "stack_out": [
        "address#0",
        "whitelisted#0",
        "maybe_exists%0#0"
      ]
    },
    "348": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "address#0",
        "whitelisted#0"
      ]
    },
    "349": {
      "op": "bytec_3 // 0x00",
      "defined_out": [
        "0x00",
        "address#0",
        "whitelisted#0"
      ],
      "stack_out": [
        "address#0",
        "whitelisted#0",
        "0x00"
      ]
    },
    "350": {
      "op": "intc_1 // 0",
      "stack_out": [
        "address#0",
        "whitelisted#0",
        "0x00",
        "0"
      ]
    },
    "351": {
      "op": "uncover 2",
      "stack_out": [
        "address#0",
        "0x00",
        "0",
        "whitelisted#0"
      ]
    },
    "353": {
      "op": "setbit",
      "defined_out": [
        "address#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "address#0",
        "tmp%0#0"
      ]
    },
    "354": {
      "op": "b isOnWhitelist_after_inlined_contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.isOnWhitelist@4"
    },
    "357": {
      "subroutine": "contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.verifyProof[routing]",
      "params": {},
      "block": "verifyProof",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "360": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "361": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[32][])%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[32][])%0#0"
      ]
    },
    "364": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_Encoded(len+uint8[32][])%0#0",
        "reinterpret_Encoded(len+uint8[32][])%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "reinterpret_Encoded(len+uint8[32][])%0#0",
        "reinterpret_Encoded(len+uint8[32][])%1#0"
      ]
    },
    "367": {
      "callsub": "contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.verifyProof",
      "op": "callsub contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.verifyProof",
      "defined_out": [
        "verifyProof%0#0",
        "verifyProof%1#0",
        "verifyProof%2#0"
      ],
      "stack_out": [
        "verifyProof%0#0",
        "verifyProof%1#0",
        "verifyProof%2#0"
      ]
    },
    "370": {
      "op": "popn 2",
      "stack_out": [
        "verifyProof%0#0"
      ]
    },
    "372": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "verifyProof%0#0"
      ],
      "stack_out": [
        "verifyProof%0#0",
        "0x151f7c75"
      ]
    },
    "373": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "verifyProof%0#0"
      ]
    },
    "374": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "375": {
      "op": "log",
      "stack_out": []
    },
    "376": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "377": {
      "op": "return",
      "stack_out": []
    },
    "378": {
      "subroutine": "contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.verifyProof",
      "params": {
        "appId#0": "uint64",
        "proof#0": "bytes",
        "publicInputs#0": "bytes"
      },
      "block": "contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.verifyProof",
      "stack_in": [],
      "op": "proto 3 3"
    },
    "381": {
      "op": "itxn_begin"
    },
    "382": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "383": {
      "op": "itxn_field OnCompletion",
      "stack_out": []
    },
    "385": {
      "op": "pushbytes 0x8a3cec7a // method \"verify(byte[32][],byte[32][])bool\"",
      "defined_out": [
        "Method(verify(byte[32][],byte[32][])bool)"
      ],
      "stack_out": [
        "Method(verify(byte[32][],byte[32][])bool)"
      ]
    },
    "391": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "393": {
      "op": "frame_dig -2",
      "defined_out": [
        "proof#0 (copy)"
      ],
      "stack_out": [
        "proof#0 (copy)"
      ]
    },
    "395": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "397": {
      "op": "frame_dig -1",
      "defined_out": [
        "publicInputs#0 (copy)"
      ],
      "stack_out": [
        "publicInputs#0 (copy)"
      ]
    },
    "399": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": []
    },
    "401": {
      "op": "frame_dig -3",
      "defined_out": [
        "appId#0 (copy)"
      ],
      "stack_out": [
        "appId#0 (copy)"
      ]
    },
    "403": {
      "op": "itxn_field ApplicationID",
      "stack_out": []
    },
    "405": {
      "op": "intc_2 // 6",
      "defined_out": [
        "6"
      ],
      "stack_out": [
        "6"
      ]
    },
    "406": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "408": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "409": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "411": {
      "op": "itxn_submit"
    },
    "412": {
      "op": "itxn LastLog",
      "defined_out": [
        "verified#0"
      ],
      "stack_out": [
        "verified#0"
      ]
    },
    "414": {
      "op": "dup",
      "defined_out": [
        "verified#0",
        "verified#0 (copy)"
      ],
      "stack_out": [
        "verified#0",
        "verified#0 (copy)"
      ]
    },
    "415": {
      "op": "extract 4 0",
      "defined_out": [
        "tmp%1#0",
        "verified#0"
      ],
      "stack_out": [
        "verified#0",
        "tmp%1#0"
      ]
    },
    "418": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "verified#0"
      ]
    },
    "419": {
      "op": "extract 0 4",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "422": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0",
        "0x151f7c75"
      ]
    },
    "423": {
      "op": "==",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "424": {
      "error": "Bytes has valid prefix",
      "op": "assert // Bytes has valid prefix",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "425": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "proof#0 (copy)"
      ]
    },
    "427": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "proof#0 (copy)",
        "publicInputs#0 (copy)"
      ]
    },
    "429": {
      "retsub": true,
      "op": "retsub"
    }
  }
}