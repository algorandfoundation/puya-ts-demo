#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 6 TMPL_VERIFIER_APP_ID
    bytecblock 0x151f7c75 0x068101 "whiteList" 0x00
    // contracts/zk-whitelist/zk-whitelist.algo.ts:29
    // export default class ZkWhitelistContract extends arc4.Contract {
    pushbytess 0xa0e81872 0x9300aae2 // method "update()void", method "optInOrOut()void"
    txna ApplicationArgs 0
    match main_update_route@2 main_optInOrOut_route@3

main_switch_case_next@4:
    // contracts/zk-whitelist/zk-whitelist.algo.ts:29
    // export default class ZkWhitelistContract extends arc4.Contract {
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    bz main_create_NoOp@10
    pushbytess 0xcb77c07a 0x517637c6 0xf10773f1 // method "addAddressToWhitelist(address,address[])string", method "isOnWhitelist(address)bool", method "verifyProof(uint64,address[],address[])bool"
    txna ApplicationArgs 0
    match addAddressToWhitelist isOnWhitelist verifyProof
    err

main_create_NoOp@10:
    // contracts/zk-whitelist/zk-whitelist.algo.ts:29
    // export default class ZkWhitelistContract extends arc4.Contract {
    pushbytes 0x20df3a54 // method "create(string)void"
    txna ApplicationArgs 0
    match create
    err

main_optInOrOut_route@3:
    // contracts/zk-whitelist/zk-whitelist.algo.ts:45
    // @abimethod({ allowActions: ["OptIn", "CloseOut"] })
    intc_0 // 1
    txn OnCompletion
    shl
    intc_2 // 6
    &
    txn ApplicationID
    &&
    return // on error: OnCompletion must be one of OptIn, CloseOut && can only call when not creating

main_update_route@2:
    // contracts/zk-whitelist/zk-whitelist.algo.ts:39
    // @abimethod({ allowActions: ["UpdateApplication", "DeleteApplication"] })
    intc_0 // 1
    txn OnCompletion
    shl
    pushint 48 // 48
    &
    txn ApplicationID
    &&
    assert // OnCompletion must be one of UpdateApplication, DeleteApplication && can only call when not creating
    b update


// contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.create[routing]() -> void:
create:
    // contracts/zk-whitelist/zk-whitelist.algo.ts:30
    // appName = GlobalState<arc4.Str>({});
    pushbytes "appName"
    // contracts/zk-whitelist/zk-whitelist.algo.ts:33
    // @abimethod({ onCreate: "require" })
    txna ApplicationArgs 1
    // contracts/zk-whitelist/zk-whitelist.algo.ts:36
    // this.appName.value = name;
    app_global_put
    // contracts/zk-whitelist/zk-whitelist.algo.ts:33
    // @abimethod({ onCreate: "require" })
    intc_0 // 1
    return


// contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.update[routing]() -> void:
update:
    // contracts/zk-whitelist/zk-whitelist.algo.ts:42
    // assert(Global.creatorAddress === Txn.sender);
    global CreatorAddress
    txn Sender
    ==
    // contracts/zk-whitelist/zk-whitelist.algo.ts:39
    // @abimethod({ allowActions: ["UpdateApplication", "DeleteApplication"] })
    return


// contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.addAddressToWhitelist[routing]() -> void:
addAddressToWhitelist:
    // contracts/zk-whitelist/zk-whitelist.algo.ts:51
    // @abimethod()
    txna ApplicationArgs 1
    txna ApplicationArgs 2

addAddressToWhitelist_while_top@8:
    pushint 145010 // 145010
    global OpcodeBudget
    >
    bz addAddressToWhitelist_after_while@13
    itxn_begin
    intc_2 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec_1 // 0x068101
    itxn_field ApprovalProgram
    bytec_1 // 0x068101
    itxn_field ClearStateProgram
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    b addAddressToWhitelist_while_top@8

addAddressToWhitelist_after_while@13:
    // contracts/zk-whitelist/zk-whitelist.algo.ts:66
    // op.bzero(32).bitwiseOr(Bytes(BigUint(address.bytes) % curveMod)),
    pushint 32 // 32
    bzero
    dig 2
    pushbytes 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
    b%
    b|
    // contracts/zk-whitelist/zk-whitelist.algo.ts:73
    // new arc4.DynamicArray(addressMod),
    pushbytes 0x0001
    swap
    concat
    // contracts/zk-whitelist/zk-whitelist.algo.ts:71
    // TemplateVar<uint64>("VERIFIER_APP_ID"),
    intc_3 // TMPL_VERIFIER_APP_ID
    // contracts/zk-whitelist/zk-whitelist.algo.ts:70-74
    // const verified = this.verifyProof(
    //   TemplateVar<uint64>("VERIFIER_APP_ID"),
    //   proof,
    //   new arc4.DynamicArray(addressMod),
    // );
    dig 2
    uncover 2
    callsub contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.verifyProof
    popn 2
    // contracts/zk-whitelist/zk-whitelist.algo.ts:75
    // if (!verified.native) {
    intc_1 // 0
    getbit
    bnz addAddressToWhitelist_after_if_else@3
    // contracts/zk-whitelist/zk-whitelist.algo.ts:76
    // return new arc4.Str("Proof verification failed");
    pushbytes 0x001950726f6f6620766572696669636174696f6e206661696c6564

addAddressToWhitelist_after_inlined_contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.addAddressToWhitelist@6:
    // contracts/zk-whitelist/zk-whitelist.algo.ts:51
    // @abimethod()
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

addAddressToWhitelist_after_if_else@3:
    // contracts/zk-whitelist/zk-whitelist.algo.ts:80
    // if (Txn.sender !== account) {
    txn Sender
    dig 2
    !=
    bz addAddressToWhitelist_after_if_else@5
    // contracts/zk-whitelist/zk-whitelist.algo.ts:81
    // return new arc4.Str("Sender address does not match authorized address");
    pushbytes 0x003053656e646572206164647265737320646f6573206e6f74206d6174636820617574686f72697a65642061646472657373
    // contracts/zk-whitelist/zk-whitelist.algo.ts:51
    // @abimethod()
    b addAddressToWhitelist_after_inlined_contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.addAddressToWhitelist@6

addAddressToWhitelist_after_if_else@5:
    // contracts/zk-whitelist/zk-whitelist.algo.ts:83
    // this.whiteList(account).value = true;
    dig 1
    // contracts/zk-whitelist/zk-whitelist.algo.ts:31
    // whiteList = LocalState<boolean>();
    bytec_2 // "whiteList"
    // contracts/zk-whitelist/zk-whitelist.algo.ts:83
    // this.whiteList(account).value = true;
    intc_0 // 1
    app_local_put
    // contracts/zk-whitelist/zk-whitelist.algo.ts:84
    // return new arc4.Str("");
    pushbytes 0x0000
    // contracts/zk-whitelist/zk-whitelist.algo.ts:51
    // @abimethod()
    b addAddressToWhitelist_after_inlined_contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.addAddressToWhitelist@6


// contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.isOnWhitelist[routing]() -> void:
isOnWhitelist:
    // contracts/zk-whitelist/zk-whitelist.algo.ts:87
    // @abimethod()
    txna ApplicationArgs 1
    dup
    // contracts/zk-whitelist/zk-whitelist.algo.ts:91
    // const optedIn = op.appOptedIn(account, Global.currentApplicationId);
    global CurrentApplicationID
    app_opted_in
    // contracts/zk-whitelist/zk-whitelist.algo.ts:92
    // if (!optedIn) {
    bnz isOnWhitelist_after_if_else@3
    // contracts/zk-whitelist/zk-whitelist.algo.ts:93
    // return new arc4.Bool(false);
    bytec_3 // 0x00

isOnWhitelist_after_inlined_contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.isOnWhitelist@4:
    // contracts/zk-whitelist/zk-whitelist.algo.ts:87
    // @abimethod()
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

isOnWhitelist_after_if_else@3:
    // contracts/zk-whitelist/zk-whitelist.algo.ts:95
    // const whitelisted = this.whiteList(account).value;
    dup
    intc_1 // 0
    // contracts/zk-whitelist/zk-whitelist.algo.ts:31
    // whiteList = LocalState<boolean>();
    bytec_2 // "whiteList"
    // contracts/zk-whitelist/zk-whitelist.algo.ts:95
    // const whitelisted = this.whiteList(account).value;
    app_local_get_ex
    assert // check LocalState exists
    // contracts/zk-whitelist/zk-whitelist.algo.ts:96
    // return new arc4.Bool(whitelisted);
    bytec_3 // 0x00
    intc_1 // 0
    uncover 2
    setbit
    // contracts/zk-whitelist/zk-whitelist.algo.ts:87
    // @abimethod()
    b isOnWhitelist_after_inlined_contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.isOnWhitelist@4


// contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.verifyProof[routing]() -> void:
verifyProof:
    // contracts/zk-whitelist/zk-whitelist.algo.ts:99-103
    // verifyProof(
    //   appId: uint64,
    //   proof: arc4.DynamicArray<arc4.Address>,
    //   publicInputs: arc4.DynamicArray<arc4.Address>,
    // ): arc4.Bool {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    callsub contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.verifyProof
    popn 2
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.verifyProof(appId: uint64, proof: bytes, publicInputs: bytes) -> bytes, bytes, bytes:
contracts/zk-whitelist/zk-whitelist.algo.ts::ZkWhitelistContract.verifyProof:
    // contracts/zk-whitelist/zk-whitelist.algo.ts:99-103
    // verifyProof(
    //   appId: uint64,
    //   proof: arc4.DynamicArray<arc4.Address>,
    //   publicInputs: arc4.DynamicArray<arc4.Address>,
    // ): arc4.Bool {
    proto 3 3
    // contracts/zk-whitelist/zk-whitelist.algo.ts:105-116
    // const verified = itxn
    //   .applicationCall({
    //     appId: appId,
    //     fee: 0,
    //     appArgs: [
    //       arc4.methodSelector("verify(byte[32][],byte[32][])bool"),
    //       clone(proof),
    //       clone(publicInputs),
    //     ],
    //     onCompletion: OnCompleteAction.NoOp,
    //   })
    //   .submit().lastLog;
    itxn_begin
    // contracts/zk-whitelist/zk-whitelist.algo.ts:114
    // onCompletion: OnCompleteAction.NoOp,
    intc_1 // 0
    itxn_field OnCompletion
    // contracts/zk-whitelist/zk-whitelist.algo.ts:110
    // arc4.methodSelector("verify(byte[32][],byte[32][])bool"),
    pushbytes 0x8a3cec7a // method "verify(byte[32][],byte[32][])bool"
    itxn_field ApplicationArgs
    frame_dig -2
    itxn_field ApplicationArgs
    frame_dig -1
    itxn_field ApplicationArgs
    frame_dig -3
    itxn_field ApplicationID
    // contracts/zk-whitelist/zk-whitelist.algo.ts:105-115
    // const verified = itxn
    //   .applicationCall({
    //     appId: appId,
    //     fee: 0,
    //     appArgs: [
    //       arc4.methodSelector("verify(byte[32][],byte[32][])bool"),
    //       clone(proof),
    //       clone(publicInputs),
    //     ],
    //     onCompletion: OnCompleteAction.NoOp,
    //   })
    intc_2 // 6
    itxn_field TypeEnum
    // contracts/zk-whitelist/zk-whitelist.algo.ts:108
    // fee: 0,
    intc_1 // 0
    itxn_field Fee
    // contracts/zk-whitelist/zk-whitelist.algo.ts:105-116
    // const verified = itxn
    //   .applicationCall({
    //     appId: appId,
    //     fee: 0,
    //     appArgs: [
    //       arc4.methodSelector("verify(byte[32][],byte[32][])bool"),
    //       clone(proof),
    //       clone(publicInputs),
    //     ],
    //     onCompletion: OnCompleteAction.NoOp,
    //   })
    //   .submit().lastLog;
    itxn_submit
    // contracts/zk-whitelist/zk-whitelist.algo.ts:116
    // .submit().lastLog;
    itxn LastLog
    // contracts/zk-whitelist/zk-whitelist.algo.ts:117-120
    // return arc4.convertBytes<arc4.Bool>(verified, {
    //   prefix: "log",
    //   strategy: "unsafe-cast",
    // });
    dup
    extract 4 0
    swap
    extract 0 4
    // contracts/zk-whitelist/zk-whitelist.algo.ts:118
    // prefix: "log",
    bytec_0 // 0x151f7c75
    // contracts/zk-whitelist/zk-whitelist.algo.ts:117-120
    // return arc4.convertBytes<arc4.Bool>(verified, {
    //   prefix: "log",
    //   strategy: "unsafe-cast",
    // });
    ==
    assert // Bytes has valid prefix
    frame_dig -2
    frame_dig -1
    retsub
