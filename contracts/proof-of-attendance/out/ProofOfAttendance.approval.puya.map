{
  "version": 3,
  "sources": [
    "/home/parallels/dev/puya-ts-demo/contracts/proof-of-attendance/proof-of-attendance.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBE;AAAkD;;AAAlD;AACA;;AACgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADhB;AAGA;AAAoD;AAApD;AALF;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AAQG;;;AAAA;AAEY;;AAAkB;;AAAtB;AAAP;AATF;AAUE;AAAA;AAHD;AAAA;AASuB;AAZxB;AAYwB;AAAA;AAA0B;AAhBlD;AAgBkD;AAAA;AAA9C;AADF;AAKqC;;AAAjB;;;AACA;AAjBtB;AAiBsB;AAAA;AAAS;AAA7B;AAjBF;AAiBE;AAAA;AAEyC;;AAAf;AAAA;;AACnB;AAAP;AAEe;;AAAc;AAAA;AAA7B;AAbD;AAAA;AAmBuB;AA5BxB;AA4BwB;AAAA;AAA0B;AAhClD;AAgCkD;AAAA;AAA9C;AADF;AAKqC;;AAAjB;;;AACA;AAjCtB;AAiCsB;AAAA;AAAS;AAA7B;AAjCF;AAiCE;AAAA;AAEmC;;AACZ;AAAA;AAAA;;AAChB;AAAP;AAEI;AAAA;AAAJ;AAdD;AAAA;AAoBuB;AA7CxB;AA6CwB;AAAA;AAA0B;AAjDlD;AAiDkD;AAAA;AAA9C;AADF;AAKqC;;AAAjB;;;AACA;AAlDtB;AAkDsB;AAAA;AAAS;AAA7B;AAlDF;AAkDE;AAAA;AAEqC;;AACX;AAAA;AAAA;;AACnB;AAAP;AAEe;AAAA;AAAf;;AAAA;;AAAA;AAdD;AAAA;AAoBuB;AA9DxB;AA8DwB;AAAA;AAA0B;AAlElD;AAkEkD;AAAA;AAA9C;AADF;AAKqC;;AAAjB;;;AACA;AAnEtB;AAmEsB;AAAA;AAAS;AAA7B;AAnEF;AAmEE;AAAA;AAlEO;AAoE4B;;AApE5B;AAoE0C;AAAA;;AAC1C;AAAP;AArEO;AAuES;;AAvET;AAuEuB;AAAA;AAA9B;AAbD;AAAA;AAiBwC;;AAAf;AACxB;AACO;AAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASoC;;AACP;AAAJ;AAAA;AACxB;AAAA;AAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUsC;;AACN;AAC/B;AACO;AALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxFQ;AAkGiC;;AAlGjC;AAkG+C;AAA9B;AAAA;AACxB;AAAA;AAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAEwC;;AAAf;AACxB;AACgB;;AAAA;;AAAA;AAAA;;AAAiB;AAAA;AAA1B;AAAP;AACgB;AAAA;;AAAT;AAAP;AACgB;AAAA;;AAAT;AAAP;AAEW;AAAA;;AAAoB;AAAA;;AAAA;AAAA;;AAA7B;AAAA;;;AACE;AAA+B;;AAA/B;AADF;;;;AADF;AAMW;;AAAA;AAAA;;AAA0B;AAAA;;AAAA;AAAA;;AAAnC;AAAA;;;AACE;;AAA4B;;AAA5B;AADF;;;;AADF;AAMiB;;AAAjB;;AAAA;;;AAlBD;AAAA;;;;;;;;;;AAqBA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAEoC;;AACP;AAAJ;AAAA;AACxB;AAAA;AACgB;;AAAA;;AAAA;AAAA;;AAAT;AAAP;AACgB;AAAA;;AAAT;AAAP;AACgB;AAAA;;AAAT;AAAP;AAEW;AAAA;;AAAoB;AAAA;;AAAA;AAAA;;AAA7B;AAAA;;;AACE;AAA+B;;AAA/B;AADF;;;;AADF;AAMW;;AAAA;AAAA;;AAA0B;AAAA;;AAAA;AAAA;;AAAnC;AAAA;;;AACE;;AAA4B;;AAA5B;AADF;;;;AADF;AAMiB;;AAAjB;;AAAA;;;AAnBD;AAAA;;;;;;;;;;AAsBA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAEsC;;AACN;AAC/B;AACgB;;AAAA;;AAAA;AAAA;;AAAiB;AAAA;AAA1B;AAAP;AACgB;AAAA;;AAAT;AAAP;AACgB;AAAA;;AAAT;AAAP;AAEW;AAAA;;AAAoB;AAAA;;AAAA;AAAA;;AAA7B;AAAA;;;AACE;AAA+B;;AAA/B;AADF;;;;AADF;AAMW;;AAAA;AAAA;;AAA0B;AAAA;;AAAA;AAAA;;AAAnC;AAAA;;;AACE;;AAA4B;;AAA5B;AADF;;;;AADF;AAMiB;;AAAjB;;AAAA;;;AAnBD;AAAA;;;;;;;;;;AAsBA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAxKQ;AA0KiC;;AA1KjC;AA0K+C;AAA9B;AAAA;AACxB;AAAA;AACgB;;AAAA;;AAAA;AAAA;;AAAT;AAAP;AACgB;AAAA;;AAAT;AAAP;AACgB;AAAA;;AAAT;AAAP;AAEW;AAAA;;AAAoB;AAAA;;AAAA;AAAA;;AAA7B;AAAA;;;AACE;AAA+B;;AAA/B;AADF;;;;AADF;AAMW;;AAAA;AAAA;;AAA0B;AAAA;;AAAA;AAAA;;AAAnC;AAAA;;;AACE;;AAA4B;;AAA5B;AADF;;;;AADF;AAMiB;;AAAjB;;AAAA;;;AAlBD;AAAA;;;;;;;;;AAqBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGgC;AAjMhC;AAiMgC;AAAA;AAA5B;AADsB;;;;;;;;;;;;;;;AAAN;AAAA;AAGX;AAMgB;AA5MzB;;AA4MyB;AAAA;;;;;;;AADT;;;AADH;;;AADG;;;;;;;;;AAHP;;;;AAAA;;;AAAA;AASK;;AATZ;AAYF;;;AACE;AAGmB;;AAEF;;;;;;;;;;;;;AALjB;;;AAAA;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 4"
    },
    "6": {
      "op": "bytecblock \"totalAttendees\" \"maxAttendees\" \"boxMap\" 0x151f7c75 \"assetUrl\" 0x068101"
    },
    "61": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "63": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "66": {
      "op": "bytec_1 // \"maxAttendees\"",
      "defined_out": [
        "\"maxAttendees\""
      ],
      "stack_out": [
        "\"maxAttendees\""
      ]
    },
    "67": {
      "op": "pushint 30 // 30",
      "defined_out": [
        "\"maxAttendees\"",
        "30"
      ],
      "stack_out": [
        "\"maxAttendees\"",
        "30"
      ]
    },
    "69": {
      "op": "app_global_put",
      "stack_out": []
    },
    "70": {
      "op": "bytec 4 // \"assetUrl\"",
      "defined_out": [
        "\"assetUrl\""
      ],
      "stack_out": [
        "\"assetUrl\""
      ]
    },
    "72": {
      "op": "pushbytes \"ipfs://QmW5vERkgeJJtSY1YQdcWU6gsHCZCyLFtM1oT9uyy2WGm8\"",
      "defined_out": [
        "\"assetUrl\"",
        "\"ipfs://QmW5vERkgeJJtSY1YQdcWU6gsHCZCyLFtM1oT9uyy2WGm8\""
      ],
      "stack_out": [
        "\"assetUrl\"",
        "\"ipfs://QmW5vERkgeJJtSY1YQdcWU6gsHCZCyLFtM1oT9uyy2WGm8\""
      ]
    },
    "127": {
      "op": "app_global_put",
      "stack_out": []
    },
    "128": {
      "op": "bytec_0 // \"totalAttendees\"",
      "defined_out": [
        "\"totalAttendees\""
      ],
      "stack_out": [
        "\"totalAttendees\""
      ]
    },
    "129": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"totalAttendees\"",
        "0"
      ],
      "stack_out": [
        "\"totalAttendees\"",
        "0"
      ]
    },
    "130": {
      "op": "app_global_put",
      "stack_out": []
    },
    "131": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "133": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "134": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "135": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "137": {
      "op": "bz main_create_NoOp@18",
      "stack_out": []
    },
    "140": {
      "op": "pushbytess 0x09527352 0x34ef747b 0x7732a900 0x8485a195 0x7f8cf0ab 0xdd617d7d 0x9b487a80 0xba796fea 0x7de97566 0x83dd375f 0x765a33da 0x2c7a818c // method \"confirmAttendance()void\", method \"confirmAttendanceWithBox()void\", method \"confirmAttendanceWithBoxRef()void\", method \"confirmAttendanceWithBoxMap()void\", method \"getPoaId()uint64\", method \"getPoaIdWithBox()uint64\", method \"getPoaIdWithBoxRef()uint64\", method \"getPoaIdWithBoxMap()uint64\", method \"claimPoa(axfer)void\", method \"claimPoaWithBox(axfer)void\", method \"claimPoaWithBoxRef(axfer)void\", method \"claimPoaWithBoxMap(axfer)void\"",
      "defined_out": [
        "Method(claimPoa(axfer)void)",
        "Method(claimPoaWithBox(axfer)void)",
        "Method(claimPoaWithBoxMap(axfer)void)",
        "Method(claimPoaWithBoxRef(axfer)void)",
        "Method(confirmAttendance()void)",
        "Method(confirmAttendanceWithBox()void)",
        "Method(confirmAttendanceWithBoxMap()void)",
        "Method(confirmAttendanceWithBoxRef()void)",
        "Method(getPoaId()uint64)",
        "Method(getPoaIdWithBox()uint64)",
        "Method(getPoaIdWithBoxMap()uint64)",
        "Method(getPoaIdWithBoxRef()uint64)"
      ],
      "stack_out": [
        "Method(confirmAttendance()void)",
        "Method(confirmAttendanceWithBox()void)",
        "Method(confirmAttendanceWithBoxRef()void)",
        "Method(confirmAttendanceWithBoxMap()void)",
        "Method(getPoaId()uint64)",
        "Method(getPoaIdWithBox()uint64)",
        "Method(getPoaIdWithBoxRef()uint64)",
        "Method(getPoaIdWithBoxMap()uint64)",
        "Method(claimPoa(axfer)void)",
        "Method(claimPoaWithBox(axfer)void)",
        "Method(claimPoaWithBoxRef(axfer)void)",
        "Method(claimPoaWithBoxMap(axfer)void)"
      ]
    },
    "202": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(claimPoa(axfer)void)",
        "Method(claimPoaWithBox(axfer)void)",
        "Method(claimPoaWithBoxMap(axfer)void)",
        "Method(claimPoaWithBoxRef(axfer)void)",
        "Method(confirmAttendance()void)",
        "Method(confirmAttendanceWithBox()void)",
        "Method(confirmAttendanceWithBoxMap()void)",
        "Method(confirmAttendanceWithBoxRef()void)",
        "Method(getPoaId()uint64)",
        "Method(getPoaIdWithBox()uint64)",
        "Method(getPoaIdWithBoxMap()uint64)",
        "Method(getPoaIdWithBoxRef()uint64)",
        "tmp%4#0"
      ],
      "stack_out": [
        "Method(confirmAttendance()void)",
        "Method(confirmAttendanceWithBox()void)",
        "Method(confirmAttendanceWithBoxRef()void)",
        "Method(confirmAttendanceWithBoxMap()void)",
        "Method(getPoaId()uint64)",
        "Method(getPoaIdWithBox()uint64)",
        "Method(getPoaIdWithBoxRef()uint64)",
        "Method(getPoaIdWithBoxMap()uint64)",
        "Method(claimPoa(axfer)void)",
        "Method(claimPoaWithBox(axfer)void)",
        "Method(claimPoaWithBoxRef(axfer)void)",
        "Method(claimPoaWithBoxMap(axfer)void)",
        "tmp%4#0"
      ]
    },
    "205": {
      "op": "match confirmAttendance confirmAttendanceWithBox confirmAttendanceWithBoxRef confirmAttendanceWithBoxMap getPoaId getPoaIdWithBox getPoaIdWithBoxRef getPoaIdWithBoxMap claimPoa claimPoaWithBox claimPoaWithBoxRef claimPoaWithBoxMap",
      "stack_out": []
    },
    "231": {
      "op": "err"
    },
    "232": {
      "block": "main_create_NoOp@18",
      "stack_in": [],
      "op": "pushbytes 0x1bcde52d // method \"init(uint64)void\"",
      "defined_out": [
        "Method(init(uint64)void)"
      ],
      "stack_out": [
        "Method(init(uint64)void)"
      ]
    },
    "238": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(init(uint64)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "Method(init(uint64)void)",
        "tmp%5#0"
      ]
    },
    "241": {
      "op": "match init",
      "stack_out": []
    },
    "245": {
      "op": "err"
    },
    "246": {
      "subroutine": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.init[routing]",
      "params": {},
      "block": "init",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "249": {
      "op": "btoi",
      "defined_out": [
        "maxAttendees#0"
      ],
      "stack_out": [
        "maxAttendees#0"
      ]
    },
    "250": {
      "op": "txn Sender",
      "defined_out": [
        "maxAttendees#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "maxAttendees#0",
        "tmp%0#1"
      ]
    },
    "252": {
      "op": "global CreatorAddress",
      "defined_out": [
        "maxAttendees#0",
        "tmp%0#1",
        "tmp%1#0"
      ],
      "stack_out": [
        "maxAttendees#0",
        "tmp%0#1",
        "tmp%1#0"
      ]
    },
    "254": {
      "op": "==",
      "defined_out": [
        "maxAttendees#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "maxAttendees#0",
        "tmp%2#0"
      ]
    },
    "255": {
      "error": "Only creator can initialize",
      "op": "assert // Only creator can initialize",
      "stack_out": [
        "maxAttendees#0"
      ]
    },
    "256": {
      "op": "bytec_1 // \"maxAttendees\"",
      "defined_out": [
        "\"maxAttendees\"",
        "maxAttendees#0"
      ],
      "stack_out": [
        "maxAttendees#0",
        "\"maxAttendees\""
      ]
    },
    "257": {
      "op": "swap",
      "stack_out": [
        "\"maxAttendees\"",
        "maxAttendees#0"
      ]
    },
    "258": {
      "op": "app_global_put",
      "stack_out": []
    },
    "259": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "260": {
      "op": "return",
      "stack_out": []
    },
    "261": {
      "subroutine": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.confirmAttendance[routing]",
      "params": {},
      "block": "confirmAttendance",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "262": {
      "op": "bytec_0 // \"totalAttendees\"",
      "defined_out": [
        "\"totalAttendees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalAttendees\""
      ]
    },
    "263": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "264": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "265": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "266": {
      "op": "bytec_1 // \"maxAttendees\"",
      "defined_out": [
        "\"maxAttendees\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"maxAttendees\""
      ]
    },
    "267": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "268": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "269": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "270": {
      "error": "Max attendees reached",
      "op": "assert // Max attendees reached",
      "stack_out": []
    },
    "271": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "273": {
      "callsub": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.mintPoa",
      "op": "callsub mintPoa",
      "defined_out": [
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0"
      ]
    },
    "276": {
      "op": "intc_1 // 0",
      "stack_out": [
        "mintedAsset#0",
        "0"
      ]
    },
    "277": {
      "op": "bytec_0 // \"totalAttendees\"",
      "stack_out": [
        "mintedAsset#0",
        "0",
        "\"totalAttendees\""
      ]
    },
    "278": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "279": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0"
      ]
    },
    "280": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "281": {
      "op": "+",
      "defined_out": [
        "mintedAsset#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "tmp%3#0"
      ]
    },
    "282": {
      "op": "bytec_0 // \"totalAttendees\"",
      "stack_out": [
        "mintedAsset#0",
        "tmp%3#0",
        "\"totalAttendees\""
      ]
    },
    "283": {
      "op": "swap",
      "stack_out": [
        "mintedAsset#0",
        "\"totalAttendees\"",
        "tmp%3#0"
      ]
    },
    "284": {
      "op": "app_global_put",
      "stack_out": [
        "mintedAsset#0"
      ]
    },
    "285": {
      "op": "txn Sender",
      "defined_out": [
        "mintedAsset#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "287": {
      "op": "box_len",
      "defined_out": [
        "_id#0",
        "hasClaimed#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "_id#0",
        "hasClaimed#0"
      ]
    },
    "288": {
      "op": "bury 1",
      "stack_out": [
        "mintedAsset#0",
        "hasClaimed#0"
      ]
    },
    "290": {
      "op": "!",
      "defined_out": [
        "mintedAsset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "tmp%4#0"
      ]
    },
    "291": {
      "error": "Already claimed POA",
      "op": "assert // Already claimed POA",
      "stack_out": [
        "mintedAsset#0"
      ]
    },
    "292": {
      "op": "txn Sender",
      "defined_out": [
        "mintedAsset#0",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "294": {
      "op": "swap",
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "mintedAsset#0"
      ]
    },
    "295": {
      "op": "itob",
      "defined_out": [
        "reinterpret_bytes[32]%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0",
        "tmp%5#0"
      ]
    },
    "296": {
      "op": "box_put",
      "stack_out": []
    },
    "297": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "298": {
      "op": "return",
      "stack_out": []
    },
    "299": {
      "subroutine": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.confirmAttendanceWithBox[routing]",
      "params": {},
      "block": "confirmAttendanceWithBox",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "300": {
      "op": "bytec_0 // \"totalAttendees\"",
      "defined_out": [
        "\"totalAttendees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalAttendees\""
      ]
    },
    "301": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "302": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "303": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "304": {
      "op": "bytec_1 // \"maxAttendees\"",
      "defined_out": [
        "\"maxAttendees\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"maxAttendees\""
      ]
    },
    "305": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "306": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "307": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "308": {
      "error": "Max attendees reached",
      "op": "assert // Max attendees reached",
      "stack_out": []
    },
    "309": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "311": {
      "callsub": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.mintPoa",
      "op": "callsub mintPoa",
      "defined_out": [
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0"
      ]
    },
    "314": {
      "op": "intc_1 // 0",
      "stack_out": [
        "mintedAsset#0",
        "0"
      ]
    },
    "315": {
      "op": "bytec_0 // \"totalAttendees\"",
      "stack_out": [
        "mintedAsset#0",
        "0",
        "\"totalAttendees\""
      ]
    },
    "316": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "317": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0"
      ]
    },
    "318": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "319": {
      "op": "+",
      "defined_out": [
        "mintedAsset#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "tmp%3#0"
      ]
    },
    "320": {
      "op": "bytec_0 // \"totalAttendees\"",
      "stack_out": [
        "mintedAsset#0",
        "tmp%3#0",
        "\"totalAttendees\""
      ]
    },
    "321": {
      "op": "swap",
      "stack_out": [
        "mintedAsset#0",
        "\"totalAttendees\"",
        "tmp%3#0"
      ]
    },
    "322": {
      "op": "app_global_put",
      "stack_out": [
        "mintedAsset#0"
      ]
    },
    "323": {
      "op": "txn Sender",
      "defined_out": [
        "box#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "box#0"
      ]
    },
    "325": {
      "op": "dup",
      "defined_out": [
        "box#0",
        "box#0 (copy)",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "box#0",
        "box#0 (copy)"
      ]
    },
    "326": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "box#0",
        "hasClaimed#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "box#0",
        "_%0#0",
        "hasClaimed#0"
      ]
    },
    "327": {
      "op": "bury 1",
      "stack_out": [
        "mintedAsset#0",
        "box#0",
        "hasClaimed#0"
      ]
    },
    "329": {
      "op": "!",
      "defined_out": [
        "box#0",
        "mintedAsset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "box#0",
        "tmp%4#0"
      ]
    },
    "330": {
      "error": "Already claimed POA",
      "op": "assert // Already claimed POA",
      "stack_out": [
        "mintedAsset#0",
        "box#0"
      ]
    },
    "331": {
      "op": "swap",
      "stack_out": [
        "box#0",
        "mintedAsset#0"
      ]
    },
    "332": {
      "op": "itob",
      "defined_out": [
        "box#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box#0",
        "encoded_value%0#0"
      ]
    },
    "333": {
      "op": "box_put",
      "stack_out": []
    },
    "334": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "335": {
      "op": "return",
      "stack_out": []
    },
    "336": {
      "subroutine": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.confirmAttendanceWithBoxRef[routing]",
      "params": {},
      "block": "confirmAttendanceWithBoxRef",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "337": {
      "op": "bytec_0 // \"totalAttendees\"",
      "defined_out": [
        "\"totalAttendees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalAttendees\""
      ]
    },
    "338": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "339": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "340": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "341": {
      "op": "bytec_1 // \"maxAttendees\"",
      "defined_out": [
        "\"maxAttendees\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"maxAttendees\""
      ]
    },
    "342": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "343": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "344": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "345": {
      "error": "Max attendees reached",
      "op": "assert // Max attendees reached",
      "stack_out": []
    },
    "346": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "348": {
      "callsub": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.mintPoa",
      "op": "callsub mintPoa",
      "defined_out": [
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0"
      ]
    },
    "351": {
      "op": "intc_1 // 0",
      "stack_out": [
        "mintedAsset#0",
        "0"
      ]
    },
    "352": {
      "op": "bytec_0 // \"totalAttendees\"",
      "stack_out": [
        "mintedAsset#0",
        "0",
        "\"totalAttendees\""
      ]
    },
    "353": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "354": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0"
      ]
    },
    "355": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "356": {
      "op": "+",
      "defined_out": [
        "mintedAsset#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "tmp%3#0"
      ]
    },
    "357": {
      "op": "bytec_0 // \"totalAttendees\"",
      "stack_out": [
        "mintedAsset#0",
        "tmp%3#0",
        "\"totalAttendees\""
      ]
    },
    "358": {
      "op": "swap",
      "stack_out": [
        "mintedAsset#0",
        "\"totalAttendees\"",
        "tmp%3#0"
      ]
    },
    "359": {
      "op": "app_global_put",
      "stack_out": [
        "mintedAsset#0"
      ]
    },
    "360": {
      "op": "txn Sender",
      "defined_out": [
        "boxRef#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "boxRef#0"
      ]
    },
    "362": {
      "op": "dup",
      "defined_out": [
        "boxRef#0",
        "boxRef#0 (copy)",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "boxRef#0",
        "boxRef#0 (copy)"
      ]
    },
    "363": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "boxRef#0",
        "hasClaimed#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "boxRef#0",
        "_%0#0",
        "hasClaimed#0"
      ]
    },
    "364": {
      "op": "bury 1",
      "stack_out": [
        "mintedAsset#0",
        "boxRef#0",
        "hasClaimed#0"
      ]
    },
    "366": {
      "op": "!",
      "defined_out": [
        "boxRef#0",
        "mintedAsset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "boxRef#0",
        "tmp%4#0"
      ]
    },
    "367": {
      "error": "Already claimed POA",
      "op": "assert // Already claimed POA",
      "stack_out": [
        "mintedAsset#0",
        "boxRef#0"
      ]
    },
    "368": {
      "op": "swap",
      "stack_out": [
        "boxRef#0",
        "mintedAsset#0"
      ]
    },
    "369": {
      "op": "itob",
      "defined_out": [
        "boxRef#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "boxRef#0",
        "tmp%5#0"
      ]
    },
    "370": {
      "op": "dig 1",
      "stack_out": [
        "boxRef#0",
        "tmp%5#0",
        "boxRef#0 (copy)"
      ]
    },
    "372": {
      "op": "box_del",
      "defined_out": [
        "boxRef#0",
        "tmp%5#0",
        "{box_del}"
      ],
      "stack_out": [
        "boxRef#0",
        "tmp%5#0",
        "{box_del}"
      ]
    },
    "373": {
      "op": "pop",
      "stack_out": [
        "boxRef#0",
        "tmp%5#0"
      ]
    },
    "374": {
      "op": "box_put",
      "stack_out": []
    },
    "375": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "376": {
      "op": "return",
      "stack_out": []
    },
    "377": {
      "subroutine": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.confirmAttendanceWithBoxMap[routing]",
      "params": {},
      "block": "confirmAttendanceWithBoxMap",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "378": {
      "op": "bytec_0 // \"totalAttendees\"",
      "defined_out": [
        "\"totalAttendees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalAttendees\""
      ]
    },
    "379": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "380": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "381": {
      "op": "intc_1 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "382": {
      "op": "bytec_1 // \"maxAttendees\"",
      "defined_out": [
        "\"maxAttendees\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"maxAttendees\""
      ]
    },
    "383": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "384": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "385": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "386": {
      "error": "Max attendees reached",
      "op": "assert // Max attendees reached",
      "stack_out": []
    },
    "387": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "389": {
      "callsub": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.mintPoa",
      "op": "callsub mintPoa",
      "defined_out": [
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0"
      ]
    },
    "392": {
      "op": "intc_1 // 0",
      "stack_out": [
        "mintedAsset#0",
        "0"
      ]
    },
    "393": {
      "op": "bytec_0 // \"totalAttendees\"",
      "stack_out": [
        "mintedAsset#0",
        "0",
        "\"totalAttendees\""
      ]
    },
    "394": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "395": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0"
      ]
    },
    "396": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "397": {
      "op": "+",
      "defined_out": [
        "mintedAsset#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "tmp%3#0"
      ]
    },
    "398": {
      "op": "bytec_0 // \"totalAttendees\"",
      "stack_out": [
        "mintedAsset#0",
        "tmp%3#0",
        "\"totalAttendees\""
      ]
    },
    "399": {
      "op": "swap",
      "stack_out": [
        "mintedAsset#0",
        "\"totalAttendees\"",
        "tmp%3#0"
      ]
    },
    "400": {
      "op": "app_global_put",
      "stack_out": [
        "mintedAsset#0"
      ]
    },
    "401": {
      "op": "bytec_2 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "\"boxMap\""
      ]
    },
    "402": {
      "op": "txn Sender",
      "defined_out": [
        "\"boxMap\"",
        "mintedAsset#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "\"boxMap\"",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "404": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "box_prefixed_key%0#0"
      ]
    },
    "405": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "hasClaimed#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "_%0#0",
        "hasClaimed#0"
      ]
    },
    "406": {
      "op": "bury 1",
      "stack_out": [
        "mintedAsset#0",
        "hasClaimed#0"
      ]
    },
    "408": {
      "op": "!",
      "defined_out": [
        "mintedAsset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "tmp%4#0"
      ]
    },
    "409": {
      "error": "Already claimed POA",
      "op": "assert // Already claimed POA",
      "stack_out": [
        "mintedAsset#0"
      ]
    },
    "410": {
      "op": "bytec_2 // \"boxMap\"",
      "stack_out": [
        "mintedAsset#0",
        "\"boxMap\""
      ]
    },
    "411": {
      "op": "txn Sender",
      "defined_out": [
        "\"boxMap\"",
        "mintedAsset#0",
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "\"boxMap\"",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "413": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%1#0",
        "mintedAsset#0"
      ],
      "stack_out": [
        "mintedAsset#0",
        "box_prefixed_key%1#0"
      ]
    },
    "414": {
      "op": "swap",
      "stack_out": [
        "box_prefixed_key%1#0",
        "mintedAsset#0"
      ]
    },
    "415": {
      "op": "itob",
      "defined_out": [
        "box_prefixed_key%1#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%1#0",
        "encoded_value%0#0"
      ]
    },
    "416": {
      "op": "box_put",
      "stack_out": []
    },
    "417": {
      "op": "intc_0 // 1",
      "stack_out": [
        "1"
      ]
    },
    "418": {
      "op": "return",
      "stack_out": []
    },
    "419": {
      "subroutine": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.getPoaId[routing]",
      "params": {},
      "block": "getPoaId",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "421": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "poaId#0"
      ],
      "stack_out": [
        "poaId#0",
        "exists#0"
      ]
    },
    "422": {
      "error": "POA not found",
      "op": "assert // POA not found",
      "stack_out": [
        "poaId#0"
      ]
    },
    "423": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "424": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "425": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "426": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "427": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "428": {
      "op": "log",
      "stack_out": []
    },
    "429": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "430": {
      "op": "return",
      "stack_out": []
    },
    "431": {
      "subroutine": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.getPoaIdWithBox[routing]",
      "params": {},
      "block": "getPoaIdWithBox",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "box#0"
      ],
      "stack_out": [
        "box#0"
      ]
    },
    "433": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "exists#0"
      ]
    },
    "434": {
      "op": "swap",
      "stack_out": [
        "exists#0",
        "maybe_value%0#0"
      ]
    },
    "435": {
      "op": "btoi",
      "defined_out": [
        "exists#0",
        "poaId#0"
      ],
      "stack_out": [
        "exists#0",
        "poaId#0"
      ]
    },
    "436": {
      "op": "swap",
      "stack_out": [
        "poaId#0",
        "exists#0"
      ]
    },
    "437": {
      "error": "POA not found",
      "op": "assert // POA not found",
      "stack_out": [
        "poaId#0"
      ]
    },
    "438": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "439": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "440": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "441": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "442": {
      "op": "log",
      "stack_out": []
    },
    "443": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "444": {
      "op": "return",
      "stack_out": []
    },
    "445": {
      "subroutine": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.getPoaIdWithBoxRef[routing]",
      "params": {},
      "block": "getPoaIdWithBoxRef",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "boxRef#0"
      ],
      "stack_out": [
        "boxRef#0"
      ]
    },
    "447": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "poaId#0"
      ],
      "stack_out": [
        "poaId#0",
        "exists#0"
      ]
    },
    "448": {
      "error": "POA not found",
      "op": "assert // POA not found",
      "stack_out": [
        "poaId#0"
      ]
    },
    "449": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "450": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "451": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "452": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "453": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "454": {
      "op": "log",
      "stack_out": []
    },
    "455": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "456": {
      "op": "return",
      "stack_out": []
    },
    "457": {
      "subroutine": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.getPoaIdWithBoxMap[routing]",
      "params": {},
      "block": "getPoaIdWithBoxMap",
      "stack_in": [],
      "op": "bytec_2 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\""
      ],
      "stack_out": [
        "\"boxMap\""
      ]
    },
    "458": {
      "op": "txn Sender",
      "defined_out": [
        "\"boxMap\"",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "\"boxMap\"",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "460": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "461": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "exists#0"
      ]
    },
    "462": {
      "op": "swap",
      "stack_out": [
        "exists#0",
        "maybe_value%0#0"
      ]
    },
    "463": {
      "op": "btoi",
      "defined_out": [
        "exists#0",
        "poaId#0"
      ],
      "stack_out": [
        "exists#0",
        "poaId#0"
      ]
    },
    "464": {
      "op": "swap",
      "stack_out": [
        "poaId#0",
        "exists#0"
      ]
    },
    "465": {
      "error": "POA not found",
      "op": "assert // POA not found",
      "stack_out": [
        "poaId#0"
      ]
    },
    "466": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "467": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "468": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "469": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "470": {
      "op": "log",
      "stack_out": []
    },
    "471": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "472": {
      "op": "return",
      "stack_out": []
    },
    "473": {
      "subroutine": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.claimPoa[routing]",
      "params": {},
      "block": "claimPoa",
      "stack_in": [],
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "474": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0"
      ]
    },
    "476": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "1"
      ]
    },
    "477": {
      "op": "-",
      "defined_out": [
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0"
      ]
    },
    "478": {
      "op": "dupn 2",
      "defined_out": [
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ]
    },
    "480": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0",
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0",
        "gtxn_type%0#0"
      ]
    },
    "482": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_type%0#0",
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "483": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0",
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "484": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0"
      ]
    },
    "485": {
      "op": "txn Sender",
      "defined_out": [
        "optInTxn#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "487": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "optInTxn#0",
        "poaId#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0",
        "poaId#0",
        "exists#0"
      ]
    },
    "488": {
      "error": "POA not found, attendance validation failed!",
      "op": "assert // POA not found, attendance validation failed!",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0",
        "poaId#0"
      ]
    },
    "489": {
      "op": "dig 1",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0",
        "poaId#0",
        "optInTxn#0 (copy)"
      ]
    },
    "491": {
      "op": "gtxns XferAsset",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0",
        "poaId#0",
        "tmp%0#0"
      ]
    },
    "493": {
      "op": "dup",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0",
        "poaId#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "494": {
      "op": "cover 3",
      "defined_out": [
        "optInTxn#0",
        "poaId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "poaId#0",
        "tmp%0#0"
      ]
    },
    "496": {
      "op": "swap",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%0#0",
        "poaId#0"
      ]
    },
    "497": {
      "op": "btoi",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "498": {
      "op": "==",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%2#0"
      ]
    },
    "499": {
      "error": "POA ID mismatch",
      "op": "assert // POA ID mismatch",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0"
      ]
    },
    "500": {
      "op": "dup",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ]
    },
    "501": {
      "op": "gtxns Fee",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%3#0"
      ]
    },
    "503": {
      "op": "!",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%4#0"
      ]
    },
    "504": {
      "error": "We got you covered for free!",
      "op": "assert // We got you covered for free!",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0"
      ]
    },
    "505": {
      "op": "dup",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ]
    },
    "506": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%5#0"
      ]
    },
    "508": {
      "op": "!",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%6#0"
      ]
    },
    "509": {
      "op": "assert",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0"
      ]
    },
    "510": {
      "op": "dup",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ]
    },
    "511": {
      "op": "gtxns Sender",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%7#0"
      ]
    },
    "513": {
      "op": "swap",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "optInTxn#0"
      ]
    },
    "514": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "516": {
      "op": "dup",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%8#0"
      ]
    },
    "517": {
      "op": "cover 2",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "519": {
      "op": "==",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "520": {
      "op": "bz claimPoa_bool_false@4",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "523": {
      "op": "dup"
    },
    "524": {
      "op": "txn Sender",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%8#0",
        "tmp%11#0"
      ]
    },
    "526": {
      "op": "==",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%12#0"
      ]
    },
    "527": {
      "op": "bz claimPoa_bool_false@4",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "530": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "and_result%0#0"
      ]
    },
    "531": {
      "error": "Opt-in transaction sender and receiver must be the same",
      "block": "claimPoa_bool_merge@5",
      "stack_in": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "and_result%0#0"
      ],
      "op": "assert // Opt-in transaction sender and receiver must be the same",
      "defined_out": [],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "532": {
      "op": "dig 2",
      "defined_out": [
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "optInTxn#0"
      ]
    },
    "534": {
      "op": "dup",
      "defined_out": [
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ]
    },
    "535": {
      "op": "gtxns AssetCloseTo",
      "defined_out": [
        "optInTxn#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "optInTxn#0",
        "tmp%13#0"
      ]
    },
    "537": {
      "op": "swap",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%13#0",
        "optInTxn#0"
      ]
    },
    "538": {
      "op": "gtxns RekeyTo",
      "defined_out": [
        "optInTxn#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "540": {
      "op": "dup",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%14#0"
      ]
    },
    "541": {
      "op": "bury 6",
      "defined_out": [
        "optInTxn#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "543": {
      "op": "==",
      "defined_out": [
        "optInTxn#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%15#0"
      ]
    },
    "544": {
      "op": "bz claimPoa_bool_false@8",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "547": {
      "op": "dig 3",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%14#0"
      ]
    },
    "549": {
      "op": "global ZeroAddress",
      "defined_out": [
        "optInTxn#0",
        "tmp%14#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%17#0"
      ]
    },
    "551": {
      "op": "==",
      "defined_out": [
        "optInTxn#0",
        "tmp%14#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%18#0"
      ]
    },
    "552": {
      "op": "bz claimPoa_bool_false@8",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "555": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%1#0",
        "optInTxn#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "and_result%1#0"
      ]
    },
    "556": {
      "error": "Opt-in transaction close to must be zero address",
      "block": "claimPoa_bool_merge@9",
      "stack_in": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "and_result%1#0"
      ],
      "op": "assert // Opt-in transaction close to must be zero address",
      "defined_out": [],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "557": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%19#0"
      ]
    },
    "559": {
      "op": "dig 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%19#0",
        "tmp%0#0"
      ]
    },
    "561": {
      "callsub": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.sendPoa",
      "op": "callsub sendPoa",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "564": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "1"
      ]
    },
    "565": {
      "op": "return",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "566": {
      "block": "claimPoa_bool_false@8",
      "stack_in": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "and_result%1#0"
      ]
    },
    "567": {
      "op": "b claimPoa_bool_merge@9"
    },
    "570": {
      "block": "claimPoa_bool_false@4",
      "stack_in": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "and_result%0#0"
      ]
    },
    "571": {
      "op": "b claimPoa_bool_merge@5"
    },
    "574": {
      "subroutine": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.claimPoaWithBox[routing]",
      "params": {},
      "block": "claimPoaWithBox",
      "stack_in": [],
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "575": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0"
      ]
    },
    "577": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "1"
      ]
    },
    "578": {
      "op": "-",
      "defined_out": [
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0"
      ]
    },
    "579": {
      "op": "dupn 2",
      "defined_out": [
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ]
    },
    "581": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0",
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "gtxn_type%0#0"
      ]
    },
    "583": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_type%0#0",
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "584": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0",
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "585": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0"
      ]
    },
    "586": {
      "op": "txn Sender",
      "defined_out": [
        "box#0",
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "box#0"
      ]
    },
    "588": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "maybe_value%0#0",
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "maybe_value%0#0",
        "exists#0"
      ]
    },
    "589": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "exists#0",
        "maybe_value%0#0"
      ]
    },
    "590": {
      "op": "btoi",
      "defined_out": [
        "exists#0",
        "optInTxn#0",
        "poaId#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "exists#0",
        "poaId#0"
      ]
    },
    "591": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "poaId#0",
        "exists#0"
      ]
    },
    "592": {
      "error": "POA not found, attendance validation failed!",
      "op": "assert // POA not found, attendance validation failed!",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "poaId#0"
      ]
    },
    "593": {
      "op": "dig 1",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "poaId#0",
        "optInTxn#0 (copy)"
      ]
    },
    "595": {
      "op": "gtxns XferAsset",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "poaId#0",
        "tmp%0#0"
      ]
    },
    "597": {
      "op": "dup",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "poaId#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "598": {
      "op": "cover 3",
      "defined_out": [
        "optInTxn#0",
        "poaId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "poaId#0",
        "tmp%0#0"
      ]
    },
    "600": {
      "op": "==",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%1#0"
      ]
    },
    "601": {
      "error": "POA ID mismatch",
      "op": "assert // POA ID mismatch",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0"
      ]
    },
    "602": {
      "op": "dup",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ]
    },
    "603": {
      "op": "gtxns Fee",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%2#0"
      ]
    },
    "605": {
      "op": "!",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%3#0"
      ]
    },
    "606": {
      "error": "We got you covered for free!",
      "op": "assert // We got you covered for free!",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0"
      ]
    },
    "607": {
      "op": "dup",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ]
    },
    "608": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%4#0"
      ]
    },
    "610": {
      "op": "!",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%5#0"
      ]
    },
    "611": {
      "op": "assert",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0"
      ]
    },
    "612": {
      "op": "dup",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ]
    },
    "613": {
      "op": "gtxns Sender",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%6#0"
      ]
    },
    "615": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%6#0",
        "optInTxn#0"
      ]
    },
    "616": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "618": {
      "op": "dup",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%7#0"
      ]
    },
    "619": {
      "op": "cover 2",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "621": {
      "op": "==",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "622": {
      "op": "bz claimPoaWithBox_bool_false@4",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "625": {
      "op": "dup"
    },
    "626": {
      "op": "txn Sender",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%7#0",
        "tmp%10#0"
      ]
    },
    "628": {
      "op": "==",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%11#0"
      ]
    },
    "629": {
      "op": "bz claimPoaWithBox_bool_false@4",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "632": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "and_result%0#0"
      ]
    },
    "633": {
      "error": "Opt-in transaction sender and receiver must be the same",
      "block": "claimPoaWithBox_bool_merge@5",
      "stack_in": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "and_result%0#0"
      ],
      "op": "assert // Opt-in transaction sender and receiver must be the same",
      "defined_out": [],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "634": {
      "op": "dig 2",
      "defined_out": [
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "optInTxn#0"
      ]
    },
    "636": {
      "op": "dup",
      "defined_out": [
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ]
    },
    "637": {
      "op": "gtxns AssetCloseTo",
      "defined_out": [
        "optInTxn#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "optInTxn#0",
        "tmp%12#0"
      ]
    },
    "639": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%12#0",
        "optInTxn#0"
      ]
    },
    "640": {
      "op": "gtxns RekeyTo",
      "defined_out": [
        "optInTxn#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "642": {
      "op": "dup",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%13#0"
      ]
    },
    "643": {
      "op": "bury 6",
      "defined_out": [
        "optInTxn#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "645": {
      "op": "==",
      "defined_out": [
        "optInTxn#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%14#0"
      ]
    },
    "646": {
      "op": "bz claimPoaWithBox_bool_false@8",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "649": {
      "op": "dig 3",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%13#0"
      ]
    },
    "651": {
      "op": "global ZeroAddress",
      "defined_out": [
        "optInTxn#0",
        "tmp%13#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%13#0",
        "tmp%16#0"
      ]
    },
    "653": {
      "op": "==",
      "defined_out": [
        "optInTxn#0",
        "tmp%13#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%17#0"
      ]
    },
    "654": {
      "op": "bz claimPoaWithBox_bool_false@8",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "657": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%1#0",
        "optInTxn#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "and_result%1#0"
      ]
    },
    "658": {
      "error": "Opt-in transaction close to must be zero address",
      "block": "claimPoaWithBox_bool_merge@9",
      "stack_in": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "and_result%1#0"
      ],
      "op": "assert // Opt-in transaction close to must be zero address",
      "defined_out": [],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "659": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%18#0"
      ]
    },
    "661": {
      "op": "dig 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%18#0",
        "tmp%0#0"
      ]
    },
    "663": {
      "callsub": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.sendPoa",
      "op": "callsub sendPoa",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "666": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "1"
      ]
    },
    "667": {
      "op": "return",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "668": {
      "block": "claimPoaWithBox_bool_false@8",
      "stack_in": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "and_result%1#0"
      ]
    },
    "669": {
      "op": "b claimPoaWithBox_bool_merge@9"
    },
    "672": {
      "block": "claimPoaWithBox_bool_false@4",
      "stack_in": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "and_result%0#0"
      ]
    },
    "673": {
      "op": "b claimPoaWithBox_bool_merge@5"
    },
    "676": {
      "subroutine": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.claimPoaWithBoxRef[routing]",
      "params": {},
      "block": "claimPoaWithBoxRef",
      "stack_in": [],
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "677": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0"
      ]
    },
    "679": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%0#0",
        "1"
      ]
    },
    "680": {
      "op": "-",
      "defined_out": [
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0"
      ]
    },
    "681": {
      "op": "dupn 2",
      "defined_out": [
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ]
    },
    "683": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0",
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0",
        "gtxn_type%0#0"
      ]
    },
    "685": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_type%0#0",
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "686": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0",
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "687": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0"
      ]
    },
    "688": {
      "op": "txn Sender",
      "defined_out": [
        "boxRef#0",
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0",
        "boxRef#0"
      ]
    },
    "690": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "optInTxn#0",
        "poaId#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0",
        "poaId#0",
        "exists#0"
      ]
    },
    "691": {
      "error": "POA not found, attendance validation failed!",
      "op": "assert // POA not found, attendance validation failed!",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0",
        "poaId#0"
      ]
    },
    "692": {
      "op": "dig 1",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0",
        "poaId#0",
        "optInTxn#0 (copy)"
      ]
    },
    "694": {
      "op": "gtxns XferAsset",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0",
        "poaId#0",
        "tmp%0#0"
      ]
    },
    "696": {
      "op": "dup",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "optInTxn#0",
        "poaId#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "697": {
      "op": "cover 3",
      "defined_out": [
        "optInTxn#0",
        "poaId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "poaId#0",
        "tmp%0#0"
      ]
    },
    "699": {
      "op": "swap",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%0#0",
        "poaId#0"
      ]
    },
    "700": {
      "op": "btoi",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "701": {
      "op": "==",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%2#0"
      ]
    },
    "702": {
      "error": "POA ID mismatch",
      "op": "assert // POA ID mismatch",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0"
      ]
    },
    "703": {
      "op": "dup",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ]
    },
    "704": {
      "op": "gtxns Fee",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%3#0"
      ]
    },
    "706": {
      "op": "!",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%4#0"
      ]
    },
    "707": {
      "error": "We got you covered for free!",
      "op": "assert // We got you covered for free!",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0"
      ]
    },
    "708": {
      "op": "dup",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ]
    },
    "709": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%5#0"
      ]
    },
    "711": {
      "op": "!",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%6#0"
      ]
    },
    "712": {
      "op": "assert",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0"
      ]
    },
    "713": {
      "op": "dup",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ]
    },
    "714": {
      "op": "gtxns Sender",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%7#0"
      ]
    },
    "716": {
      "op": "swap",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "optInTxn#0"
      ]
    },
    "717": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "719": {
      "op": "dup",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%8#0"
      ]
    },
    "720": {
      "op": "cover 2",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "722": {
      "op": "==",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "723": {
      "op": "bz claimPoaWithBoxRef_bool_false@4",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "726": {
      "op": "dup"
    },
    "727": {
      "op": "txn Sender",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%8#0",
        "tmp%11#0"
      ]
    },
    "729": {
      "op": "==",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%12#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%12#0"
      ]
    },
    "730": {
      "op": "bz claimPoaWithBoxRef_bool_false@4",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "733": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "and_result%0#0"
      ]
    },
    "734": {
      "error": "Opt-in transaction sender and receiver must be the same",
      "block": "claimPoaWithBoxRef_bool_merge@5",
      "stack_in": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "and_result%0#0"
      ],
      "op": "assert // Opt-in transaction sender and receiver must be the same",
      "defined_out": [],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "735": {
      "op": "dig 2",
      "defined_out": [
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "optInTxn#0"
      ]
    },
    "737": {
      "op": "dup",
      "defined_out": [
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ]
    },
    "738": {
      "op": "gtxns AssetCloseTo",
      "defined_out": [
        "optInTxn#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "optInTxn#0",
        "tmp%13#0"
      ]
    },
    "740": {
      "op": "swap",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%13#0",
        "optInTxn#0"
      ]
    },
    "741": {
      "op": "gtxns RekeyTo",
      "defined_out": [
        "optInTxn#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "743": {
      "op": "dup",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%14#0"
      ]
    },
    "744": {
      "op": "bury 6",
      "defined_out": [
        "optInTxn#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "746": {
      "op": "==",
      "defined_out": [
        "optInTxn#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%15#0"
      ]
    },
    "747": {
      "op": "bz claimPoaWithBoxRef_bool_false@8",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "750": {
      "op": "dig 3",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%14#0"
      ]
    },
    "752": {
      "op": "global ZeroAddress",
      "defined_out": [
        "optInTxn#0",
        "tmp%14#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%14#0",
        "tmp%17#0"
      ]
    },
    "754": {
      "op": "==",
      "defined_out": [
        "optInTxn#0",
        "tmp%14#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%18#0"
      ]
    },
    "755": {
      "op": "bz claimPoaWithBoxRef_bool_false@8",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "758": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%1#0",
        "optInTxn#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "and_result%1#0"
      ]
    },
    "759": {
      "error": "Opt-in transaction close to must be zero address",
      "block": "claimPoaWithBoxRef_bool_merge@9",
      "stack_in": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "and_result%1#0"
      ],
      "op": "assert // Opt-in transaction close to must be zero address",
      "defined_out": [],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "760": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%19#0"
      ]
    },
    "762": {
      "op": "dig 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%19#0",
        "tmp%0#0"
      ]
    },
    "764": {
      "callsub": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.sendPoa",
      "op": "callsub sendPoa",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "767": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "1"
      ]
    },
    "768": {
      "op": "return",
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "769": {
      "block": "claimPoaWithBoxRef_bool_false@8",
      "stack_in": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "and_result%1#0"
      ]
    },
    "770": {
      "op": "b claimPoaWithBoxRef_bool_merge@9"
    },
    "773": {
      "block": "claimPoaWithBoxRef_bool_false@4",
      "stack_in": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%8#0",
        "and_result%0#0"
      ]
    },
    "774": {
      "op": "b claimPoaWithBoxRef_bool_merge@5"
    },
    "777": {
      "subroutine": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.claimPoaWithBoxMap[routing]",
      "params": {},
      "block": "claimPoaWithBoxMap",
      "stack_in": [],
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "778": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0"
      ]
    },
    "780": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%0#0",
        "1"
      ]
    },
    "781": {
      "op": "-",
      "defined_out": [
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0"
      ]
    },
    "782": {
      "op": "dupn 2",
      "defined_out": [
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ]
    },
    "784": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0",
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "gtxn_type%0#0"
      ]
    },
    "786": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_type%0#0",
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "787": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0",
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "788": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0"
      ]
    },
    "789": {
      "op": "bytec_2 // \"boxMap\"",
      "defined_out": [
        "\"boxMap\"",
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "\"boxMap\""
      ]
    },
    "790": {
      "op": "txn Sender",
      "defined_out": [
        "\"boxMap\"",
        "optInTxn#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "\"boxMap\"",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "792": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0",
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "box_prefixed_key%0#0"
      ]
    },
    "793": {
      "op": "box_get",
      "defined_out": [
        "exists#0",
        "maybe_value%0#0",
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "maybe_value%0#0",
        "exists#0"
      ]
    },
    "794": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "exists#0",
        "maybe_value%0#0"
      ]
    },
    "795": {
      "op": "btoi",
      "defined_out": [
        "exists#0",
        "optInTxn#0",
        "poaId#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "exists#0",
        "poaId#0"
      ]
    },
    "796": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "poaId#0",
        "exists#0"
      ]
    },
    "797": {
      "error": "POA not found, attendance validation failed!",
      "op": "assert // POA not found, attendance validation failed!",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "poaId#0"
      ]
    },
    "798": {
      "op": "dig 1",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "poaId#0",
        "optInTxn#0 (copy)"
      ]
    },
    "800": {
      "op": "gtxns XferAsset",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "poaId#0",
        "tmp%0#0"
      ]
    },
    "802": {
      "op": "dup",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "optInTxn#0",
        "poaId#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "803": {
      "op": "cover 3",
      "defined_out": [
        "optInTxn#0",
        "poaId#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "poaId#0",
        "tmp%0#0"
      ]
    },
    "805": {
      "op": "==",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%1#0"
      ]
    },
    "806": {
      "error": "POA ID mismatch",
      "op": "assert // POA ID mismatch",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0"
      ]
    },
    "807": {
      "op": "dup",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ]
    },
    "808": {
      "op": "gtxns Fee",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%2#0"
      ]
    },
    "810": {
      "op": "!",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%3#0"
      ]
    },
    "811": {
      "error": "We got you covered for free!",
      "op": "assert // We got you covered for free!",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0"
      ]
    },
    "812": {
      "op": "dup",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ]
    },
    "813": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%4#0"
      ]
    },
    "815": {
      "op": "!",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%5#0"
      ]
    },
    "816": {
      "op": "assert",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0"
      ]
    },
    "817": {
      "op": "dup",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ]
    },
    "818": {
      "op": "gtxns Sender",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "optInTxn#0",
        "tmp%6#0"
      ]
    },
    "820": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%6#0",
        "optInTxn#0"
      ]
    },
    "821": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "823": {
      "op": "dup",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%7#0"
      ]
    },
    "824": {
      "op": "cover 2",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "826": {
      "op": "==",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "827": {
      "op": "bz claimPoaWithBoxMap_bool_false@4",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "830": {
      "op": "dup"
    },
    "831": {
      "op": "txn Sender",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%7#0",
        "tmp%10#0"
      ]
    },
    "833": {
      "op": "==",
      "defined_out": [
        "optInTxn#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%11#0"
      ]
    },
    "834": {
      "op": "bz claimPoaWithBoxMap_bool_false@4",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "837": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%0#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "and_result%0#0"
      ]
    },
    "838": {
      "error": "Opt-in transaction sender and receiver must be the same",
      "block": "claimPoaWithBoxMap_bool_merge@5",
      "stack_in": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "and_result%0#0"
      ],
      "op": "assert // Opt-in transaction sender and receiver must be the same",
      "defined_out": [],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "839": {
      "op": "dig 2",
      "defined_out": [
        "optInTxn#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "optInTxn#0"
      ]
    },
    "841": {
      "op": "dup",
      "defined_out": [
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "optInTxn#0",
        "optInTxn#0 (copy)"
      ]
    },
    "842": {
      "op": "gtxns AssetCloseTo",
      "defined_out": [
        "optInTxn#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "optInTxn#0",
        "tmp%12#0"
      ]
    },
    "844": {
      "op": "swap",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%12#0",
        "optInTxn#0"
      ]
    },
    "845": {
      "op": "gtxns RekeyTo",
      "defined_out": [
        "optInTxn#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "847": {
      "op": "dup",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%13#0"
      ]
    },
    "848": {
      "op": "bury 6",
      "defined_out": [
        "optInTxn#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "850": {
      "op": "==",
      "defined_out": [
        "optInTxn#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%14#0"
      ]
    },
    "851": {
      "op": "bz claimPoaWithBoxMap_bool_false@8",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "854": {
      "op": "dig 3",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%13#0"
      ]
    },
    "856": {
      "op": "global ZeroAddress",
      "defined_out": [
        "optInTxn#0",
        "tmp%13#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%13#0",
        "tmp%16#0"
      ]
    },
    "858": {
      "op": "==",
      "defined_out": [
        "optInTxn#0",
        "tmp%13#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%17#0"
      ]
    },
    "859": {
      "op": "bz claimPoaWithBoxMap_bool_false@8",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "862": {
      "op": "intc_0 // 1",
      "defined_out": [
        "and_result%1#0",
        "optInTxn#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "and_result%1#0"
      ]
    },
    "863": {
      "error": "Opt-in transaction close to must be zero address",
      "block": "claimPoaWithBoxMap_bool_merge@9",
      "stack_in": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "and_result%1#0"
      ],
      "op": "assert // Opt-in transaction close to must be zero address",
      "defined_out": [],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "864": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%18#0"
      ]
    },
    "866": {
      "op": "dig 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "tmp%18#0",
        "tmp%0#0"
      ]
    },
    "868": {
      "callsub": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.sendPoa",
      "op": "callsub sendPoa",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "871": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "1"
      ]
    },
    "872": {
      "op": "return",
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "873": {
      "block": "claimPoaWithBoxMap_bool_false@8",
      "stack_in": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%1#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "and_result%1#0"
      ]
    },
    "874": {
      "op": "b claimPoaWithBoxMap_bool_merge@9"
    },
    "877": {
      "block": "claimPoaWithBoxMap_bool_false@4",
      "stack_in": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "op": "intc_1 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "optInTxn#0",
        "tmp%0#0",
        "tmp%7#0",
        "and_result%0#0"
      ]
    },
    "878": {
      "op": "b claimPoaWithBoxMap_bool_merge@5"
    },
    "881": {
      "subroutine": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.mintPoa",
      "params": {
        "claimer#0": "bytes"
      },
      "block": "mintPoa",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "884": {
      "block": "mintPoa_while_top@3",
      "stack_in": [],
      "op": "pushint 10010 // 10010",
      "defined_out": [
        "10010"
      ],
      "stack_out": [
        "10010"
      ]
    },
    "887": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "10010",
        "tmp%1#1"
      ],
      "stack_out": [
        "10010",
        "tmp%1#1"
      ]
    },
    "889": {
      "op": ">",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "890": {
      "op": "bz mintPoa_after_while@8",
      "stack_out": []
    },
    "893": {
      "op": "itxn_begin"
    },
    "894": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "appl"
      ]
    },
    "896": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "898": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication"
      ],
      "stack_out": [
        "DeleteApplication"
      ]
    },
    "900": {
      "op": "itxn_field OnCompletion",
      "stack_out": []
    },
    "902": {
      "op": "bytec 5 // 0x068101",
      "defined_out": [
        "0x068101"
      ],
      "stack_out": [
        "0x068101"
      ]
    },
    "904": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": []
    },
    "906": {
      "op": "bytec 5 // 0x068101",
      "stack_out": [
        "0x068101"
      ]
    },
    "908": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": []
    },
    "910": {
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "912": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "914": {
      "op": "itxn_submit"
    },
    "915": {
      "op": "b mintPoa_while_top@3"
    },
    "918": {
      "block": "mintPoa_after_while@8",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "919": {
      "op": "bytec_0 // \"totalAttendees\"",
      "defined_out": [
        "\"totalAttendees\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalAttendees\""
      ]
    },
    "920": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "921": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "922": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "923": {
      "op": "pushbytes \"AlgoKit POA #\"",
      "defined_out": [
        "\"AlgoKit POA #\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"AlgoKit POA #\""
      ]
    },
    "938": {
      "op": "swap",
      "stack_out": [
        "\"AlgoKit POA #\"",
        "tmp%0#0"
      ]
    },
    "939": {
      "op": "concat",
      "defined_out": [
        "assetName#0"
      ],
      "stack_out": [
        "assetName#0"
      ]
    },
    "940": {
      "op": "itxn_begin"
    },
    "941": {
      "op": "intc_1 // 0",
      "stack_out": [
        "assetName#0",
        "0"
      ]
    },
    "942": {
      "op": "bytec 4 // \"assetUrl\"",
      "defined_out": [
        "\"assetUrl\"",
        "0",
        "assetName#0"
      ],
      "stack_out": [
        "assetName#0",
        "0",
        "\"assetUrl\""
      ]
    },
    "944": {
      "op": "app_global_get_ex",
      "defined_out": [
        "assetName#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "assetName#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "945": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "assetName#0",
        "maybe_value%1#0"
      ]
    },
    "946": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetName#0",
        "claimer#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "assetName#0",
        "maybe_value%1#0",
        "claimer#0 (copy)"
      ]
    },
    "948": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "assetName#0",
        "maybe_value%1#0"
      ]
    },
    "950": {
      "op": "itxn_field ConfigAssetURL",
      "stack_out": [
        "assetName#0"
      ]
    },
    "952": {
      "op": "intc_1 // 0",
      "stack_out": [
        "assetName#0",
        "0"
      ]
    },
    "953": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "assetName#0"
      ]
    },
    "955": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "assetName#0"
      ],
      "stack_out": [
        "assetName#0",
        "1"
      ]
    },
    "956": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "assetName#0"
      ]
    },
    "958": {
      "op": "pushbytes \"POA\"",
      "defined_out": [
        "\"POA\"",
        "assetName#0"
      ],
      "stack_out": [
        "assetName#0",
        "\"POA\""
      ]
    },
    "963": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "assetName#0"
      ]
    },
    "965": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "967": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "969": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "971": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "972": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "974": {
      "op": "itxn_submit"
    },
    "975": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "977": {
      "retsub": true,
      "op": "retsub"
    },
    "978": {
      "subroutine": "contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.sendPoa",
      "params": {
        "receiver#0": "bytes",
        "asset#0": "uint64"
      },
      "block": "sendPoa",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "981": {
      "op": "itxn_begin"
    },
    "982": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "984": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "1"
      ]
    },
    "985": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "987": {
      "op": "frame_dig -2",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "receiver#0 (copy)"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "receiver#0 (copy)"
      ]
    },
    "989": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "991": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "993": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "995": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "997": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "998": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1000": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1001": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1003": {
      "op": "itxn_submit"
    },
    "1004": {
      "retsub": true,
      "op": "retsub"
    }
  }
}