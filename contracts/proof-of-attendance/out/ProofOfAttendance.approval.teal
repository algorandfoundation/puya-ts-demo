#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 4
    bytecblock "totalAttendees" "maxAttendees" "boxMap" 0x151f7c75 "assetUrl" 0x068101
    txn ApplicationID
    bnz main_after_if_else@2
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:25
    // maxAttendees = GlobalState({ initialValue: Uint64(30) });
    bytec_1 // "maxAttendees"
    pushint 30 // 30
    app_global_put
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:26
    // assetUrl = GlobalState({
    bytec 4 // "assetUrl"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:27
    // initialValue: "ipfs://QmW5vERkgeJJtSY1YQdcWU6gsHCZCyLFtM1oT9uyy2WGm8",
    pushbytes "ipfs://QmW5vERkgeJJtSY1YQdcWU6gsHCZCyLFtM1oT9uyy2WGm8"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:26-28
    // assetUrl = GlobalState({
    //   initialValue: "ipfs://QmW5vERkgeJJtSY1YQdcWU6gsHCZCyLFtM1oT9uyy2WGm8",
    // });
    app_global_put
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:29
    // totalAttendees = GlobalState({ initialValue: Uint64(0) });
    bytec_0 // "totalAttendees"
    intc_1 // 0
    app_global_put

main_after_if_else@2:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:24
    // export default class ProofOfAttendance extends arc4.Contract {
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    bz main_create_NoOp@18
    pushbytess 0x09527352 0x34ef747b 0x7732a900 0x8485a195 0x7f8cf0ab 0xdd617d7d 0x9b487a80 0xba796fea 0x7de97566 0x83dd375f 0x765a33da 0x2c7a818c // method "confirmAttendance()void", method "confirmAttendanceWithBox()void", method "confirmAttendanceWithBoxRef()void", method "confirmAttendanceWithBoxMap()void", method "getPoaId()uint64", method "getPoaIdWithBox()uint64", method "getPoaIdWithBoxRef()uint64", method "getPoaIdWithBoxMap()uint64", method "claimPoa(axfer)void", method "claimPoaWithBox(axfer)void", method "claimPoaWithBoxRef(axfer)void", method "claimPoaWithBoxMap(axfer)void"
    txna ApplicationArgs 0
    match confirmAttendance confirmAttendanceWithBox confirmAttendanceWithBoxRef confirmAttendanceWithBoxMap getPoaId getPoaIdWithBox getPoaIdWithBoxRef getPoaIdWithBoxMap claimPoa claimPoaWithBox claimPoaWithBoxRef claimPoaWithBoxMap
    err

main_create_NoOp@18:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:24
    // export default class ProofOfAttendance extends arc4.Contract {
    pushbytes 0x1bcde52d // method "init(uint64)void"
    txna ApplicationArgs 0
    match init
    err


// contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.init[routing]() -> void:
init:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:32
    // @arc4.abimethod({ onCreate: "require" })
    txna ApplicationArgs 1
    btoi
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:34
    // assert(Txn.sender === Global.creatorAddress, "Only creator can initialize");
    txn Sender
    global CreatorAddress
    ==
    assert // Only creator can initialize
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:25
    // maxAttendees = GlobalState({ initialValue: Uint64(30) });
    bytec_1 // "maxAttendees"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:35
    // this.maxAttendees.value = maxAttendees;
    swap
    app_global_put
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:32
    // @arc4.abimethod({ onCreate: "require" })
    intc_0 // 1
    return


// contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.confirmAttendance[routing]() -> void:
confirmAttendance:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:41
    // this.totalAttendees.value < this.maxAttendees.value,
    intc_1 // 0
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:29
    // totalAttendees = GlobalState({ initialValue: Uint64(0) });
    bytec_0 // "totalAttendees"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:41
    // this.totalAttendees.value < this.maxAttendees.value,
    app_global_get_ex
    assert // check GlobalState exists
    intc_1 // 0
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:25
    // maxAttendees = GlobalState({ initialValue: Uint64(30) });
    bytec_1 // "maxAttendees"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:41
    // this.totalAttendees.value < this.maxAttendees.value,
    app_global_get_ex
    assert // check GlobalState exists
    <
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:40-43
    // assert(
    //   this.totalAttendees.value < this.maxAttendees.value,
    //   "Max attendees reached",
    // );
    assert // Max attendees reached
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:45
    // const mintedAsset = this.mintPoa(Txn.sender);
    txn Sender
    callsub mintPoa
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:46
    // this.totalAttendees.value += 1;
    intc_1 // 0
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:29
    // totalAttendees = GlobalState({ initialValue: Uint64(0) });
    bytec_0 // "totalAttendees"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:46
    // this.totalAttendees.value += 1;
    app_global_get_ex
    assert // check GlobalState exists
    intc_0 // 1
    +
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:29
    // totalAttendees = GlobalState({ initialValue: Uint64(0) });
    bytec_0 // "totalAttendees"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:46
    // this.totalAttendees.value += 1;
    swap
    app_global_put
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:48
    // const [_id, hasClaimed] = op.Box.get(Txn.sender.bytes);
    txn Sender
    box_len
    bury 1
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:49
    // assert(!hasClaimed, "Already claimed POA");
    !
    assert // Already claimed POA
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:51
    // op.Box.put(Txn.sender.bytes, op.itob(mintedAsset.id));
    txn Sender
    swap
    itob
    box_put
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:38
    // @arc4.abimethod()
    intc_0 // 1
    return


// contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.confirmAttendanceWithBox[routing]() -> void:
confirmAttendanceWithBox:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:57
    // this.totalAttendees.value < this.maxAttendees.value,
    intc_1 // 0
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:29
    // totalAttendees = GlobalState({ initialValue: Uint64(0) });
    bytec_0 // "totalAttendees"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:57
    // this.totalAttendees.value < this.maxAttendees.value,
    app_global_get_ex
    assert // check GlobalState exists
    intc_1 // 0
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:25
    // maxAttendees = GlobalState({ initialValue: Uint64(30) });
    bytec_1 // "maxAttendees"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:57
    // this.totalAttendees.value < this.maxAttendees.value,
    app_global_get_ex
    assert // check GlobalState exists
    <
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:56-59
    // assert(
    //   this.totalAttendees.value < this.maxAttendees.value,
    //   "Max attendees reached",
    // );
    assert // Max attendees reached
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:61
    // const mintedAsset = this.mintPoa(Txn.sender);
    txn Sender
    callsub mintPoa
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:62
    // this.totalAttendees.value += 1;
    intc_1 // 0
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:29
    // totalAttendees = GlobalState({ initialValue: Uint64(0) });
    bytec_0 // "totalAttendees"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:62
    // this.totalAttendees.value += 1;
    app_global_get_ex
    assert // check GlobalState exists
    intc_0 // 1
    +
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:29
    // totalAttendees = GlobalState({ initialValue: Uint64(0) });
    bytec_0 // "totalAttendees"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:62
    // this.totalAttendees.value += 1;
    swap
    app_global_put
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:64
    // const box = Box<uint64>({ key: Txn.sender.bytes });
    txn Sender
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:65
    // const hasClaimed = box.exists;
    dup
    box_len
    bury 1
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:66
    // assert(!hasClaimed, "Already claimed POA");
    !
    assert // Already claimed POA
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:68
    // box.value = mintedAsset.id;
    swap
    itob
    box_put
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:54
    // @arc4.abimethod()
    intc_0 // 1
    return


// contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.confirmAttendanceWithBoxRef[routing]() -> void:
confirmAttendanceWithBoxRef:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:74
    // this.totalAttendees.value < this.maxAttendees.value,
    intc_1 // 0
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:29
    // totalAttendees = GlobalState({ initialValue: Uint64(0) });
    bytec_0 // "totalAttendees"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:74
    // this.totalAttendees.value < this.maxAttendees.value,
    app_global_get_ex
    assert // check GlobalState exists
    intc_1 // 0
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:25
    // maxAttendees = GlobalState({ initialValue: Uint64(30) });
    bytec_1 // "maxAttendees"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:74
    // this.totalAttendees.value < this.maxAttendees.value,
    app_global_get_ex
    assert // check GlobalState exists
    <
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:73-76
    // assert(
    //   this.totalAttendees.value < this.maxAttendees.value,
    //   "Max attendees reached",
    // );
    assert // Max attendees reached
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:78
    // const mintedAsset = this.mintPoa(Txn.sender);
    txn Sender
    callsub mintPoa
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:79
    // this.totalAttendees.value += 1;
    intc_1 // 0
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:29
    // totalAttendees = GlobalState({ initialValue: Uint64(0) });
    bytec_0 // "totalAttendees"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:79
    // this.totalAttendees.value += 1;
    app_global_get_ex
    assert // check GlobalState exists
    intc_0 // 1
    +
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:29
    // totalAttendees = GlobalState({ initialValue: Uint64(0) });
    bytec_0 // "totalAttendees"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:79
    // this.totalAttendees.value += 1;
    swap
    app_global_put
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:81
    // const boxRef = Box<bytes>({ key: Txn.sender.bytes });
    txn Sender
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:82
    // const hasClaimed = boxRef.exists;
    dup
    box_len
    bury 1
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:83
    // assert(!hasClaimed, "Already claimed POA");
    !
    assert // Already claimed POA
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:85
    // boxRef.value = op.itob(mintedAsset.id);
    swap
    itob
    dig 1
    box_del
    pop
    box_put
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:71
    // @arc4.abimethod()
    intc_0 // 1
    return


// contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.confirmAttendanceWithBoxMap[routing]() -> void:
confirmAttendanceWithBoxMap:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:91
    // this.totalAttendees.value < this.maxAttendees.value,
    intc_1 // 0
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:29
    // totalAttendees = GlobalState({ initialValue: Uint64(0) });
    bytec_0 // "totalAttendees"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:91
    // this.totalAttendees.value < this.maxAttendees.value,
    app_global_get_ex
    assert // check GlobalState exists
    intc_1 // 0
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:25
    // maxAttendees = GlobalState({ initialValue: Uint64(30) });
    bytec_1 // "maxAttendees"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:91
    // this.totalAttendees.value < this.maxAttendees.value,
    app_global_get_ex
    assert // check GlobalState exists
    <
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:90-93
    // assert(
    //   this.totalAttendees.value < this.maxAttendees.value,
    //   "Max attendees reached",
    // );
    assert // Max attendees reached
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:95
    // const mintedAsset = this.mintPoa(Txn.sender);
    txn Sender
    callsub mintPoa
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:96
    // this.totalAttendees.value += 1;
    intc_1 // 0
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:29
    // totalAttendees = GlobalState({ initialValue: Uint64(0) });
    bytec_0 // "totalAttendees"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:96
    // this.totalAttendees.value += 1;
    app_global_get_ex
    assert // check GlobalState exists
    intc_0 // 1
    +
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:29
    // totalAttendees = GlobalState({ initialValue: Uint64(0) });
    bytec_0 // "totalAttendees"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:96
    // this.totalAttendees.value += 1;
    swap
    app_global_put
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:30
    // boxMap = BoxMap<bytes, uint64>({ keyPrefix: "boxMap" });
    bytec_2 // "boxMap"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:98
    // const hasClaimed = this.boxMap(Txn.sender.bytes).exists;
    txn Sender
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:30
    // boxMap = BoxMap<bytes, uint64>({ keyPrefix: "boxMap" });
    concat
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:98
    // const hasClaimed = this.boxMap(Txn.sender.bytes).exists;
    box_len
    bury 1
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:99
    // assert(!hasClaimed, "Already claimed POA");
    !
    assert // Already claimed POA
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:30
    // boxMap = BoxMap<bytes, uint64>({ keyPrefix: "boxMap" });
    bytec_2 // "boxMap"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:101
    // this.boxMap(Txn.sender.bytes).value = mintedAsset.id;
    txn Sender
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:30
    // boxMap = BoxMap<bytes, uint64>({ keyPrefix: "boxMap" });
    concat
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:101
    // this.boxMap(Txn.sender.bytes).value = mintedAsset.id;
    swap
    itob
    box_put
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:88
    // @arc4.abimethod()
    intc_0 // 1
    return


// contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.getPoaId[routing]() -> void:
getPoaId:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:105
    // const [poaId, exists] = op.Box.get(Txn.sender.bytes);
    txn Sender
    box_get
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:106
    // assert(exists, "POA not found");
    assert // POA not found
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:107
    // return op.btoi(poaId);
    btoi
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:103
    // @arc4.abimethod({ readonly: true })
    itob
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.getPoaIdWithBox[routing]() -> void:
getPoaIdWithBox:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:112
    // const box = Box<uint64>({ key: Txn.sender.bytes });
    txn Sender
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:113
    // const [poaId, exists] = box.maybe();
    box_get
    swap
    btoi
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:114
    // assert(exists, "POA not found");
    swap
    assert // POA not found
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:110
    // @arc4.abimethod({ readonly: true })
    itob
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.getPoaIdWithBoxRef[routing]() -> void:
getPoaIdWithBoxRef:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:120
    // const boxRef = Box<bytes>({ key: Txn.sender.bytes });
    txn Sender
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:121
    // const [poaId, exists] = boxRef.maybe();
    box_get
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:122
    // assert(exists, "POA not found");
    assert // POA not found
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:123
    // return op.btoi(poaId);
    btoi
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:118
    // @arc4.abimethod({ readonly: true })
    itob
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.getPoaIdWithBoxMap[routing]() -> void:
getPoaIdWithBoxMap:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:30
    // boxMap = BoxMap<bytes, uint64>({ keyPrefix: "boxMap" });
    bytec_2 // "boxMap"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:128
    // const [poaId, exists] = this.boxMap(Txn.sender.bytes).maybe();
    txn Sender
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:30
    // boxMap = BoxMap<bytes, uint64>({ keyPrefix: "boxMap" });
    concat
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:128
    // const [poaId, exists] = this.boxMap(Txn.sender.bytes).maybe();
    box_get
    swap
    btoi
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:129
    // assert(exists, "POA not found");
    swap
    assert // POA not found
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:126
    // @arc4.abimethod({ readonly: true })
    itob
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.claimPoa[routing]() -> void:
claimPoa:
    intc_1 // 0
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:133
    // @arc4.abimethod()
    txn GroupIndex
    intc_0 // 1
    -
    dupn 2
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:135
    // const [poaId, exists] = op.Box.get(Txn.sender.bytes);
    txn Sender
    box_get
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:136
    // assert(exists, "POA not found, attendance validation failed!");
    assert // POA not found, attendance validation failed!
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:137
    // assert(optInTxn.xferAsset.id === op.btoi(poaId), "POA ID mismatch");
    dig 1
    gtxns XferAsset
    dup
    cover 3
    swap
    btoi
    ==
    assert // POA ID mismatch
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:138
    // assert(optInTxn.fee === 0, "We got you covered for free!");
    dup
    gtxns Fee
    !
    assert // We got you covered for free!
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:139
    // assert(optInTxn.assetAmount === 0);
    dup
    gtxns AssetAmount
    !
    assert
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:141
    // optInTxn.sender === optInTxn.assetReceiver &&
    dup
    gtxns Sender
    swap
    gtxns AssetReceiver
    dup
    cover 2
    ==
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:141-142
    // optInTxn.sender === optInTxn.assetReceiver &&
    //   optInTxn.assetReceiver === Txn.sender,
    bz claimPoa_bool_false@4
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:142
    // optInTxn.assetReceiver === Txn.sender,
    dup
    txn Sender
    ==
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:141-142
    // optInTxn.sender === optInTxn.assetReceiver &&
    //   optInTxn.assetReceiver === Txn.sender,
    bz claimPoa_bool_false@4
    intc_0 // 1

claimPoa_bool_merge@5:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:140-144
    // assert(
    //   optInTxn.sender === optInTxn.assetReceiver &&
    //     optInTxn.assetReceiver === Txn.sender,
    //   "Opt-in transaction sender and receiver must be the same",
    // );
    assert // Opt-in transaction sender and receiver must be the same
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:146
    // optInTxn.assetCloseTo === optInTxn.rekeyTo &&
    dig 2
    dup
    gtxns AssetCloseTo
    swap
    gtxns RekeyTo
    dup
    bury 6
    ==
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:146-147
    // optInTxn.assetCloseTo === optInTxn.rekeyTo &&
    //   optInTxn.rekeyTo === Global.zeroAddress,
    bz claimPoa_bool_false@8
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:147
    // optInTxn.rekeyTo === Global.zeroAddress,
    dig 3
    global ZeroAddress
    ==
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:146-147
    // optInTxn.assetCloseTo === optInTxn.rekeyTo &&
    //   optInTxn.rekeyTo === Global.zeroAddress,
    bz claimPoa_bool_false@8
    intc_0 // 1

claimPoa_bool_merge@9:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:145-149
    // assert(
    //   optInTxn.assetCloseTo === optInTxn.rekeyTo &&
    //     optInTxn.rekeyTo === Global.zeroAddress,
    //   "Opt-in transaction close to must be zero address",
    // );
    assert // Opt-in transaction close to must be zero address
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:151
    // this.sendPoa(Txn.sender, optInTxn.xferAsset);
    txn Sender
    dig 2
    callsub sendPoa
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:133
    // @arc4.abimethod()
    intc_0 // 1
    return

claimPoa_bool_false@8:
    intc_1 // 0
    b claimPoa_bool_merge@9

claimPoa_bool_false@4:
    intc_1 // 0
    b claimPoa_bool_merge@5


// contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.claimPoaWithBox[routing]() -> void:
claimPoaWithBox:
    intc_1 // 0
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:154
    // @arc4.abimethod()
    txn GroupIndex
    intc_0 // 1
    -
    dupn 2
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:156
    // const box = Box<uint64>({ key: Txn.sender.bytes });
    txn Sender
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:157
    // const [poaId, exists] = box.maybe();
    box_get
    swap
    btoi
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:158
    // assert(exists, "POA not found, attendance validation failed!");
    swap
    assert // POA not found, attendance validation failed!
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:159
    // assert(optInTxn.xferAsset.id === poaId, "POA ID mismatch");
    dig 1
    gtxns XferAsset
    dup
    cover 3
    ==
    assert // POA ID mismatch
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:160
    // assert(optInTxn.fee === 0, "We got you covered for free!");
    dup
    gtxns Fee
    !
    assert // We got you covered for free!
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:161
    // assert(optInTxn.assetAmount === 0);
    dup
    gtxns AssetAmount
    !
    assert
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:163
    // optInTxn.sender === optInTxn.assetReceiver &&
    dup
    gtxns Sender
    swap
    gtxns AssetReceiver
    dup
    cover 2
    ==
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:163-164
    // optInTxn.sender === optInTxn.assetReceiver &&
    //   optInTxn.assetReceiver === Txn.sender,
    bz claimPoaWithBox_bool_false@4
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:164
    // optInTxn.assetReceiver === Txn.sender,
    dup
    txn Sender
    ==
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:163-164
    // optInTxn.sender === optInTxn.assetReceiver &&
    //   optInTxn.assetReceiver === Txn.sender,
    bz claimPoaWithBox_bool_false@4
    intc_0 // 1

claimPoaWithBox_bool_merge@5:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:162-166
    // assert(
    //   optInTxn.sender === optInTxn.assetReceiver &&
    //     optInTxn.assetReceiver === Txn.sender,
    //   "Opt-in transaction sender and receiver must be the same",
    // );
    assert // Opt-in transaction sender and receiver must be the same
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:168
    // optInTxn.assetCloseTo === optInTxn.rekeyTo &&
    dig 2
    dup
    gtxns AssetCloseTo
    swap
    gtxns RekeyTo
    dup
    bury 6
    ==
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:168-169
    // optInTxn.assetCloseTo === optInTxn.rekeyTo &&
    //   optInTxn.rekeyTo === Global.zeroAddress,
    bz claimPoaWithBox_bool_false@8
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:169
    // optInTxn.rekeyTo === Global.zeroAddress,
    dig 3
    global ZeroAddress
    ==
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:168-169
    // optInTxn.assetCloseTo === optInTxn.rekeyTo &&
    //   optInTxn.rekeyTo === Global.zeroAddress,
    bz claimPoaWithBox_bool_false@8
    intc_0 // 1

claimPoaWithBox_bool_merge@9:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:167-171
    // assert(
    //   optInTxn.assetCloseTo === optInTxn.rekeyTo &&
    //     optInTxn.rekeyTo === Global.zeroAddress,
    //   "Opt-in transaction close to must be zero address",
    // );
    assert // Opt-in transaction close to must be zero address
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:173
    // this.sendPoa(Txn.sender, optInTxn.xferAsset);
    txn Sender
    dig 2
    callsub sendPoa
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:154
    // @arc4.abimethod()
    intc_0 // 1
    return

claimPoaWithBox_bool_false@8:
    intc_1 // 0
    b claimPoaWithBox_bool_merge@9

claimPoaWithBox_bool_false@4:
    intc_1 // 0
    b claimPoaWithBox_bool_merge@5


// contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.claimPoaWithBoxRef[routing]() -> void:
claimPoaWithBoxRef:
    intc_1 // 0
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:176
    // @arc4.abimethod()
    txn GroupIndex
    intc_0 // 1
    -
    dupn 2
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:178
    // const boxRef = Box<bytes>({ key: Txn.sender.bytes });
    txn Sender
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:179
    // const [poaId, exists] = boxRef.maybe();
    box_get
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:180
    // assert(exists, "POA not found, attendance validation failed!");
    assert // POA not found, attendance validation failed!
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:181
    // assert(optInTxn.xferAsset.id === op.btoi(poaId), "POA ID mismatch");
    dig 1
    gtxns XferAsset
    dup
    cover 3
    swap
    btoi
    ==
    assert // POA ID mismatch
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:182
    // assert(optInTxn.fee === 0, "We got you covered for free!");
    dup
    gtxns Fee
    !
    assert // We got you covered for free!
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:183
    // assert(optInTxn.assetAmount === 0);
    dup
    gtxns AssetAmount
    !
    assert
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:185
    // optInTxn.sender === optInTxn.assetReceiver &&
    dup
    gtxns Sender
    swap
    gtxns AssetReceiver
    dup
    cover 2
    ==
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:185-186
    // optInTxn.sender === optInTxn.assetReceiver &&
    //   optInTxn.assetReceiver === Txn.sender,
    bz claimPoaWithBoxRef_bool_false@4
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:186
    // optInTxn.assetReceiver === Txn.sender,
    dup
    txn Sender
    ==
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:185-186
    // optInTxn.sender === optInTxn.assetReceiver &&
    //   optInTxn.assetReceiver === Txn.sender,
    bz claimPoaWithBoxRef_bool_false@4
    intc_0 // 1

claimPoaWithBoxRef_bool_merge@5:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:184-188
    // assert(
    //   optInTxn.sender === optInTxn.assetReceiver &&
    //     optInTxn.assetReceiver === Txn.sender,
    //   "Opt-in transaction sender and receiver must be the same",
    // );
    assert // Opt-in transaction sender and receiver must be the same
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:190
    // optInTxn.assetCloseTo === optInTxn.rekeyTo &&
    dig 2
    dup
    gtxns AssetCloseTo
    swap
    gtxns RekeyTo
    dup
    bury 6
    ==
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:190-191
    // optInTxn.assetCloseTo === optInTxn.rekeyTo &&
    //   optInTxn.rekeyTo === Global.zeroAddress,
    bz claimPoaWithBoxRef_bool_false@8
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:191
    // optInTxn.rekeyTo === Global.zeroAddress,
    dig 3
    global ZeroAddress
    ==
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:190-191
    // optInTxn.assetCloseTo === optInTxn.rekeyTo &&
    //   optInTxn.rekeyTo === Global.zeroAddress,
    bz claimPoaWithBoxRef_bool_false@8
    intc_0 // 1

claimPoaWithBoxRef_bool_merge@9:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:189-193
    // assert(
    //   optInTxn.assetCloseTo === optInTxn.rekeyTo &&
    //     optInTxn.rekeyTo === Global.zeroAddress,
    //   "Opt-in transaction close to must be zero address",
    // );
    assert // Opt-in transaction close to must be zero address
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:195
    // this.sendPoa(Txn.sender, optInTxn.xferAsset);
    txn Sender
    dig 2
    callsub sendPoa
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:176
    // @arc4.abimethod()
    intc_0 // 1
    return

claimPoaWithBoxRef_bool_false@8:
    intc_1 // 0
    b claimPoaWithBoxRef_bool_merge@9

claimPoaWithBoxRef_bool_false@4:
    intc_1 // 0
    b claimPoaWithBoxRef_bool_merge@5


// contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.claimPoaWithBoxMap[routing]() -> void:
claimPoaWithBoxMap:
    intc_1 // 0
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:198
    // @arc4.abimethod()
    txn GroupIndex
    intc_0 // 1
    -
    dupn 2
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:30
    // boxMap = BoxMap<bytes, uint64>({ keyPrefix: "boxMap" });
    bytec_2 // "boxMap"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:200
    // const [poaId, exists] = this.boxMap(Txn.sender.bytes).maybe();
    txn Sender
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:30
    // boxMap = BoxMap<bytes, uint64>({ keyPrefix: "boxMap" });
    concat
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:200
    // const [poaId, exists] = this.boxMap(Txn.sender.bytes).maybe();
    box_get
    swap
    btoi
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:201
    // assert(exists, "POA not found, attendance validation failed!");
    swap
    assert // POA not found, attendance validation failed!
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:202
    // assert(optInTxn.xferAsset.id === poaId, "POA ID mismatch");
    dig 1
    gtxns XferAsset
    dup
    cover 3
    ==
    assert // POA ID mismatch
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:203
    // assert(optInTxn.fee === 0, "We got you covered for free!");
    dup
    gtxns Fee
    !
    assert // We got you covered for free!
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:204
    // assert(optInTxn.assetAmount === 0);
    dup
    gtxns AssetAmount
    !
    assert
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:206
    // optInTxn.sender === optInTxn.assetReceiver &&
    dup
    gtxns Sender
    swap
    gtxns AssetReceiver
    dup
    cover 2
    ==
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:206-207
    // optInTxn.sender === optInTxn.assetReceiver &&
    //   optInTxn.assetReceiver === Txn.sender,
    bz claimPoaWithBoxMap_bool_false@4
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:207
    // optInTxn.assetReceiver === Txn.sender,
    dup
    txn Sender
    ==
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:206-207
    // optInTxn.sender === optInTxn.assetReceiver &&
    //   optInTxn.assetReceiver === Txn.sender,
    bz claimPoaWithBoxMap_bool_false@4
    intc_0 // 1

claimPoaWithBoxMap_bool_merge@5:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:205-209
    // assert(
    //   optInTxn.sender === optInTxn.assetReceiver &&
    //     optInTxn.assetReceiver === Txn.sender,
    //   "Opt-in transaction sender and receiver must be the same",
    // );
    assert // Opt-in transaction sender and receiver must be the same
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:211
    // optInTxn.assetCloseTo === optInTxn.rekeyTo &&
    dig 2
    dup
    gtxns AssetCloseTo
    swap
    gtxns RekeyTo
    dup
    bury 6
    ==
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:211-212
    // optInTxn.assetCloseTo === optInTxn.rekeyTo &&
    //   optInTxn.rekeyTo === Global.zeroAddress,
    bz claimPoaWithBoxMap_bool_false@8
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:212
    // optInTxn.rekeyTo === Global.zeroAddress,
    dig 3
    global ZeroAddress
    ==
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:211-212
    // optInTxn.assetCloseTo === optInTxn.rekeyTo &&
    //   optInTxn.rekeyTo === Global.zeroAddress,
    bz claimPoaWithBoxMap_bool_false@8
    intc_0 // 1

claimPoaWithBoxMap_bool_merge@9:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:210-214
    // assert(
    //   optInTxn.assetCloseTo === optInTxn.rekeyTo &&
    //     optInTxn.rekeyTo === Global.zeroAddress,
    //   "Opt-in transaction close to must be zero address",
    // );
    assert // Opt-in transaction close to must be zero address
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:216
    // this.sendPoa(Txn.sender, optInTxn.xferAsset);
    txn Sender
    dig 2
    callsub sendPoa
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:198
    // @arc4.abimethod()
    intc_0 // 1
    return

claimPoaWithBoxMap_bool_false@8:
    intc_1 // 0
    b claimPoaWithBoxMap_bool_merge@9

claimPoaWithBoxMap_bool_false@4:
    intc_1 // 0
    b claimPoaWithBoxMap_bool_merge@5


// contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.mintPoa(claimer: bytes) -> uint64:
mintPoa:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:219
    // private mintPoa(claimer: Account): Asset {
    proto 1 1

mintPoa_while_top@3:
    pushint 10010 // 10010
    global OpcodeBudget
    >
    bz mintPoa_after_while@8
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec 5 // 0x068101
    itxn_field ApprovalProgram
    bytec 5 // 0x068101
    itxn_field ClearStateProgram
    global MinTxnFee
    itxn_field Fee
    itxn_submit
    b mintPoa_while_top@3

mintPoa_after_while@8:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:222
    // op.itob(this.totalAttendees.value),
    intc_1 // 0
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:29
    // totalAttendees = GlobalState({ initialValue: Uint64(0) });
    bytec_0 // "totalAttendees"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:222
    // op.itob(this.totalAttendees.value),
    app_global_get_ex
    assert // check GlobalState exists
    itob
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:221
    // const assetName = Bytes("AlgoKit POA #").concat(
    pushbytes "AlgoKit POA #"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:221-223
    // const assetName = Bytes("AlgoKit POA #").concat(
    //   op.itob(this.totalAttendees.value),
    // );
    swap
    concat
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:224-233
    // return itxn
    //   .assetConfig({
    //     assetName: assetName,
    //     unitName: "POA",
    //     total: 1,
    //     decimals: 0,
    //     url: this.assetUrl.value,
    //     manager: claimer,
    //   })
    //   .submit().createdAsset;
    itxn_begin
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:230
    // url: this.assetUrl.value,
    intc_1 // 0
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:26
    // assetUrl = GlobalState({
    bytec 4 // "assetUrl"
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:230
    // url: this.assetUrl.value,
    app_global_get_ex
    assert // check GlobalState exists
    frame_dig -1
    itxn_field ConfigAssetManager
    itxn_field ConfigAssetURL
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:229
    // decimals: 0,
    intc_1 // 0
    itxn_field ConfigAssetDecimals
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:228
    // total: 1,
    intc_0 // 1
    itxn_field ConfigAssetTotal
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:227
    // unitName: "POA",
    pushbytes "POA"
    itxn_field ConfigAssetUnitName
    itxn_field ConfigAssetName
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:224-232
    // return itxn
    //   .assetConfig({
    //     assetName: assetName,
    //     unitName: "POA",
    //     total: 1,
    //     decimals: 0,
    //     url: this.assetUrl.value,
    //     manager: claimer,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:224-233
    // return itxn
    //   .assetConfig({
    //     assetName: assetName,
    //     unitName: "POA",
    //     total: 1,
    //     decimals: 0,
    //     url: this.assetUrl.value,
    //     manager: claimer,
    //   })
    //   .submit().createdAsset;
    itxn_submit
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:233
    // .submit().createdAsset;
    itxn CreatedAssetID
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:224-233
    // return itxn
    //   .assetConfig({
    //     assetName: assetName,
    //     unitName: "POA",
    //     total: 1,
    //     decimals: 0,
    //     url: this.assetUrl.value,
    //     manager: claimer,
    //   })
    //   .submit().createdAsset;
    retsub


// contracts/proof-of-attendance/proof-of-attendance.algo.ts::ProofOfAttendance.sendPoa(receiver: bytes, asset: uint64) -> void:
sendPoa:
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:236
    // private sendPoa(receiver: Account, asset: Asset) {
    proto 2 0
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:237-244
    // itxn
    //   .assetTransfer({
    //     xferAsset: asset,
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: receiver,
    //     assetAmount: 1,
    //   })
    //   .submit();
    itxn_begin
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:240
    // sender: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:242
    // assetAmount: 1,
    intc_0 // 1
    itxn_field AssetAmount
    frame_dig -2
    itxn_field AssetReceiver
    itxn_field Sender
    frame_dig -1
    itxn_field XferAsset
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:237-243
    // itxn
    //   .assetTransfer({
    //     xferAsset: asset,
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: receiver,
    //     assetAmount: 1,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // contracts/proof-of-attendance/proof-of-attendance.algo.ts:237-244
    // itxn
    //   .assetTransfer({
    //     xferAsset: asset,
    //     sender: Global.currentApplicationAddress,
    //     assetReceiver: receiver,
    //     assetAmount: 1,
    //   })
    //   .submit();
    itxn_submit
    retsub
