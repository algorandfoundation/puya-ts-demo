#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    // contracts/itxns/itxns.algo.ts:13
    // export class NFTFactory extends Contract {
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    bz main_create_NoOp@6
    pushbytess 0xd2024c73 0xc7e260af // method "createNFT(string,string)uint64", method "transferNFT(uint64,address)void"
    txna ApplicationArgs 0
    match createNFT transferNFT
    err

main_create_NoOp@6:
    // contracts/itxns/itxns.algo.ts:13
    // export class NFTFactory extends Contract {
    pushbytes 0xb8447b36 // method "createApplication()void"
    txna ApplicationArgs 0
    match main_createApplication_route@7
    err

main_createApplication_route@7:
    // contracts/itxns/itxns.algo.ts:14
    // @abimethod({ onCreate: "require" })
    intc_0 // 1
    return


// contracts/itxns/itxns.algo.ts::NFTFactory.createNFT[routing]() -> void:
createNFT:
    // contracts/itxns/itxns.algo.ts:17
    // createNFT(name: string, unitName: string): uint64 {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // contracts/itxns/itxns.algo.ts:18-24
    // return itxn
    //   .assetConfig({
    //     assetName: name,
    //     unitName: unitName,
    //     total: 1,
    //   })
    //   .submit().createdAsset.id;
    itxn_begin
    // contracts/itxns/itxns.algo.ts:22
    // total: 1,
    intc_0 // 1
    itxn_field ConfigAssetTotal
    itxn_field ConfigAssetUnitName
    itxn_field ConfigAssetName
    // contracts/itxns/itxns.algo.ts:18-23
    // return itxn
    //   .assetConfig({
    //     assetName: name,
    //     unitName: unitName,
    //     total: 1,
    //   })
    pushint 3 // 3
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // contracts/itxns/itxns.algo.ts:18-24
    // return itxn
    //   .assetConfig({
    //     assetName: name,
    //     unitName: unitName,
    //     total: 1,
    //   })
    //   .submit().createdAsset.id;
    itxn_submit
    // contracts/itxns/itxns.algo.ts:24
    // .submit().createdAsset.id;
    itxn CreatedAssetID
    // contracts/itxns/itxns.algo.ts:17
    // createNFT(name: string, unitName: string): uint64 {
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return


// contracts/itxns/itxns.algo.ts::NFTFactory.transferNFT[routing]() -> void:
transferNFT:
    // contracts/itxns/itxns.algo.ts:27
    // transferNFT(assetId: uint64, receiver: Address): void {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    // contracts/itxns/itxns.algo.ts:28-34
    // itxn
    //   .assetTransfer({
    //     assetReceiver: receiver.native,
    //     assetAmount: 1,
    //     xferAsset: assetId,
    //   })
    //   .submit();
    itxn_begin
    swap
    itxn_field XferAsset
    // contracts/itxns/itxns.algo.ts:31
    // assetAmount: 1,
    intc_0 // 1
    itxn_field AssetAmount
    itxn_field AssetReceiver
    // contracts/itxns/itxns.algo.ts:28-33
    // itxn
    //   .assetTransfer({
    //     assetReceiver: receiver.native,
    //     assetAmount: 1,
    //     xferAsset: assetId,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // contracts/itxns/itxns.algo.ts:28-34
    // itxn
    //   .assetTransfer({
    //     assetReceiver: receiver.native,
    //     assetAmount: 1,
    //     xferAsset: assetId,
    //   })
    //   .submit();
    itxn_submit
    // contracts/itxns/itxns.algo.ts:27
    // transferNFT(assetId: uint64, receiver: Address): void {
    intc_0 // 1
    return
