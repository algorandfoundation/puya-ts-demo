#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 6
    bytecblock 0xb8447b36 0x151f7c75
    // contracts/itxns/itxns.algo.ts:40
    // export class FactoryCaller extends Contract {
    txn NumAppArgs
    bz main_after_if_else@8
    bytec_0 // method "createApplication()void"
    pushbytes 0x45ded8e0 // method "mintAndGetAsset()uint64"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_mintAndGetAsset_route@4

main_after_if_else@8:
    // contracts/itxns/itxns.algo.ts:40
    // export class FactoryCaller extends Contract {
    intc_0 // 0
    return

main_mintAndGetAsset_route@4:
    // contracts/itxns/itxns.algo.ts:44
    // mintAndGetAsset(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub mintAndGetAsset
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_createApplication_route@3:
    // contracts/itxns/itxns.algo.ts:41
    // @abimethod({ onCreate: "require" })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// contracts/itxns/itxns.algo.ts::FactoryCaller.mintAndGetAsset() -> uint64:
mintAndGetAsset:
    // contracts/itxns/itxns.algo.ts:46-52
    // const factoryApp = itxn
    //   .applicationCall({
    //     appArgs: [methodSelector(NFTFactory.prototype.createApplication)],
    //     approvalProgram: factory.approvalProgram,
    //     clearStateProgram: factory.clearStateProgram,
    //   })
    //   .submit().createdApp;
    itxn_begin
    // contracts/itxns/itxns.algo.ts:45
    // const factory = compile(NFTFactory);
    pushbytes base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CiACAQAxG0EAHIIDBLhEezYE0gJMcwTH4mCvNhoAjgMANwAVAAIjQzEZFEQxGEQ2GgEXNhoCiABIIkMxGRREMRhENhoBVwIANhoCVwIAiAAWFoAEFR98dUxQsCJDMRkURDEYFEQiQ4oCAbEisiKL/7Ili/6yJoEDshAjsgGztDyJigIAsYv+shEishKL/7IUgQSyECOyAbOJ)
    itxn_field ApprovalProgramPages
    // contracts/itxns/itxns.algo.ts:48
    // appArgs: [methodSelector(NFTFactory.prototype.createApplication)],
    bytec_0 // method "createApplication()void"
    itxn_field ApplicationArgs
    // contracts/itxns/itxns.algo.ts:46-51
    // const factoryApp = itxn
    //   .applicationCall({
    //     appArgs: [methodSelector(NFTFactory.prototype.createApplication)],
    //     approvalProgram: factory.approvalProgram,
    //     clearStateProgram: factory.clearStateProgram,
    //   })
    intc_2 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // contracts/itxns/itxns.algo.ts:46-52
    // const factoryApp = itxn
    //   .applicationCall({
    //     appArgs: [methodSelector(NFTFactory.prototype.createApplication)],
    //     approvalProgram: factory.approvalProgram,
    //     clearStateProgram: factory.clearStateProgram,
    //   })
    //   .submit().createdApp;
    itxn_submit
    // contracts/itxns/itxns.algo.ts:52
    // .submit().createdApp;
    itxn CreatedApplicationID
    // contracts/itxns/itxns.algo.ts:54-59
    // itxn
    //   .payment({
    //     amount: 200_000,
    //     receiver: factoryApp.address,
    //   })
    //   .submit();
    itxn_begin
    // contracts/itxns/itxns.algo.ts:57
    // receiver: factoryApp.address,
    dup
    app_params_get AppAddress
    assert // application exists
    itxn_field Receiver
    // contracts/itxns/itxns.algo.ts:56
    // amount: 200_000,
    pushint 200000 // 200000
    itxn_field Amount
    // contracts/itxns/itxns.algo.ts:54-58
    // itxn
    //   .payment({
    //     amount: 200_000,
    //     receiver: factoryApp.address,
    //   })
    intc_1 // 1
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // contracts/itxns/itxns.algo.ts:54-59
    // itxn
    //   .payment({
    //     amount: 200_000,
    //     receiver: factoryApp.address,
    //   })
    //   .submit();
    itxn_submit
    // contracts/itxns/itxns.algo.ts:61-70
    // const createNFTTxn = itxn
    //   .applicationCall({
    //     appArgs: [
    //       methodSelector(NFTFactory.prototype.createNFT),
    //       "My NFT",
    //       "MNFT",
    //     ],
    //     appId: factoryApp,
    //   })
    //   .submit();
    itxn_begin
    dup
    itxn_field ApplicationID
    // contracts/itxns/itxns.algo.ts:64
    // methodSelector(NFTFactory.prototype.createNFT),
    pushbytes 0xd2024c73 // method "createNFT(string,string)uint64"
    itxn_field ApplicationArgs
    // contracts/itxns/itxns.algo.ts:65
    // "My NFT",
    pushbytes "My NFT"
    itxn_field ApplicationArgs
    // contracts/itxns/itxns.algo.ts:66
    // "MNFT",
    pushbytes "MNFT"
    itxn_field ApplicationArgs
    // contracts/itxns/itxns.algo.ts:61-69
    // const createNFTTxn = itxn
    //   .applicationCall({
    //     appArgs: [
    //       methodSelector(NFTFactory.prototype.createNFT),
    //       "My NFT",
    //       "MNFT",
    //     ],
    //     appId: factoryApp,
    //   })
    intc_2 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // contracts/itxns/itxns.algo.ts:61-70
    // const createNFTTxn = itxn
    //   .applicationCall({
    //     appArgs: [
    //       methodSelector(NFTFactory.prototype.createNFT),
    //       "My NFT",
    //       "MNFT",
    //     ],
    //     appId: factoryApp,
    //   })
    //   .submit();
    itxn_submit
    itxn LastLog
    // contracts/itxns/itxns.algo.ts:71
    // const createdAssetId = decodeArc4<uint64>(createNFTTxn.lastLog, "log");
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    // contracts/itxns/itxns.algo.ts:73-79
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetAmount: 0,
    //     xferAsset: createdAssetId,
    //   })
    //   .submit();
    itxn_begin
    // contracts/itxns/itxns.algo.ts:75
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    dig 1
    itxn_field XferAsset
    // contracts/itxns/itxns.algo.ts:76
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    // contracts/itxns/itxns.algo.ts:73-78
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetAmount: 0,
    //     xferAsset: createdAssetId,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // contracts/itxns/itxns.algo.ts:73-79
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetAmount: 0,
    //     xferAsset: createdAssetId,
    //   })
    //   .submit();
    itxn_submit
    // contracts/itxns/itxns.algo.ts:81-90
    // itxn
    //   .applicationCall({
    //     appArgs: [
    //       methodSelector(NFTFactory.prototype.transferNFT),
    //       createdAssetId,
    //       Global.currentApplicationAddress,
    //     ],
    //     appId: factoryApp,
    //   })
    //   .submit();
    itxn_begin
    // contracts/itxns/itxns.algo.ts:84-86
    // methodSelector(NFTFactory.prototype.transferNFT),
    // createdAssetId,
    // Global.currentApplicationAddress,
    dup
    itob
    // contracts/itxns/itxns.algo.ts:86
    // Global.currentApplicationAddress,
    global CurrentApplicationAddress
    uncover 3
    itxn_field ApplicationID
    // contracts/itxns/itxns.algo.ts:84
    // methodSelector(NFTFactory.prototype.transferNFT),
    pushbytes 0xc7e260af // method "transferNFT(uint64,address)void"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // contracts/itxns/itxns.algo.ts:81-89
    // itxn
    //   .applicationCall({
    //     appArgs: [
    //       methodSelector(NFTFactory.prototype.transferNFT),
    //       createdAssetId,
    //       Global.currentApplicationAddress,
    //     ],
    //     appId: factoryApp,
    //   })
    intc_2 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // contracts/itxns/itxns.algo.ts:81-90
    // itxn
    //   .applicationCall({
    //     appArgs: [
    //       methodSelector(NFTFactory.prototype.transferNFT),
    //       createdAssetId,
    //       Global.currentApplicationAddress,
    //     ],
    //     appId: factoryApp,
    //   })
    //   .submit();
    itxn_submit
    // contracts/itxns/itxns.algo.ts:92
    // return createdAssetId;
    retsub
