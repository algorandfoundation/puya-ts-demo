#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 6
    bytecblock 0xb8447b36 0x151f7c75
    // contracts/itxns/itxns.algo.ts:38
    // export class FactoryCaller extends Contract {
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    bz main_create_NoOp@5
    pushbytes 0x45ded8e0 // method "mintAndGetAsset()uint64"
    txna ApplicationArgs 0
    match mintAndGetAsset
    err

main_create_NoOp@5:
    // contracts/itxns/itxns.algo.ts:38
    // export class FactoryCaller extends Contract {
    bytec_0 // method "createApplication()void"
    txna ApplicationArgs 0
    match main_createApplication_route@6
    err

main_createApplication_route@6:
    // contracts/itxns/itxns.algo.ts:39
    // @abimethod({ onCreate: "require" })
    intc_1 // 1
    return


// contracts/itxns/itxns.algo.ts::FactoryCaller.mintAndGetAsset[routing]() -> void:
mintAndGetAsset:
    // contracts/itxns/itxns.algo.ts:45
    // const factoryApp = factory.call.createApplication().itxn.createdApp;
    itxn_begin
    bytec_0 // method "createApplication()void"
    itxn_field ApplicationArgs
    // contracts/itxns/itxns.algo.ts:43
    // const factory = compileArc4(NFTFactory);
    pushbytes base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CiACAQAxGRREMRhBABaCAgTSAkxzBMfiYK82GgCOAgARADsAgAS4RHs2NhoAjgEAAQAiQzYaAVcCADYaAlcCALEisiKyJbImgQOyECOyAbO0PBaABBUffHVMULAiQzYaARc2GgKxTLIRIrISshSBBLIQI7IBsyJD)
    itxn_field ApprovalProgramPages
    // contracts/itxns/itxns.algo.ts:45
    // const factoryApp = factory.call.createApplication().itxn.createdApp;
    intc_0 // 0
    itxn_field OnCompletion
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    gitxn 0 CreatedApplicationID
    // contracts/itxns/itxns.algo.ts:47-52
    // itxn
    //   .payment({
    //     amount: 200_000,
    //     receiver: factoryApp.address,
    //   })
    //   .submit();
    itxn_begin
    // contracts/itxns/itxns.algo.ts:50
    // receiver: factoryApp.address,
    dup
    app_params_get AppAddress
    assert // application exists
    itxn_field Receiver
    // contracts/itxns/itxns.algo.ts:49
    // amount: 200_000,
    pushint 200000 // 200000
    itxn_field Amount
    // contracts/itxns/itxns.algo.ts:47-51
    // itxn
    //   .payment({
    //     amount: 200_000,
    //     receiver: factoryApp.address,
    //   })
    intc_1 // 1
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // contracts/itxns/itxns.algo.ts:47-52
    // itxn
    //   .payment({
    //     amount: 200_000,
    //     receiver: factoryApp.address,
    //   })
    //   .submit();
    itxn_submit
    // contracts/itxns/itxns.algo.ts:54-57
    // const createdAssetId = factory.call.createNFT({
    //   appId: factoryApp,
    //   args: ["My NFT", "MNFT"],
    // }).returnValue;
    itxn_begin
    pushbytes 0xd2024c73 // method "createNFT(string,string)uint64"
    itxn_field ApplicationArgs
    // contracts/itxns/itxns.algo.ts:56
    // args: ["My NFT", "MNFT"],
    pushbytes 0x00064d79204e4654
    itxn_field ApplicationArgs
    pushbytes 0x00044d4e4654
    itxn_field ApplicationArgs
    // contracts/itxns/itxns.algo.ts:54-57
    // const createdAssetId = factory.call.createNFT({
    //   appId: factoryApp,
    //   args: ["My NFT", "MNFT"],
    // }).returnValue;
    intc_0 // 0
    itxn_field OnCompletion
    dup
    itxn_field ApplicationID
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_1 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    dup
    btoi
    // contracts/itxns/itxns.algo.ts:59-65
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetAmount: 0,
    //     xferAsset: createdAssetId,
    //   })
    //   .submit();
    itxn_begin
    // contracts/itxns/itxns.algo.ts:61
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    swap
    itxn_field XferAsset
    // contracts/itxns/itxns.algo.ts:62
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    // contracts/itxns/itxns.algo.ts:59-64
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetAmount: 0,
    //     xferAsset: createdAssetId,
    //   })
    pushint 4 // 4
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // contracts/itxns/itxns.algo.ts:59-65
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetAmount: 0,
    //     xferAsset: createdAssetId,
    //   })
    //   .submit();
    itxn_submit
    // contracts/itxns/itxns.algo.ts:67-70
    // factory.call.transferNFT({
    //   appId: factoryApp,
    //   args: [createdAssetId, new Address(Global.currentApplicationAddress)],
    // });
    itxn_begin
    // contracts/itxns/itxns.algo.ts:69
    // args: [createdAssetId, new Address(Global.currentApplicationAddress)],
    global CurrentApplicationAddress
    // contracts/itxns/itxns.algo.ts:67-70
    // factory.call.transferNFT({
    //   appId: factoryApp,
    //   args: [createdAssetId, new Address(Global.currentApplicationAddress)],
    // });
    pushbytes 0xc7e260af // method "transferNFT(uint64,address)void"
    itxn_field ApplicationArgs
    dig 1
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    intc_0 // 0
    itxn_field OnCompletion
    swap
    itxn_field ApplicationID
    intc_2 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // contracts/itxns/itxns.algo.ts:42
    // mintAndGetAsset(): uint64 {
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return
