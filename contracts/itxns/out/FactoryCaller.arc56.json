{
    "name": "FactoryCaller",
    "structs": {},
    "methods": [
        {
            "name": "createApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mintAndGetAsset",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        316
                    ],
                    "errorMessage": "Bytes has valid prefix"
                },
                {
                    "pc": [
                        44,
                        61
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        251
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        65
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        47
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiADAAEGJgIEuER7NgQVH3x1MRtBABAogARF3tjgNhoAjgIAEwACIkMxGRREMRhEiAARFilMULAjQzEZFEQxGBREI0OxgAQKgQFDskKAmQEKIAIBADEbQQAcggMEuER7NgTSAkxzBMfiYK82GgCOAwA3ABUAAiNDMRkURDEYRDYaARc2GgKIAEgiQzEZFEQxGEQ2GgFXAgA2GgJXAgCIABYWgAQVH3x1TFCwIkMxGRREMRgURCJDigIBsSKyIov/siWL/rImgQOyECOyAbO0PImKAgCxi/6yESKyEov/shSBBLIQI7IBs4myQCiyGiSyECKyAbO0PbFJcghEsgeBwJoMsggjshAisgGzsUmyGIAE0gJMc7IagAZNeSBORlSyGoAETU5GVLIaJLIQIrIBs7Q+SVcEAExXAAQpEkQXsTIKSwGyESKyErIUgQSyECKyAbOxSRYyCk8DshiABMfiYK+yGkyyGrIaJLIQIrIBs4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}