#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 3 33
    bytecblock "root" "size" 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 0x
    txn ApplicationID
    bnz main_after_if_else@2
    // contracts/merkle/merkle.algo.ts:33
    // size = GlobalState<uint64>({ initialValue: 0 });
    bytec_1 // "size"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // contracts/merkle/merkle.algo.ts:30
    // export class MerkleTree extends Contract {
    pushbytes 0x2487c32c // method "deleteApplication()void"
    txna ApplicationArgs 0
    match main_deleteApplication_route@4

main_switch_case_next@5:
    // contracts/merkle/merkle.algo.ts:30
    // export class MerkleTree extends Contract {
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    bz main_create_NoOp@11
    pushbytess 0x506cb8d8 0x04f63238 0x255d93e3 // method "verify(byte[],byte[33][3])void", method "appendLeaf(byte[],byte[33][3])void", method "updateLeaf(byte[],byte[],byte[33][3])void"
    txna ApplicationArgs 0
    match verify appendLeaf updateLeaf
    err

main_create_NoOp@11:
    // contracts/merkle/merkle.algo.ts:30
    // export class MerkleTree extends Contract {
    pushbytes 0xb8447b36 // method "createApplication()void"
    txna ApplicationArgs 0
    match createApplication
    err

main_deleteApplication_route@4:
    // contracts/merkle/merkle.algo.ts:75
    // @abimethod({ allowActions: "DeleteApplication" })
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    txn ApplicationID
    &&
    assert // OnCompletion must be DeleteApplication && can only call when not creating
    b deleteApplication


// contracts/merkle/merkle.algo.ts::MerkleTree.deleteApplication[routing]() -> void:
deleteApplication:
    // contracts/merkle/merkle.algo.ts:77
    // assertMatch(Txn, { sender: Global.currentApplicationId.creator });
    txn Sender
    global CurrentApplicationID
    app_params_get AppCreator
    assert // application exists
    ==
    // contracts/merkle/merkle.algo.ts:75
    // @abimethod({ allowActions: "DeleteApplication" })
    return // on error: assert target is match for conditions


// contracts/merkle/merkle.algo.ts::MerkleTree.createApplication[routing]() -> void:
createApplication:
    // contracts/merkle/merkle.algo.ts:36
    // let result = Bytes.fromHex<32>(EMPTY_HASH);
    bytec_2 // 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    // contracts/merkle/merkle.algo.ts:38
    // for (let i: uint64 = 0; i < TREE_DEPTH; i = i + 1) {
    intc_0 // 0

createApplication_while_top@2:
    // contracts/merkle/merkle.algo.ts:38
    // for (let i: uint64 = 0; i < TREE_DEPTH; i = i + 1) {
    dup
    intc_2 // 3
    <
    bz createApplication_after_while@4
    // contracts/merkle/merkle.algo.ts:39
    // result = sha256(result.concat(result));
    dig 1
    dup
    concat
    sha256
    bury 2
    // contracts/merkle/merkle.algo.ts:38
    // for (let i: uint64 = 0; i < TREE_DEPTH; i = i + 1) {
    dup
    intc_1 // 1
    +
    bury 1
    b createApplication_while_top@2

createApplication_after_while@4:
    // contracts/merkle/merkle.algo.ts:31
    // root = GlobalState<bytes<32>>();
    bytec_0 // "root"
    // contracts/merkle/merkle.algo.ts:82
    // this.root.value = this.calcInitRoot();
    dig 2
    app_global_put
    // contracts/merkle/merkle.algo.ts:80
    // @abimethod({ onCreate: "require" })
    intc_1 // 1
    return


// contracts/merkle/merkle.algo.ts::MerkleTree.verify[routing]() -> void:
verify:
    // contracts/merkle/merkle.algo.ts:85
    // verify(data: bytes, path: Path): void {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    // contracts/merkle/merkle.algo.ts:86
    // assert(this.root.value === this.calcRoot(sha256(data), path));
    intc_0 // 0
    // contracts/merkle/merkle.algo.ts:31
    // root = GlobalState<bytes<32>>();
    bytec_0 // "root"
    // contracts/merkle/merkle.algo.ts:86
    // assert(this.root.value === this.calcRoot(sha256(data), path));
    app_global_get_ex
    assert // check GlobalState exists
    uncover 2
    sha256
    uncover 2
    callsub calcRoot
    pop
    ==
    // contracts/merkle/merkle.algo.ts:85
    // verify(data: bytes, path: Path): void {
    return


// contracts/merkle/merkle.algo.ts::MerkleTree.appendLeaf[routing]() -> void:
appendLeaf:
    // contracts/merkle/merkle.algo.ts:89
    // appendLeaf(data: bytes, path: Path): void {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    // contracts/merkle/merkle.algo.ts:90
    // assert(data !== Bytes());
    dig 1
    bytec_3 // 0x
    !=
    assert
    // contracts/merkle/merkle.algo.ts:92
    // this.root.value === this.calcRoot(Bytes.fromHex<32>(EMPTY_HASH), path),
    intc_0 // 0
    // contracts/merkle/merkle.algo.ts:31
    // root = GlobalState<bytes<32>>();
    bytec_0 // "root"
    // contracts/merkle/merkle.algo.ts:92
    // this.root.value === this.calcRoot(Bytes.fromHex<32>(EMPTY_HASH), path),
    app_global_get_ex
    assert // check GlobalState exists
    bytec_2 // 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
    uncover 2
    callsub calcRoot
    cover 2
    ==
    // contracts/merkle/merkle.algo.ts:91-93
    // assert(
    //   this.root.value === this.calcRoot(Bytes.fromHex<32>(EMPTY_HASH), path),
    // );
    assert
    // contracts/merkle/merkle.algo.ts:95
    // this.root.value = this.calcRoot(sha256(data), path);
    swap
    sha256
    swap
    callsub calcRoot
    pop
    // contracts/merkle/merkle.algo.ts:31
    // root = GlobalState<bytes<32>>();
    bytec_0 // "root"
    // contracts/merkle/merkle.algo.ts:95
    // this.root.value = this.calcRoot(sha256(data), path);
    swap
    app_global_put
    // contracts/merkle/merkle.algo.ts:97
    // this.size.value = this.size.value + 1;
    intc_0 // 0
    // contracts/merkle/merkle.algo.ts:33
    // size = GlobalState<uint64>({ initialValue: 0 });
    bytec_1 // "size"
    // contracts/merkle/merkle.algo.ts:97
    // this.size.value = this.size.value + 1;
    app_global_get_ex
    assert // check GlobalState exists
    intc_1 // 1
    +
    // contracts/merkle/merkle.algo.ts:33
    // size = GlobalState<uint64>({ initialValue: 0 });
    bytec_1 // "size"
    // contracts/merkle/merkle.algo.ts:97
    // this.size.value = this.size.value + 1;
    swap
    app_global_put
    // contracts/merkle/merkle.algo.ts:89
    // appendLeaf(data: bytes, path: Path): void {
    intc_1 // 1
    return


// contracts/merkle/merkle.algo.ts::MerkleTree.updateLeaf[routing]() -> void:
updateLeaf:
    // contracts/merkle/merkle.algo.ts:100
    // updateLeaf(oldData: bytes, newData: bytes, path: Path): void {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    // contracts/merkle/merkle.algo.ts:101
    // assert(newData !== Bytes());
    dig 1
    bytec_3 // 0x
    !=
    assert
    // contracts/merkle/merkle.algo.ts:102
    // assert(this.root.value === this.calcRoot(sha256(oldData), path));
    intc_0 // 0
    // contracts/merkle/merkle.algo.ts:31
    // root = GlobalState<bytes<32>>();
    bytec_0 // "root"
    // contracts/merkle/merkle.algo.ts:102
    // assert(this.root.value === this.calcRoot(sha256(oldData), path));
    app_global_get_ex
    assert // check GlobalState exists
    uncover 3
    sha256
    uncover 2
    callsub calcRoot
    cover 2
    ==
    assert
    // contracts/merkle/merkle.algo.ts:104
    // this.root.value = this.calcRoot(sha256(newData), path);
    swap
    sha256
    swap
    callsub calcRoot
    pop
    // contracts/merkle/merkle.algo.ts:31
    // root = GlobalState<bytes<32>>();
    bytec_0 // "root"
    // contracts/merkle/merkle.algo.ts:104
    // this.root.value = this.calcRoot(sha256(newData), path);
    swap
    app_global_put
    // contracts/merkle/merkle.algo.ts:100
    // updateLeaf(oldData: bytes, newData: bytes, path: Path): void {
    intc_1 // 1
    return


// contracts/merkle/merkle.algo.ts::MerkleTree.calcRoot(leaf: bytes, path: bytes) -> bytes, bytes:
calcRoot:
    // contracts/merkle/merkle.algo.ts:53
    // private calcRoot(leaf: bytes<32>, path: Path): bytes<32> {
    proto 2 2
    // contracts/merkle/merkle.algo.ts:56
    // for (let i: uint64 = 0; i < TREE_DEPTH; i = i + 1) {
    intc_0 // 0
    frame_dig -2

calcRoot_while_top@1:
    // contracts/merkle/merkle.algo.ts:56
    // for (let i: uint64 = 0; i < TREE_DEPTH; i = i + 1) {
    frame_dig 0
    intc_2 // 3
    <
    bz calcRoot_after_while@6
    // contracts/merkle/merkle.algo.ts:57
    // const elem = path[i];
    frame_dig 0
    intc_3 // 33
    *
    frame_dig -1
    swap
    intc_3 // 33
    extract3 // on error: index access is out of bounds
    dup
    // contracts/merkle/merkle.algo.ts:50
    // return getByte(elem, 0) === RIGHT_SIBLING_PREFIX;
    intc_0 // 0
    getbyte
    pushint 170 // 170
    ==
    // contracts/merkle/merkle.algo.ts:59
    // if (this.isRightSibling(elem)) {
    bz calcRoot_else_body@4
    // contracts/merkle/merkle.algo.ts:62
    // extract(elem, 1, 32).toFixed({ length: 32 }),
    extract 1 32
    dup
    len
    pushint 32 // 32
    ==
    assert // Length must be 32
    // contracts/merkle/merkle.algo.ts:46
    // return sha256(left.concat(right));
    frame_dig 1
    swap
    concat
    sha256
    frame_bury 1

calcRoot_after_if_else@5:
    // contracts/merkle/merkle.algo.ts:56
    // for (let i: uint64 = 0; i < TREE_DEPTH; i = i + 1) {
    frame_dig 0
    intc_1 // 1
    +
    frame_bury 0
    b calcRoot_while_top@1

calcRoot_else_body@4:
    // contracts/merkle/merkle.algo.ts:66
    // extract(elem, 1, 32).toFixed({ length: 32 }),
    extract 1 32
    dup
    len
    pushint 32 // 32
    ==
    assert // Length must be 32
    // contracts/merkle/merkle.algo.ts:46
    // return sha256(left.concat(right));
    frame_dig 1
    concat
    sha256
    frame_bury 1
    b calcRoot_after_if_else@5

calcRoot_after_while@6:
    // contracts/merkle/merkle.algo.ts:72
    // return result;
    frame_dig 1
    frame_dig -1
    uncover 3
    uncover 3
    retsub
