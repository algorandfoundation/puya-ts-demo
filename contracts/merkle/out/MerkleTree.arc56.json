{
    "name": "MerkleTree",
    "structs": {},
    "methods": [
        {
            "name": "deleteApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "DeleteApplication"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "createApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify",
            "args": [
                {
                    "type": "byte[]",
                    "name": "data"
                },
                {
                    "type": "byte[33][3]",
                    "name": "path"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "appendLeaf",
            "args": [
                {
                    "type": "byte[]",
                    "name": "data"
                },
                {
                    "type": "byte[33][3]",
                    "name": "path"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateLeaf",
            "args": [
                {
                    "type": "byte[]",
                    "name": "oldData"
                },
                {
                    "type": "byte[]",
                    "name": "newData"
                },
                {
                    "type": "byte[33][3]",
                    "name": "path"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "root": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "cm9vdA=="
                },
                "size": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c2l6ZQ=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        337,
                        362
                    ],
                    "errorMessage": "Length must be 32"
                },
                {
                    "pc": [
                        134
                    ],
                    "errorMessage": "OnCompletion must be DeleteApplication && can only call when not creating"
                },
                {
                    "pc": [
                        77
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        144
                    ],
                    "errorMessage": "application exists"
                },
                {
                    "pc": [
                        146
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        188,
                        217,
                        241,
                        272
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        318
                    ],
                    "errorMessage": "index access is out of bounds"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEDISYEBHJvb3QEc2l6ZSDjsMRCmPwcFJr79MiZb7kkJ65B5GSbk0yklZkbeFK4VQAxGEAAAykiZ4AEJIfDLDYaAI4BADQxGRREMRhBAB2CAwRQbLjYBAT2MjgEJV2T4zYaAI4DAEEAWQCKAIAEuER7NjYaAI4BABYAMRmBBRIxGBBEQgAAMQAyCHIHRBJDKiJJJAxBAA9LAUlQAUUCSSMIRQFC/+soSwJnI0M2GgFXAgA2GgIiKGVETwIBTwKIAGRIEkM2GgFXAgA2GgJLASsTRCIoZUQqTwKIAElOAhJETAFMiAA/SChMZyIpZUQjCClMZyNDNhoBVwIANhoCVwIANhoDSwErE0QiKGVETwMBTwKIABBOAhJETAFMiAAGSChMZyNDigICIov+iwAkDEEAPosAJQuL/0wlWEkiVYGqARJBABlXASBJFYEgEkSLAUxQAYwBiwAjCIwAQv/NVwEgSRWBIBJEiwFQAYwBQv/liwGL/08DTwOJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}