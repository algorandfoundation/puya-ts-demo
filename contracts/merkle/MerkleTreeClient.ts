/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from "@algorandfoundation/algokit-utils";
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from "@algorandfoundation/algokit-utils/types/app";
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from "@algorandfoundation/algokit-utils/types/app-client";
import type { AppSpec } from "@algorandfoundation/algokit-utils/types/app-spec";
import type {
  SendTransactionResult,
  TransactionToSign,
  SendTransactionFrom,
} from "@algorandfoundation/algokit-utils/types/transaction";
import type { ABIResult, TransactionWithSigner, modelsv2 } from "algosdk";
import {
  Algodv2,
  OnApplicationComplete,
  Transaction,
  AtomicTransactionComposer,
} from "algosdk";
export const APP_SPEC: AppSpec = {
  hints: {
    "deleteApplication()void": {
      call_config: {
        delete_application: "CALL",
      },
    },
    "createApplication()void": {
      call_config: {
        no_op: "CREATE",
      },
    },
    "verify(byte[],byte[33][3])void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "appendLeaf(byte[],byte[33][3])void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "updateLeaf(byte[],byte[],byte[33][3])void": {
      call_config: {
        no_op: "CALL",
      },
    },
  },
  source: {
    approval:
      "",
    clear:
      "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg==",
  },
  state: {
    global: {
      num_byte_slices: 1,
      num_uints: 1,
    },
    local: {
      num_byte_slices: 0,
      num_uints: 0,
    },
  },
  schema: {
    global: {
      declared: {
        root: {
          type: "bytes",
          key: "root",
        },
        size: {
          type: "uint64",
          key: "size",
        },
      },
      reserved: {},
    },
    local: {
      declared: {},
      reserved: {},
    },
  },
  contract: {
    name: "MerkleTree",
    methods: [
      {
        name: "deleteApplication",
        args: [],
        readonly: false,
        returns: {
          type: "void",
        },
      },
      {
        name: "createApplication",
        args: [],
        readonly: false,
        returns: {
          type: "void",
        },
      },
      {
        name: "verify",
        args: [
          {
            type: "byte[]",
            name: "data",
          },
          {
            type: "byte[33][3]",
            name: "path",
          },
        ],
        readonly: false,
        returns: {
          type: "void",
        },
      },
      {
        name: "appendLeaf",
        args: [
          {
            type: "byte[]",
            name: "data",
          },
          {
            type: "byte[33][3]",
            name: "path",
          },
        ],
        readonly: false,
        returns: {
          type: "void",
        },
      },
      {
        name: "updateLeaf",
        args: [
          {
            type: "byte[]",
            name: "oldData",
          },
          {
            type: "byte[]",
            name: "newData",
          },
          {
            type: "byte[33][3]",
            name: "path",
          },
        ],
        readonly: false,
        returns: {
          type: "void",
        },
      },
    ],
    networks: {},
  },
  bare_call_config: {},
};

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = {
  onCompleteAction?: "no_op" | OnApplicationComplete.NoOpOC;
};
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = {
  onCompleteAction: "opt_in" | OnApplicationComplete.OptInOC;
};
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = {
  onCompleteAction: "close_out" | OnApplicationComplete.CloseOutOC;
};
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = {
  onCompleteAction:
    | "delete_application"
    | OnApplicationComplete.DeleteApplicationOC;
};
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = {
  onCompleteAction:
    | "update_application"
    | OnApplicationComplete.UpdateApplicationOC;
};
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt
   */
  asBigInt(): bigint;
  /**
   * Gets the state value as a number.
   */
  asNumber(): number;
};
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array;
  /**
   * Gets the state value as a string
   */
  asString(): string;
};

/**
 * Defines the types of available calls and state of the MerkleTree smart contract.
 */
export type MerkleTree = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    "deleteApplication()void" | "deleteApplication",
    {
      argsObj: {};
      argsTuple: [];
      returns: void;
    }
  > &
    Record<
      "createApplication()void" | "createApplication",
      {
        argsObj: {};
        argsTuple: [];
        returns: void;
      }
    > &
    Record<
      "verify(byte[],byte[33][3])void" | "verify",
      {
        argsObj: {
          data: Uint8Array;
          path: [Uint8Array, Uint8Array, Uint8Array];
        };
        argsTuple: [
          data: Uint8Array,
          path: [Uint8Array, Uint8Array, Uint8Array],
        ];
        returns: void;
      }
    > &
    Record<
      "appendLeaf(byte[],byte[33][3])void" | "appendLeaf",
      {
        argsObj: {
          data: Uint8Array;
          path: [Uint8Array, Uint8Array, Uint8Array];
        };
        argsTuple: [
          data: Uint8Array,
          path: [Uint8Array, Uint8Array, Uint8Array],
        ];
        returns: void;
      }
    > &
    Record<
      "updateLeaf(byte[],byte[],byte[33][3])void" | "updateLeaf",
      {
        argsObj: {
          oldData: Uint8Array;
          newData: Uint8Array;
          path: [Uint8Array, Uint8Array, Uint8Array];
        };
        argsTuple: [
          oldData: Uint8Array,
          newData: Uint8Array,
          path: [Uint8Array, Uint8Array, Uint8Array],
        ];
        returns: void;
      }
    >;
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      root?: BinaryState;
      size?: IntegerState;
    };
  };
};
/**
 * Defines the possible abi call signatures
 */
export type MerkleTreeSig = keyof MerkleTree["methods"];
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends MerkleTreeSig | undefined> = {
  method: TSignature;
  methodArgs: TSignature extends undefined
    ? undefined
    : Array<ABIAppCallArg | undefined>;
} & AppClientCallCoreParams &
  CoreAppCallArgs;
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>;
/**
 * Maps a method signature from the MerkleTree smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends MerkleTreeSig> =
  MerkleTree["methods"][TSignature]["argsObj" | "argsTuple"];
/**
 * Maps a method signature from the MerkleTree smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MerkleTreeSig> =
  MerkleTree["methods"][TSignature]["returns"];

/**
 * A factory for available 'create' calls
 */
export type MerkleTreeCreateCalls = (typeof MerkleTreeCallFactory)["create"];
/**
 * Defines supported create methods for this smart contract
 */
export type MerkleTreeCreateCallParams =
  TypedCallParams<"createApplication()void"> & OnCompleteNoOp;
/**
 * A factory for available 'delete' calls
 */
export type MerkleTreeDeleteCalls = (typeof MerkleTreeCallFactory)["delete"];
/**
 * Defines supported delete methods for this smart contract
 */
export type MerkleTreeDeleteCallParams =
  TypedCallParams<"deleteApplication()void">;
/**
 * Defines arguments required for the deploy method.
 */
export type MerkleTreeDeployArgs = {
  deployTimeParams?: TealTemplateParams;
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (
    callFactory: MerkleTreeCreateCalls,
  ) => MerkleTreeCreateCallParams;
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (
    callFactory: MerkleTreeDeleteCalls,
  ) => MerkleTreeDeleteCallParams;
};

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class MerkleTreeCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the MerkleTree smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(
        args: MethodArgs<"createApplication()void">,
        params: AppClientCallCoreParams &
          CoreAppCallArgs &
          AppClientCompilationParams &
          OnCompleteNoOp = {},
      ) {
        return {
          method: "createApplication()void" as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        };
      },
    };
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the MerkleTree smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(
        args: MethodArgs<"deleteApplication()void">,
        params: AppClientCallCoreParams & CoreAppCallArgs = {},
      ) {
        return {
          method: "deleteApplication()void" as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        };
      },
    };
  }

  /**
   * Constructs a no op call for the verify(byte[],byte[33][3])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static verify(
    args: MethodArgs<"verify(byte[],byte[33][3])void">,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: "verify(byte[],byte[33][3])void" as const,
      methodArgs: Array.isArray(args) ? args : [args.data, args.path],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the appendLeaf(byte[],byte[33][3])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static appendLeaf(
    args: MethodArgs<"appendLeaf(byte[],byte[33][3])void">,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: "appendLeaf(byte[],byte[33][3])void" as const,
      methodArgs: Array.isArray(args) ? args : [args.data, args.path],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the updateLeaf(byte[],byte[],byte[33][3])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateLeaf(
    args: MethodArgs<"updateLeaf(byte[],byte[],byte[33][3])void">,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: "updateLeaf(byte[],byte[],byte[33][3])void" as const,
      methodArgs: Array.isArray(args)
        ? args
        : [args.oldData, args.newData, args.path],
      ...params,
    };
  }
}

/**
 * A client to make calls to the MerkleTree smart contract
 */
export class MerkleTreeClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient;

  private readonly sender: SendTransactionFrom | undefined;

  /**
   * Creates a new instance of `MerkleTreeClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(
    appDetails: AppDetails,
    private algod: Algodv2,
  ) {
    this.sender = appDetails.sender;
    this.appClient = algokit.getAppClient(
      {
        ...appDetails,
        app: APP_SPEC,
      },
      algod,
    );
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(
    result: AppCallTransactionResult,
    returnValueFormatter?: (value: any) => TReturn,
  ): AppCallTransactionResultOfType<TReturn> {
    if (result.return?.decodeError) {
      throw result.return.decodeError;
    }
    const returnValue =
      result.return?.returnValue !== undefined &&
      returnValueFormatter !== undefined
        ? returnValueFormatter(result.return.returnValue)
        : (result.return?.returnValue as TReturn | undefined);
    return { ...result, return: returnValue };
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof MerkleTree["methods"]>(
    typedCallParams: TypedCallParams<TSignature>,
    returnValueFormatter?: (value: any) => MethodReturn<TSignature>,
  ) {
    return this.mapReturnValue<MethodReturn<TSignature>>(
      await this.appClient.call(typedCallParams),
      returnValueFormatter,
    );
  }

  /**
   * Idempotently deploys the MerkleTree smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(
    params: MerkleTreeDeployArgs & AppClientDeployCoreParams = {},
  ): ReturnType<ApplicationClient["deploy"]> {
    const createArgs = params.createCall?.(MerkleTreeCallFactory.create);
    const deleteArgs = params.deleteCall?.(MerkleTreeCallFactory.delete);
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    });
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this;
    return {
      /**
       * Creates a new instance of the MerkleTree smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(
        args: MethodArgs<"createApplication()void">,
        params: AppClientCallCoreParams &
          AppClientCompilationParams &
          OnCompleteNoOp = {},
      ): Promise<
        AppCallTransactionResultOfType<MethodReturn<"createApplication()void">>
      > {
        return $this.mapReturnValue(
          await $this.appClient.create(
            MerkleTreeCallFactory.create.createApplication(args, params),
          ),
        );
      },
    };
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this;
    return {
      /**
       * Deletes an existing instance of the MerkleTree smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(
        args: MethodArgs<"deleteApplication()void">,
        params: AppClientCallCoreParams = {},
      ): Promise<
        AppCallTransactionResultOfType<MethodReturn<"deleteApplication()void">>
      > {
        return $this.mapReturnValue(
          await $this.appClient.delete(
            MerkleTreeCallFactory.delete.deleteApplication(args, params),
          ),
        );
      },
    };
  }

  /**
   * Makes a clear_state call to an existing instance of the MerkleTree smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(
    args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.appClient.clearState(args);
  }

  /**
   * Calls the verify(byte[],byte[33][3])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public verify(
    args: MethodArgs<"verify(byte[],byte[33][3])void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(MerkleTreeCallFactory.verify(args, params));
  }

  /**
   * Calls the appendLeaf(byte[],byte[33][3])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public appendLeaf(
    args: MethodArgs<"appendLeaf(byte[],byte[33][3])void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(MerkleTreeCallFactory.appendLeaf(args, params));
  }

  /**
   * Calls the updateLeaf(byte[],byte[],byte[33][3])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateLeaf(
    args: MethodArgs<"updateLeaf(byte[],byte[],byte[33][3])void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(MerkleTreeCallFactory.updateLeaf(args, params));
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(
    state: AppState,
    key: string,
  ): BinaryState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if (!("valueRaw" in value))
      throw new Error(
        `Failed to parse state value for ${key}; received an int when expected a byte array`,
      );
    return {
      asString(): string {
        return value.value;
      },
      asByteArray(): Uint8Array {
        return value.valueRaw;
      },
    };
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(
    state: AppState,
    key: string,
  ): IntegerState | undefined {
    const value = state[key];
    if (!value) return undefined;
    if ("valueRaw" in value)
      throw new Error(
        `Failed to parse state value for ${key}; received a byte array when expected a number`,
      );
    return {
      asBigInt() {
        return typeof value.value === "bigint"
          ? value.value
          : BigInt(value.value);
      },
      asNumber(): number {
        return typeof value.value === "bigint"
          ? Number(value.value)
          : value.value;
      },
    };
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<MerkleTree["state"]["global"]> {
    const state = await this.appClient.getGlobalState();
    return {
      get root() {
        return MerkleTreeClient.getBinaryState(state, "root");
      },
      get size() {
        return MerkleTreeClient.getIntegerState(state, "size");
      },
    };
  }

  public compose(): MerkleTreeComposer {
    const client = this;
    const atc = new AtomicTransactionComposer();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<undefined | ((x: any) => any)> = [];
    return {
      verify(
        args: MethodArgs<"verify(byte[],byte[33][3])void">,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.verify(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      appendLeaf(
        args: MethodArgs<"appendLeaf(byte[],byte[33][3])void">,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.appendLeaf(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      updateLeaf(
        args: MethodArgs<"updateLeaf(byte[],byte[],byte[33][3])void">,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.updateLeaf(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      get delete() {
        const $this = this;
        return {
          deleteApplication(
            args: MethodArgs<"deleteApplication()void">,
            params?: AppClientCallCoreParams,
          ) {
            promiseChain = promiseChain.then(() =>
              client.delete.deleteApplication(args, {
                ...params,
                sendParams: { ...params?.sendParams, skipSending: true, atc },
              }),
            );
            resultMappers.push(undefined);
            return $this;
          },
        };
      },
      clearState(
        args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.clearState({
            ...args,
            sendParams: { ...args?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      addTransaction(
        txn:
          | TransactionWithSigner
          | TransactionToSign
          | Transaction
          | Promise<SendTransactionResult>,
        defaultSender?: SendTransactionFrom,
      ) {
        promiseChain = promiseChain.then(async () =>
          atc.addTransaction(
            await algokit.getTransactionWithSigner(
              txn,
              defaultSender ?? client.sender,
            ),
          ),
        );
        return this;
      },
      async atc() {
        await promiseChain;
        return atc;
      },
      async simulate() {
        await promiseChain;
        const result = await atc.simulate(client.algod);
        return result;
      },
      async execute() {
        await promiseChain;
        const result = await algokit.sendAtomicTransactionComposer(
          { atc, sendParams: {} },
          client.algod,
        );
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val.returnValue)
              : val.returnValue,
          ),
        };
      },
    } as unknown as MerkleTreeComposer;
  }
}
export type MerkleTreeComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the verify(byte[],byte[33][3])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verify(
    args: MethodArgs<"verify(byte[],byte[33][3])void">,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): MerkleTreeComposer<
    [...TReturns, MethodReturn<"verify(byte[],byte[33][3])void">]
  >;

  /**
   * Calls the appendLeaf(byte[],byte[33][3])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  appendLeaf(
    args: MethodArgs<"appendLeaf(byte[],byte[33][3])void">,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): MerkleTreeComposer<
    [...TReturns, MethodReturn<"appendLeaf(byte[],byte[33][3])void">]
  >;

  /**
   * Calls the updateLeaf(byte[],byte[],byte[33][3])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateLeaf(
    args: MethodArgs<"updateLeaf(byte[],byte[],byte[33][3])void">,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): MerkleTreeComposer<
    [...TReturns, MethodReturn<"updateLeaf(byte[],byte[],byte[33][3])void">]
  >;

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the MerkleTree smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(
      args: MethodArgs<"deleteApplication()void">,
      params?: AppClientCallCoreParams,
    ): MerkleTreeComposer<
      [...TReturns, MethodReturn<"deleteApplication()void">]
    >;
  };

  /**
   * Makes a clear_state call to an existing instance of the MerkleTree smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(
    args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs,
  ): MerkleTreeComposer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(
    txn:
      | TransactionWithSigner
      | TransactionToSign
      | Transaction
      | Promise<SendTransactionResult>,
    defaultSender?: SendTransactionFrom,
  ): MerkleTreeComposer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<MerkleTreeComposerSimulateResult>;
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<MerkleTreeComposerResults<TReturns>>;
};
export type MerkleTreeComposerSimulateResult = {
  methodResults: ABIResult[];
  simulateResponse: modelsv2.SimulateResponse;
};
export type MerkleTreeComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns;
  groupId: string;
  txIds: string[];
  transactions: Transaction[];
};
