{
  "version": 3,
  "sources": [
    "/home/parallels/dev/puya-ts-demo/contracts/simple/simple.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AASY;AAAoD;AAA9D;AADF;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AAOG;AAAA;AAGD;;;AAAA;AANoC;AAH1B;AAG0B;AAAA;AAAb;AAHb;AAGR;AAAA;AAMF;AAAA;AAIA;;;AAAA;AACoC;AAd1B;AAc0B;AAAA;AAAb;AAAA;AAdb;AAcR;AAAA;AADF;AAAA;AAIA;;;AAAA;;;AACqB;AAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;AAAA;;;AACqB;AAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADT;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 32 0"
    },
    "6": {
      "op": "bytecblock \"counter\" 0x151f7c75"
    },
    "21": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "23": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "26": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\""
      ],
      "stack_out": [
        "\"counter\""
      ]
    },
    "27": {
      "op": "intc_2 // 0",
      "defined_out": [
        "\"counter\"",
        "0"
      ],
      "stack_out": [
        "\"counter\"",
        "0"
      ]
    },
    "28": {
      "op": "app_global_put",
      "stack_out": []
    },
    "29": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "31": {
      "op": "!",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "32": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "33": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "35": {
      "op": "bz main_create_NoOp@10",
      "stack_out": []
    },
    "38": {
      "op": "pushbytess 0x9fab8610 0x2e0c5a47 0xac976e02 0x091b32a7 // method \"incr(uint64)void\", method \"decr(uint64)void\", method \"add(uint256,uint256)uint256\", method \"sub(uint256,uint256)uint256\"",
      "defined_out": [
        "Method(add(uint256,uint256)uint256)",
        "Method(decr(uint64)void)",
        "Method(incr(uint64)void)",
        "Method(sub(uint256,uint256)uint256)"
      ],
      "stack_out": [
        "Method(incr(uint64)void)",
        "Method(decr(uint64)void)",
        "Method(add(uint256,uint256)uint256)",
        "Method(sub(uint256,uint256)uint256)"
      ]
    },
    "60": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(add(uint256,uint256)uint256)",
        "Method(decr(uint64)void)",
        "Method(incr(uint64)void)",
        "Method(sub(uint256,uint256)uint256)",
        "tmp%4#0"
      ],
      "stack_out": [
        "Method(incr(uint64)void)",
        "Method(decr(uint64)void)",
        "Method(add(uint256,uint256)uint256)",
        "Method(sub(uint256,uint256)uint256)",
        "tmp%4#0"
      ]
    },
    "63": {
      "op": "match incr decr add sub",
      "stack_out": []
    },
    "73": {
      "op": "err"
    },
    "74": {
      "block": "main_create_NoOp@10",
      "stack_in": [],
      "op": "pushbytes 0xb8447b36 // method \"createApplication()void\"",
      "defined_out": [
        "Method(createApplication()void)"
      ],
      "stack_out": [
        "Method(createApplication()void)"
      ]
    },
    "80": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createApplication()void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "tmp%5#0"
      ]
    },
    "83": {
      "op": "match main_createApplication_route@11",
      "stack_out": []
    },
    "87": {
      "op": "err"
    },
    "88": {
      "block": "main_createApplication_route@11",
      "stack_in": [],
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "89": {
      "op": "return",
      "stack_out": []
    },
    "90": {
      "subroutine": "contracts/simple/simple.algo.ts::Simple.incr[routing]",
      "params": {},
      "block": "incr",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "93": {
      "op": "btoi",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0"
      ]
    },
    "94": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "0"
      ]
    },
    "95": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\"",
        "0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "0",
        "\"counter\""
      ]
    },
    "96": {
      "op": "app_global_get_ex",
      "defined_out": [
        "i#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "i#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "97": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "i#0",
        "maybe_value%0#0"
      ]
    },
    "98": {
      "op": "+",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "99": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "tmp%0#0",
        "\"counter\""
      ]
    },
    "100": {
      "op": "swap",
      "stack_out": [
        "\"counter\"",
        "tmp%0#0"
      ]
    },
    "101": {
      "op": "app_global_put",
      "stack_out": []
    },
    "102": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "103": {
      "op": "return",
      "stack_out": []
    },
    "104": {
      "subroutine": "contracts/simple/simple.algo.ts::Simple.decr[routing]",
      "params": {},
      "block": "decr",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(uint64)%0#0"
      ]
    },
    "107": {
      "op": "btoi",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "i#0"
      ]
    },
    "108": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "0"
      ]
    },
    "109": {
      "op": "bytec_0 // \"counter\"",
      "defined_out": [
        "\"counter\"",
        "0",
        "i#0"
      ],
      "stack_out": [
        "i#0",
        "0",
        "\"counter\""
      ]
    },
    "110": {
      "op": "app_global_get_ex",
      "defined_out": [
        "i#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "i#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "111": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "i#0",
        "maybe_value%0#0"
      ]
    },
    "112": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "i#0"
      ]
    },
    "113": {
      "op": "-",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "114": {
      "op": "bytec_0 // \"counter\"",
      "stack_out": [
        "tmp%0#1",
        "\"counter\""
      ]
    },
    "115": {
      "op": "swap",
      "stack_out": [
        "\"counter\"",
        "tmp%0#1"
      ]
    },
    "116": {
      "op": "app_global_put",
      "stack_out": []
    },
    "117": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "118": {
      "op": "return",
      "stack_out": []
    },
    "119": {
      "subroutine": "contracts/simple/simple.algo.ts::Simple.add[routing]",
      "params": {},
      "block": "add",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "122": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "125": {
      "op": "b+",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "126": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "127": {
      "op": "len",
      "defined_out": [
        "aggregate%value_len%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%value_len%0#0"
      ]
    },
    "128": {
      "op": "intc_1 // 32",
      "defined_out": [
        "32",
        "aggregate%value_len%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%value_len%0#0",
        "32"
      ]
    },
    "129": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "130": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "131": {
      "op": "intc_1 // 32",
      "stack_out": [
        "tmp%2#0",
        "32"
      ]
    },
    "132": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%bzero%0#0"
      ]
    },
    "133": {
      "op": "b|",
      "defined_out": [
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "134": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0",
        "0x151f7c75"
      ]
    },
    "135": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "136": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "137": {
      "op": "log",
      "stack_out": []
    },
    "138": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "139": {
      "op": "return",
      "stack_out": []
    },
    "140": {
      "subroutine": "contracts/simple/simple.algo.ts::Simple.sub[routing]",
      "params": {},
      "block": "sub",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "143": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "a#0",
        "b#0"
      ],
      "stack_out": [
        "a#0",
        "b#0"
      ]
    },
    "146": {
      "op": "b-",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "147": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "148": {
      "op": "len",
      "defined_out": [
        "aggregate%value_len%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%value_len%0#0"
      ]
    },
    "149": {
      "op": "intc_1 // 32",
      "defined_out": [
        "32",
        "aggregate%value_len%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%value_len%0#0",
        "32"
      ]
    },
    "150": {
      "op": "<=",
      "defined_out": [
        "aggregate%len_ok%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%len_ok%0#0"
      ]
    },
    "151": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "152": {
      "op": "intc_1 // 32",
      "stack_out": [
        "tmp%2#0",
        "32"
      ]
    },
    "153": {
      "op": "bzero",
      "defined_out": [
        "aggregate%bzero%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "aggregate%bzero%0#0"
      ]
    },
    "154": {
      "op": "b|",
      "defined_out": [
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "155": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ],
      "stack_out": [
        "aggregate%arc4_encoded%0#0",
        "0x151f7c75"
      ]
    },
    "156": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%arc4_encoded%0#0"
      ]
    },
    "157": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "158": {
      "op": "log",
      "stack_out": []
    },
    "159": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "160": {
      "op": "return",
      "stack_out": []
    }
  }
}