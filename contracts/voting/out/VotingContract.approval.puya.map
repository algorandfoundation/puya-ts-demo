{
  "version": 3,
  "sources": [
    "/home/parallels/dev/puya-ts-demo/contracts/voting/voting.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaU;AACc;;;;;;;;;;;;;;;AADtB;AAIQ;AAAmC;AAA3C;AALF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQG;;;AAAA;;;AAPO;AASN;AAAA;AAFD;AAAA;AAIA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAEkB;;AAAc;;AAAxB;AAAP;AACW;AAAA;;AAAW;;;AAAf;AAAP;AAEM;;AAAe;;AAAnB;AADF;AAKmB;;AAAQ;AAfrB;AAeqB;AAAA;;AAA3B;;;AACS;;;AAVV;AAAA;AAAA;AAAA;AAAA;AAAA;AAa+B;AApBxB;AAoBwB;AAAA;AAAQ;AAAnB;AApBb;AAoBN;AAAA;AACe;;AApBT;AAoByB;AAA/B;AACO;;;AAfR;;;AAoBmC;AA3B5B;AA2B4B;AAAA;AAA3B;AAFR;AAAA;AAAA;AAAA;AAAA;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "bytecblock \"votes\" \"topic\" \"voted\" 0x151f7c75"
    },
    "30": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "32": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "35": {
      "op": "bytec_1 // \"topic\"",
      "defined_out": [
        "\"topic\""
      ],
      "stack_out": [
        "\"topic\""
      ]
    },
    "36": {
      "op": "pushbytes \"default_topic\"",
      "defined_out": [
        "\"default_topic\"",
        "\"topic\""
      ],
      "stack_out": [
        "\"topic\"",
        "\"default_topic\""
      ]
    },
    "51": {
      "op": "app_global_put",
      "stack_out": []
    },
    "52": {
      "op": "bytec_0 // \"votes\"",
      "defined_out": [
        "\"votes\""
      ],
      "stack_out": [
        "\"votes\""
      ]
    },
    "53": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"votes\"",
        "0"
      ],
      "stack_out": [
        "\"votes\"",
        "0"
      ]
    },
    "54": {
      "op": "app_global_put",
      "stack_out": []
    },
    "55": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "57": {
      "op": "bz main___algots__.defaultCreate@12",
      "stack_out": []
    },
    "60": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "62": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "63": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "64": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "66": {
      "op": "assert",
      "stack_out": []
    },
    "67": {
      "op": "pushbytess 0x5a0c3842 0xf3c986b3 0xe8f470ab // method \"setTopic(string)void\", method \"vote(pay)bool\", method \"getVotes()uint64\"",
      "defined_out": [
        "Method(getVotes()uint64)",
        "Method(setTopic(string)void)",
        "Method(vote(pay)bool)"
      ],
      "stack_out": [
        "Method(setTopic(string)void)",
        "Method(vote(pay)bool)",
        "Method(getVotes()uint64)"
      ]
    },
    "84": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(getVotes()uint64)",
        "Method(setTopic(string)void)",
        "Method(vote(pay)bool)",
        "tmp%6#0"
      ],
      "stack_out": [
        "Method(setTopic(string)void)",
        "Method(vote(pay)bool)",
        "Method(getVotes()uint64)",
        "tmp%6#0"
      ]
    },
    "87": {
      "op": "match setTopic vote getVotes",
      "stack_out": []
    },
    "95": {
      "op": "err"
    },
    "96": {
      "block": "main___algots__.defaultCreate@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "98": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "99": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "101": {
      "op": "!",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "102": {
      "op": "&&",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "103": {
      "error": "OnCompletion must be NoOp && can only call when creating",
      "op": "return // on error: OnCompletion must be NoOp && can only call when creating",
      "defined_out": [],
      "stack_out": []
    },
    "104": {
      "subroutine": "contracts/voting/voting.algo.ts::VotingContract.setTopic[routing]",
      "params": {},
      "block": "setTopic",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ],
      "stack_out": [
        "reinterpret_Encoded(len+utf8[])%0#0"
      ]
    },
    "107": {
      "op": "extract 2 0",
      "defined_out": [
        "topic#0"
      ],
      "stack_out": [
        "topic#0"
      ]
    },
    "110": {
      "op": "bytec_1 // \"topic\"",
      "defined_out": [
        "\"topic\"",
        "topic#0"
      ],
      "stack_out": [
        "topic#0",
        "\"topic\""
      ]
    },
    "111": {
      "op": "swap",
      "stack_out": [
        "\"topic\"",
        "topic#0"
      ]
    },
    "112": {
      "op": "app_global_put",
      "stack_out": []
    },
    "113": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "114": {
      "op": "return",
      "stack_out": []
    },
    "115": {
      "subroutine": "contracts/voting/voting.algo.ts::VotingContract.vote[routing]",
      "params": {},
      "block": "vote",
      "stack_in": [],
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "117": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "118": {
      "op": "-",
      "defined_out": [
        "pay#0"
      ],
      "stack_out": [
        "pay#0"
      ]
    },
    "119": {
      "op": "dup",
      "defined_out": [
        "pay#0",
        "pay#0 (copy)"
      ],
      "stack_out": [
        "pay#0",
        "pay#0 (copy)"
      ]
    },
    "120": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_type%0#0",
        "pay#0"
      ],
      "stack_out": [
        "pay#0",
        "gtxn_type%0#0"
      ]
    },
    "122": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_type%0#0",
        "pay",
        "pay#0"
      ],
      "stack_out": [
        "pay#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "123": {
      "op": "==",
      "defined_out": [
        "gtxn_type_matches%0#0",
        "pay#0"
      ],
      "stack_out": [
        "pay#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "124": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "pay#0"
      ]
    },
    "125": {
      "op": "global GroupSize",
      "stack_out": [
        "pay#0",
        "tmp%0#0"
      ]
    },
    "127": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "pay#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "pay#0",
        "tmp%0#0",
        "2"
      ]
    },
    "129": {
      "op": "==",
      "defined_out": [
        "pay#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "pay#0",
        "tmp%1#1"
      ]
    },
    "130": {
      "error": "Expected 2 transactions",
      "op": "assert // Expected 2 transactions",
      "stack_out": [
        "pay#0"
      ]
    },
    "131": {
      "op": "dup",
      "stack_out": [
        "pay#0",
        "pay#0 (copy)"
      ]
    },
    "132": {
      "op": "gtxns Amount",
      "defined_out": [
        "pay#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "pay#0",
        "tmp%2#1"
      ]
    },
    "134": {
      "op": "pushint 10000 // 10000",
      "defined_out": [
        "10000",
        "pay#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "pay#0",
        "tmp%2#1",
        "10000"
      ]
    },
    "137": {
      "op": "==",
      "defined_out": [
        "pay#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "pay#0",
        "tmp%3#0"
      ]
    },
    "138": {
      "error": "Incorrect payment amount",
      "op": "assert // Incorrect payment amount",
      "stack_out": [
        "pay#0"
      ]
    },
    "139": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "141": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "143": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "144": {
      "error": "Payment sender must match transaction sender",
      "op": "assert // Payment sender must match transaction sender",
      "stack_out": []
    },
    "145": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "147": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "148": {
      "op": "bytec_2 // \"voted\"",
      "defined_out": [
        "\"voted\"",
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0",
        "\"voted\""
      ]
    },
    "149": {
      "op": "app_local_get_ex",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "150": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "152": {
      "op": "bz vote_after_if_else@3",
      "stack_out": []
    },
    "155": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "158": {
      "block": "vote_after_inlined_contracts/voting/voting.algo.ts::VotingContract.vote@4",
      "stack_in": [
        "tmp%1#0"
      ],
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x151f7c75"
      ]
    },
    "159": {
      "op": "swap",
      "defined_out": [
        "0x151f7c75",
        "tmp%1#0"
      ],
      "stack_out": [
        "0x151f7c75",
        "tmp%1#0"
      ]
    },
    "160": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "161": {
      "op": "log",
      "stack_out": []
    },
    "162": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "163": {
      "op": "return",
      "stack_out": []
    },
    "164": {
      "block": "vote_after_if_else@3",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "165": {
      "op": "bytec_0 // \"votes\"",
      "defined_out": [
        "\"votes\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"votes\""
      ]
    },
    "166": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "167": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "168": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "169": {
      "op": "+",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "170": {
      "op": "bytec_0 // \"votes\"",
      "stack_out": [
        "tmp%9#0",
        "\"votes\""
      ]
    },
    "171": {
      "op": "swap",
      "stack_out": [
        "\"votes\"",
        "tmp%9#0"
      ]
    },
    "172": {
      "op": "app_global_put",
      "stack_out": []
    },
    "173": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "175": {
      "op": "bytec_2 // \"voted\"",
      "defined_out": [
        "\"voted\"",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "\"voted\""
      ]
    },
    "176": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%10#0",
        "\"voted\"",
        "1"
      ]
    },
    "177": {
      "op": "app_local_put",
      "stack_out": []
    },
    "178": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "181": {
      "op": "b vote_after_inlined_contracts/voting/voting.algo.ts::VotingContract.vote@4"
    },
    "184": {
      "subroutine": "contracts/voting/voting.algo.ts::VotingContract.getVotes[routing]",
      "params": {},
      "block": "getVotes",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "185": {
      "op": "bytec_0 // \"votes\"",
      "defined_out": [
        "\"votes\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"votes\""
      ]
    },
    "186": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "187": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "188": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "189": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "190": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "191": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "192": {
      "op": "log",
      "stack_out": []
    },
    "193": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "194": {
      "op": "return",
      "stack_out": []
    }
  }
}