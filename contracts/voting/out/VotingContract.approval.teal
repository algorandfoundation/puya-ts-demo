#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    bytecblock "votes" "topic" 0x151f7c75 "voted"
    txn ApplicationID
    bnz main_after_if_else@2
    // contracts/voting/voting.algo.ts:16
    // key: Bytes("topic"),
    bytec_1 // "topic"
    // contracts/voting/voting.algo.ts:15
    // initialValue: Bytes("default_topic"),
    pushbytes "default_topic"
    // contracts/voting/voting.algo.ts:14-17
    // topic = GlobalState({
    //   initialValue: Bytes("default_topic"),
    //   key: Bytes("topic"),
    // });
    app_global_put
    // contracts/voting/voting.algo.ts:18
    // votes = GlobalState({ initialValue: Uint64(0), key: Bytes("votes") });
    bytec_0 // "votes"
    intc_1 // 0
    app_global_put

main_after_if_else@2:
    // contracts/voting/voting.algo.ts:13
    // export default class VotingContract extends arc4.Contract {
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0x5a0c3842 0xf3c986b3 0xe8f470ab // method "setTopic(string)void", method "vote(pay)bool", method "getVotes()uint64"
    txna ApplicationArgs 0
    match main_setTopic_route@5 main_vote_route@6 main_getVotes_route@7

main_after_if_else@14:
    // contracts/voting/voting.algo.ts:13
    // export default class VotingContract extends arc4.Contract {
    intc_1 // 0
    return

main_getVotes_route@7:
    // contracts/voting/voting.algo.ts:43
    // @arc4.abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getVotes
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_vote_route@6:
    // contracts/voting/voting.algo.ts:25
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/voting/voting.algo.ts:13
    // export default class VotingContract extends arc4.Contract {
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // contracts/voting/voting.algo.ts:25
    // @arc4.abimethod()
    callsub vote
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_setTopic_route@5:
    // contracts/voting/voting.algo.ts:21
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // contracts/voting/voting.algo.ts:13
    // export default class VotingContract extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    // contracts/voting/voting.algo.ts:21
    // @arc4.abimethod()
    callsub setTopic
    intc_0 // 1
    return

main_bare_routing@10:
    // contracts/voting/voting.algo.ts:13
    // export default class VotingContract extends arc4.Contract {
    txn OnCompletion
    bnz main_after_if_else@14
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// contracts/voting/voting.algo.ts::VotingContract.setTopic(topic: bytes) -> void:
setTopic:
    // contracts/voting/voting.algo.ts:21-22
    // @arc4.abimethod()
    // public setTopic(topic: string): void {
    proto 1 0
    // contracts/voting/voting.algo.ts:16
    // key: Bytes("topic"),
    bytec_1 // "topic"
    // contracts/voting/voting.algo.ts:23
    // this.topic.value = Bytes(topic);
    frame_dig -1
    app_global_put
    retsub


// contracts/voting/voting.algo.ts::VotingContract.vote(pay: uint64) -> bytes:
vote:
    // contracts/voting/voting.algo.ts:25-26
    // @arc4.abimethod()
    // public vote(pay: gtxn.PaymentTxn): arc4.Bool {
    proto 1 1
    // contracts/voting/voting.algo.ts:27
    // assert(op.Global.groupSize === 2, "Expected 2 transactions");
    global GroupSize
    pushint 2 // 2
    ==
    assert // Expected 2 transactions
    // contracts/voting/voting.algo.ts:28
    // assert(pay.amount === 10_000, "Incorrect payment amount");
    frame_dig -1
    gtxns Amount
    pushint 10000 // 10000
    ==
    assert // Incorrect payment amount
    // contracts/voting/voting.algo.ts:30
    // pay.sender === Txn.sender,
    frame_dig -1
    gtxns Sender
    txn Sender
    ==
    // contracts/voting/voting.algo.ts:29-32
    // assert(
    //   pay.sender === Txn.sender,
    //   "Payment sender must match transaction sender",
    // );
    assert // Payment sender must match transaction sender
    // contracts/voting/voting.algo.ts:34
    // if (this.voted(Txn.sender).hasValue) {
    txn Sender
    intc_1 // 0
    // contracts/voting/voting.algo.ts:19
    // voted = LocalState<uint64>({ key: Bytes("voted") });
    bytec_3 // "voted"
    // contracts/voting/voting.algo.ts:34
    // if (this.voted(Txn.sender).hasValue) {
    app_local_get_ex
    bury 1
    bz vote_after_if_else@2
    // contracts/voting/voting.algo.ts:35
    // return new arc4.Bool(false); // Already voted
    pushbytes 0x00
    retsub

vote_after_if_else@2:
    // contracts/voting/voting.algo.ts:18
    // votes = GlobalState({ initialValue: Uint64(0), key: Bytes("votes") });
    intc_1 // 0
    bytec_0 // "votes"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/voting/voting.algo.ts:38
    // this.votes.value = this.votes.value + 1;
    intc_0 // 1
    +
    // contracts/voting/voting.algo.ts:18
    // votes = GlobalState({ initialValue: Uint64(0), key: Bytes("votes") });
    bytec_0 // "votes"
    // contracts/voting/voting.algo.ts:38
    // this.votes.value = this.votes.value + 1;
    swap
    app_global_put
    // contracts/voting/voting.algo.ts:39
    // this.voted(Txn.sender).value = 1;
    txn Sender
    // contracts/voting/voting.algo.ts:19
    // voted = LocalState<uint64>({ key: Bytes("voted") });
    bytec_3 // "voted"
    // contracts/voting/voting.algo.ts:39
    // this.voted(Txn.sender).value = 1;
    intc_0 // 1
    app_local_put
    // contracts/voting/voting.algo.ts:40
    // return new arc4.Bool(true);
    pushbytes 0x80
    retsub


// contracts/voting/voting.algo.ts::VotingContract.getVotes() -> bytes:
getVotes:
    // contracts/voting/voting.algo.ts:18
    // votes = GlobalState({ initialValue: Uint64(0), key: Bytes("votes") });
    intc_1 // 0
    bytec_0 // "votes"
    app_global_get_ex
    assert // check GlobalState exists
    // contracts/voting/voting.algo.ts:45
    // return new arc4.UintN64(this.votes.value);
    itob
    retsub
