{
    "name": "VotingContract",
    "structs": {},
    "methods": [
        {
            "name": "setTopic",
            "args": [
                {
                    "type": "string",
                    "name": "topic"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "vote",
            "args": [
                {
                    "type": "pay",
                    "name": "pay"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getVotes",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 1
            },
            "local": {
                "ints": 1,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "topic": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "dG9waWM="
                },
                "votes": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dm90ZXM="
                }
            },
            "local": {
                "voted": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dm90ZWQ="
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        130
                    ],
                    "errorMessage": "Expected 2 transactions"
                },
                {
                    "pc": [
                        138
                    ],
                    "errorMessage": "Incorrect payment amount"
                },
                {
                    "pc": [
                        63
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        103
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        144
                    ],
                    "errorMessage": "Payment sender must match transaction sender"
                },
                {
                    "pc": [
                        167,
                        187
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        124
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBjb250cmFjdHMvdm90aW5nL3ZvdGluZy5hbGdvLnRzOjpWb3RpbmdDb250cmFjdC5jbGVhclN0YXRlUHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIC8vIGNvbnRyYWN0cy92b3Rpbmcvdm90aW5nLmFsZ28udHM6NDkKICAgIC8vIHJldHVybiB0cnVlOwogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "byteCode": {
        "approval": "CiACAQAmBAV2b3RlcwV0b3BpYwV2b3RlZAQVH3x1MRhAABQpgA1kZWZhdWx0X3RvcGljZygjZzEbQQAkMRkURDEYRIIDBFoMOEIE88mGswTo9HCrNhoAjgMACQAUAFkAMRkUMRgUEEM2GgFXAgApTGciQzEWIglJOBAiEkQyBIECEkRJOAiBkE4SRDgAMQASRDEAIypjRQFBAAmAAQArTFCwIkMjKGVEIggoTGcxACoiZoABgEL/5iMoZUQWK0xQsCJD",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}