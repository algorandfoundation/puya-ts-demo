#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 34 8
    bytecblock 0x0024
    // contracts/arc75/arc75.algo.ts:26
    // export class ARC75 extends Contract {
    txn OnCompletion
    !
    assert // OnCompletion must be NoOp
    txn ApplicationID
    bz main_create_NoOp@8
    pushbytess 0x467c7cbd 0xd198fcb8 0x7c33e832 0x7e1674ac // method "addAppToWhiteList(string,uint16,uint64,pay)void", method "setAppWhitelist(string,uint16,uint64[])void", method "deleteWhitelist(string,uint16)void", method "deleteAppFromWhitelist(string,uint16,uint64,uint64)void"
    txna ApplicationArgs 0
    match addAppToWhiteList setAppWhitelist deleteWhitelist deleteAppFromWhitelist
    err

main_create_NoOp@8:
    // contracts/arc75/arc75.algo.ts:26
    // export class ARC75 extends Contract {
    pushbytes 0xb8447b36 // method "createApplication()void"
    txna ApplicationArgs 0
    match main_createApplication_route@9
    err

main_createApplication_route@9:
    // contracts/arc75/arc75.algo.ts:45
    // @abimethod({ onCreate: "require" })
    intc_0 // 1
    return


// contracts/arc75/arc75.algo.ts::ARC75.addAppToWhiteList[routing]() -> void:
addAppToWhiteList:
    // contracts/arc75/arc75.algo.ts:57-62
    // addAppToWhiteList(
    //   arc: string,
    //   boxIndex: Uint16,
    //   appID: uint64,
    //   payment: gtxn.PaymentTxn,
    // ): void {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    cover 2
    txn GroupIndex
    intc_0 // 1
    -
    dup
    cover 4
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    // contracts/arc75/arc75.algo.ts:63
    // const preMBR = Global.currentApplicationAddress.minBalance;
    global CurrentApplicationAddress
    acct_params_get AcctMinBalance
    swap
    cover 4
    assert // account funded
    // contracts/arc75/arc75.algo.ts:65
    // account: new Address(Txn.sender),
    txn Sender
    // contracts/arc75/arc75.algo.ts:64-68
    // const whitelist = {
    //   account: new Address(Txn.sender),
    //   boxIndex: boxIndex,
    //   arc: arc,
    // };
    swap
    concat
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    swap
    bytec_0 // 0x0024
    concat
    swap
    concat
    // contracts/arc75/arc75.algo.ts:70
    // if (this.whitelist(whitelist).exists) {
    dup
    extract 0 32
    dig 1
    extract 32 2
    dig 2
    intc_2 // 34
    extract_uint16
    dig 3
    len
    uncover 4
    cover 2
    substring3
    extract 2 0
    cover 2
    concat
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    swap
    bytec_0 // 0x0024
    concat
    swap
    concat
    dup
    cover 2
    box_len
    bury 1
    bz addAppToWhiteList_else_body@3
    // contracts/arc75/arc75.algo.ts:71
    // this.whitelist(whitelist).value.push(appID);
    dig 1
    dup
    box_get
    assert // Box must have value
    uncover 2
    itob
    dig 1
    swap
    concat // on error: max array length exceeded
    swap
    intc_1 // 0
    extract_uint16
    intc_0 // 1
    +
    itob
    extract 6 2
    replace2 0
    dig 1
    box_del
    pop
    box_put

addAppToWhiteList_after_if_else@4:
    // contracts/arc75/arc75.algo.ts:76
    // this.verifyMBRPayment(payment, preMBR);
    dig 2
    dig 2
    callsub verifyMBRPayment
    // contracts/arc75/arc75.algo.ts:57-62
    // addAppToWhiteList(
    //   arc: string,
    //   boxIndex: Uint16,
    //   appID: uint64,
    //   payment: gtxn.PaymentTxn,
    // ): void {
    intc_0 // 1
    return

addAppToWhiteList_else_body@3:
    // contracts/arc75/arc75.algo.ts:73
    // this.whitelist(whitelist).value = [appID];
    itob
    pushbytes 0x0001
    swap
    concat
    dig 1
    dup
    box_del
    pop
    swap
    box_put
    b addAppToWhiteList_after_if_else@4


// contracts/arc75/arc75.algo.ts::ARC75.setAppWhitelist[routing]() -> void:
setAppWhitelist:
    // contracts/arc75/arc75.algo.ts:87
    // setAppWhitelist(arc: string, boxIndex: Uint16, appIDs: uint64[]): void {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // contracts/arc75/arc75.algo.ts:88
    // const preMBR = Global.currentApplicationAddress.minBalance;
    global CurrentApplicationAddress
    acct_params_get AcctMinBalance
    swap
    dup
    cover 5
    cover 5
    assert // account funded
    // contracts/arc75/arc75.algo.ts:90
    // account: new Address(Txn.sender),
    txn Sender
    // contracts/arc75/arc75.algo.ts:89-93
    // const whitelist = {
    //   account: new Address(Txn.sender),
    //   boxIndex: boxIndex,
    //   arc: arc,
    // };
    uncover 2
    concat
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    swap
    bytec_0 // 0x0024
    concat
    swap
    concat
    // contracts/arc75/arc75.algo.ts:95
    // this.whitelist(whitelist).delete();
    dup
    extract 0 32
    dig 1
    extract 32 2
    dig 2
    intc_2 // 34
    extract_uint16
    dig 3
    len
    uncover 4
    cover 2
    substring3
    extract 2 0
    cover 2
    concat
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    swap
    bytec_0 // 0x0024
    concat
    swap
    concat
    dup
    box_del
    pop
    // contracts/arc75/arc75.algo.ts:97
    // this.whitelist(whitelist).value = clone(appIDs);
    dup
    box_del
    pop
    swap
    box_put
    // contracts/arc75/arc75.algo.ts:99
    // if (preMBR > Global.currentApplicationAddress.minBalance) {
    global CurrentApplicationAddress
    acct_params_get AcctMinBalance
    assert // account funded
    >
    bz setAppWhitelist_else_body@3
    // contracts/arc75/arc75.algo.ts:100
    // this.sendMBRPayment(preMBR);
    callsub sendMBRPayment

setAppWhitelist_after_if_else@4:
    // contracts/arc75/arc75.algo.ts:87
    // setAppWhitelist(arc: string, boxIndex: Uint16, appIDs: uint64[]): void {
    intc_0 // 1
    return

setAppWhitelist_else_body@3:
    // contracts/arc75/arc75.algo.ts:102
    // this.verifyMBRPayment(gtxn.PaymentTxn(Txn.groupIndex - 1), preMBR);
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    swap
    callsub verifyMBRPayment
    b setAppWhitelist_after_if_else@4


// contracts/arc75/arc75.algo.ts::ARC75.deleteWhitelist[routing]() -> void:
deleteWhitelist:
    // contracts/arc75/arc75.algo.ts:113
    // deleteWhitelist(arc: string, boxIndex: Uint16): void {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    // contracts/arc75/arc75.algo.ts:114
    // const preMBR = Global.currentApplicationAddress.minBalance;
    global CurrentApplicationAddress
    acct_params_get AcctMinBalance
    assert // account funded
    // contracts/arc75/arc75.algo.ts:116
    // account: new Address(Txn.sender),
    txn Sender
    // contracts/arc75/arc75.algo.ts:115-119
    // const whitelist = {
    //   account: new Address(Txn.sender),
    //   boxIndex: boxIndex,
    //   arc: arc,
    // };
    uncover 2
    concat
    dig 2
    len
    itob
    extract 6 2
    uncover 3
    concat
    swap
    bytec_0 // 0x0024
    concat
    swap
    concat
    // contracts/arc75/arc75.algo.ts:121
    // this.whitelist(whitelist).delete();
    dup
    extract 0 32
    dig 1
    extract 32 2
    dig 2
    intc_2 // 34
    extract_uint16
    dig 3
    len
    uncover 4
    cover 2
    substring3
    extract 2 0
    cover 2
    concat
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    swap
    bytec_0 // 0x0024
    concat
    swap
    concat
    box_del
    pop
    // contracts/arc75/arc75.algo.ts:123
    // this.sendMBRPayment(preMBR);
    callsub sendMBRPayment
    // contracts/arc75/arc75.algo.ts:113
    // deleteWhitelist(arc: string, boxIndex: Uint16): void {
    intc_0 // 1
    return


// contracts/arc75/arc75.algo.ts::ARC75.deleteAppFromWhitelist[routing]() -> void:
deleteAppFromWhitelist:
    // contracts/arc75/arc75.algo.ts:134-139
    // deleteAppFromWhitelist(
    //   arc: string,
    //   boxIndex: Uint16,
    //   appID: uint64,
    //   index: uint64,
    // ): void {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    cover 2
    txna ApplicationArgs 4
    btoi
    dup
    cover 3
    cover 3
    // contracts/arc75/arc75.algo.ts:140
    // const preMBR = Global.currentApplicationAddress.minBalance;
    global CurrentApplicationAddress
    acct_params_get AcctMinBalance
    swap
    cover 4
    assert // account funded
    // contracts/arc75/arc75.algo.ts:142
    // account: new Address(Txn.sender),
    txn Sender
    // contracts/arc75/arc75.algo.ts:141-145
    // const whitelist = {
    //   account: new Address(Txn.sender),
    //   boxIndex: boxIndex,
    //   arc: arc,
    // };
    swap
    concat
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    swap
    bytec_0 // 0x0024
    concat
    swap
    concat
    // contracts/arc75/arc75.algo.ts:147
    // const spliced = this.whitelist(whitelist).value[index];
    dup
    extract 0 32
    dig 1
    extract 32 2
    dig 2
    intc_2 // 34
    extract_uint16
    dig 3
    len
    uncover 4
    cover 2
    substring3
    extract 2 0
    cover 2
    concat
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    swap
    bytec_0 // 0x0024
    concat
    swap
    concat
    dup
    uncover 2
    intc_3 // 8
    *
    pushint 2 // 2
    +
    intc_3 // 8
    box_extract
    btoi
    // contracts/arc75/arc75.algo.ts:149
    // const newWhiteList: uint64[] = [];
    pushbytes 0x0000
    // contracts/arc75/arc75.algo.ts:150
    // for (let i: uint64 = 0; i < this.whitelist(whitelist).value.length; i++) {
    intc_1 // 0

deleteAppFromWhitelist_while_top@2:
    // contracts/arc75/arc75.algo.ts:150
    // for (let i: uint64 = 0; i < this.whitelist(whitelist).value.length; i++) {
    dig 3
    intc_1 // 0
    pushint 2 // 2
    box_extract
    btoi
    dig 1
    >
    bz deleteAppFromWhitelist_after_while@6
    // contracts/arc75/arc75.algo.ts:151
    // if (i !== index) {
    dup
    dig 6
    !=
    bz deleteAppFromWhitelist_after_if_else@5
    // contracts/arc75/arc75.algo.ts:152
    // newWhiteList.push(this.whitelist(whitelist).value[i]);
    dup
    intc_3 // 8
    *
    pushint 2 // 2
    +
    dig 4
    swap
    intc_3 // 8
    box_extract
    btoi
    itob
    dig 2
    dup
    uncover 2
    concat // on error: max array length exceeded
    swap
    intc_1 // 0
    extract_uint16
    intc_0 // 1
    +
    itob
    extract 6 2
    replace2 0
    bury 2

deleteAppFromWhitelist_after_if_else@5:
    // contracts/arc75/arc75.algo.ts:150
    // for (let i: uint64 = 0; i < this.whitelist(whitelist).value.length; i++) {
    dup
    intc_0 // 1
    +
    bury 1
    b deleteAppFromWhitelist_while_top@2

deleteAppFromWhitelist_after_while@6:
    // contracts/arc75/arc75.algo.ts:155
    // this.whitelist(whitelist).value = clone(newWhiteList);
    dig 3
    dup
    box_del
    pop
    dig 2
    box_put
    // contracts/arc75/arc75.algo.ts:157
    // assert(spliced === appID);
    dig 2
    dig 7
    ==
    assert
    // contracts/arc75/arc75.algo.ts:159
    // this.sendMBRPayment(preMBR);
    dig 4
    callsub sendMBRPayment
    // contracts/arc75/arc75.algo.ts:134-139
    // deleteAppFromWhitelist(
    //   arc: string,
    //   boxIndex: Uint16,
    //   appID: uint64,
    //   index: uint64,
    // ): void {
    intc_0 // 1
    return


// contracts/arc75/arc75.algo.ts::ARC75.verifyMBRPayment(payment: uint64, preMBR: uint64) -> void:
verifyMBRPayment:
    // contracts/arc75/arc75.algo.ts:29
    // private verifyMBRPayment(payment: gtxn.PaymentTxn, preMBR: uint64): void {
    proto 2 0
    // contracts/arc75/arc75.algo.ts:30-33
    // assertMatch(payment, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: Global.currentApplicationAddress.minBalance - preMBR,
    // });
    frame_dig -2
    gtxns Receiver
    // contracts/arc75/arc75.algo.ts:31
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // contracts/arc75/arc75.algo.ts:30-33
    // assertMatch(payment, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: Global.currentApplicationAddress.minBalance - preMBR,
    // });
    ==
    frame_dig -2
    gtxns Amount
    // contracts/arc75/arc75.algo.ts:32
    // amount: Global.currentApplicationAddress.minBalance - preMBR,
    global CurrentApplicationAddress
    acct_params_get AcctMinBalance
    assert // account funded
    frame_dig -1
    -
    // contracts/arc75/arc75.algo.ts:30-33
    // assertMatch(payment, {
    //   receiver: Global.currentApplicationAddress,
    //   amount: Global.currentApplicationAddress.minBalance - preMBR,
    // });
    ==
    &&
    assert // assert target is match for conditions
    retsub


// contracts/arc75/arc75.algo.ts::ARC75.sendMBRPayment(preMBR: uint64) -> void:
sendMBRPayment:
    // contracts/arc75/arc75.algo.ts:36
    // private sendMBRPayment(preMBR: uint64): void {
    proto 1 0
    // contracts/arc75/arc75.algo.ts:37-42
    // itxn
    //   .payment({
    //     receiver: Txn.sender,
    //     amount: preMBR - Global.currentApplicationAddress.minBalance,
    //   })
    //   .submit();
    itxn_begin
    // contracts/arc75/arc75.algo.ts:39
    // receiver: Txn.sender,
    txn Sender
    // contracts/arc75/arc75.algo.ts:40
    // amount: preMBR - Global.currentApplicationAddress.minBalance,
    global CurrentApplicationAddress
    acct_params_get AcctMinBalance
    assert // account funded
    frame_dig -1
    swap
    -
    itxn_field Amount
    itxn_field Receiver
    // contracts/arc75/arc75.algo.ts:37-41
    // itxn
    //   .payment({
    //     receiver: Txn.sender,
    //     amount: preMBR - Global.currentApplicationAddress.minBalance,
    //   })
    intc_0 // 1
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    // contracts/arc75/arc75.algo.ts:37-42
    // itxn
    //   .payment({
    //     receiver: Txn.sender,
    //     amount: preMBR - Global.currentApplicationAddress.minBalance,
    //   })
    //   .submit();
    itxn_submit
    retsub
