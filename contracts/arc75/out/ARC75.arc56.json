{
    "name": "ARC75",
    "structs": {
        "Whitelist": [
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "boxIndex",
                "type": "uint16"
            },
            {
                "name": "arc",
                "type": "string"
            }
        ]
    },
    "methods": [
        {
            "name": "createApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addAppToWhiteList",
            "args": [
                {
                    "type": "string",
                    "name": "arc",
                    "desc": "- The ARC the whitelist corresponds to"
                },
                {
                    "type": "uint16",
                    "name": "boxIndex",
                    "desc": "- The index of the whitelist box to add the app to"
                },
                {
                    "type": "uint64",
                    "name": "appID",
                    "desc": "- The app ID to add to the whitelist"
                },
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "- The payment transaction to cover the MBR change"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Add app to whitelist box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setAppWhitelist",
            "args": [
                {
                    "type": "string",
                    "name": "arc"
                },
                {
                    "type": "uint16",
                    "name": "boxIndex",
                    "desc": "- The index of the whitelist box to put the app IDs in"
                },
                {
                    "type": "uint64[]",
                    "name": "appIDs",
                    "desc": "- Array of app IDs that signify the whitelisted apps"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets a app whitelist for the sender. Should only be used when adding/removing\nmore than one app",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deleteWhitelist",
            "args": [
                {
                    "type": "string",
                    "name": "arc",
                    "desc": "- The ARC the whitelist corresponds to"
                },
                {
                    "type": "uint16",
                    "name": "boxIndex",
                    "desc": "- The index of the whitelist box to delete"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deletes a app whitelist for the sender",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deleteAppFromWhitelist",
            "args": [
                {
                    "type": "string",
                    "name": "arc"
                },
                {
                    "type": "uint16",
                    "name": "boxIndex",
                    "desc": "- The index of the whitelist box to delete from"
                },
                {
                    "type": "uint64",
                    "name": "appID",
                    "desc": "- The app ID to delete from the whitelist"
                },
                {
                    "type": "uint64",
                    "name": "index",
                    "desc": "- The index of the app in the whitelist"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deletes a app from a whitelist for the sender",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "whitelist": {
                    "keyType": "Whitelist",
                    "valueType": "uint64[]",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        182
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        15
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        107,
                        254,
                        329,
                        369,
                        470,
                        647,
                        665
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        653
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        189,
                        586
                    ],
                    "errorMessage": "max array length exceeded"
                },
                {
                    "pc": [
                        99,
                        348
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAQAiCCYBAgAkMRkURDEYQQAkggQERnx8vQTRmPy4BHwz6DIEfhZ0rDYaAI4EABEAsAEsAX8AgAS4RHs2NhoAjgEAAQAiQzYaAVcCADYaAjYaAxdOAjEWIglJTgQ4ECISRDIKcwFMTgREMQBMUEsBFRZXBgJPAlBMKFBMUElXACBLAVcgAksCJFlLAxVPBE4CUlcCAE4CUEsBFRZXBgJPAlBMKFBMUElOAr1FAUEAJUsBSb5ETwIWSwFMUEwjWSIIFlcGAlwASwG8SL9LAksCiAGgIkMWgAIAAUxQSwFJvEhMv0L/5jYaAVcCADYaAjYaAzIKcwFMSU4FTgVEMQBPAlBLAhUWVwYCTwNQTChQTFBJVwAgSwFXIAJLAiRZSwMVTwROAlJXAgBOAlBLARUWVwYCTwJQTChQTFBJvEhJvEhMvzIKcwFEDUEABYgBPiJDMRYiCUk4ECISREyIARRC/+02GgFXAgA2GgIyCnMBRDEATwJQSwIVFlcGAk8DUEwoUExQSVcAIEsBVyACSwIkWUsDFU8ETgJSVwIATgJQSwEVFlcGAk8CUEwoUExQvEiIANoiQzYaAVcCADYaAjYaAxdOAjYaBBdJTgNOAzIKcwFMTgREMQBMUEsBFRZXBgJPAlBMKFBMUElXACBLAVcgAksCJFlLAxVPBE4CUlcCAE4CUEsBFRZXBgJPAlBMKFBMUElPAiULgQIIJboXgAIAACNLAyOBAroXSwENQQAvSUsGE0EAIEklC4ECCEsETCW6FxZLAklPAlBMI1kiCBZXBgJcAEUCSSIIRQFC/8RLA0m8SEsCv0sCSwcSREsEiAAcIkOKAgCL/jgHMgoSi/44CDIKcwFEi/8JEhBEiYoBALExADIKcwFEi/9MCbIIsgcishAjsgGziQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}