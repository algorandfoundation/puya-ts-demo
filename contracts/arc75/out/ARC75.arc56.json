{
    "name": "ARC75",
    "structs": {},
    "methods": [
        {
            "name": "createApplication",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addAppToWhiteList",
            "args": [
                {
                    "type": "string",
                    "name": "arc",
                    "desc": "- The ARC the whitelist corresponds to"
                },
                {
                    "type": "uint16",
                    "name": "boxIndex",
                    "desc": "- The index of the whitelist box to add the app to"
                },
                {
                    "type": "uint64",
                    "name": "appID",
                    "desc": "- The app ID to add to the whitelist"
                },
                {
                    "type": "pay",
                    "name": "payment",
                    "desc": "- The payment transaction to cover the MBR change"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Add app to whitelist box",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "setAppWhitelist",
            "args": [
                {
                    "type": "string",
                    "name": "arc"
                },
                {
                    "type": "uint16",
                    "name": "boxIndex",
                    "desc": "- The index of the whitelist box to put the app IDs in"
                },
                {
                    "type": "uint64[]",
                    "name": "appIDs",
                    "desc": "- Array of app IDs that signify the whitelisted apps"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Sets a app whitelist for the sender. Should only be used when adding/removing\nmore than one app",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deleteWhitelist",
            "args": [
                {
                    "type": "string",
                    "name": "arc",
                    "desc": "- The ARC the whitelist corresponds to"
                },
                {
                    "type": "uint16",
                    "name": "boxIndex",
                    "desc": "- The index of the whitelist box to delete"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deletes a app whitelist for the sender",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deleteAppFromWhitelist",
            "args": [
                {
                    "type": "string",
                    "name": "arc"
                },
                {
                    "type": "uint16",
                    "name": "boxIndex",
                    "desc": "- The index of the whitelist box to delete from"
                },
                {
                    "type": "uint64",
                    "name": "appID",
                    "desc": "- The app ID to delete from the whitelist"
                },
                {
                    "type": "uint64",
                    "name": "index",
                    "desc": "- The index of the app in the whitelist"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deletes a app from a whitelist for the sender",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {
                "whitelist": {
                    "keyType": "AVMBytes",
                    "valueType": "uint64[]",
                    "key": ""
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        282,
                        519,
                        532,
                        561
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        570
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        66,
                        95,
                        116,
                        140,
                        175
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        203,
                        228,
                        252,
                        338,
                        425,
                        461,
                        496
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        212
                    ],
                    "errorMessage": "assert target is match for conditions"
                },
                {
                    "pc": [
                        179
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        69,
                        98,
                        119,
                        143
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        166,
                        447
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiADAQAIJgICACQCAAAxG0EAKoIFBLhEezYERnx8vQTRmPy4BHwz6DIEfhZ0rDYaAI4FAG8ATAA0AB8AAiNDMRkURDEYRDYaAVcCADYaAjYaAxc2GgQXiAGOIkMxGRREMRhENhoBVwIANhoCiAFXIkMxGRREMRhENhoBVwIANhoCNhoDiADEIkMxGRREMRhENhoBVwIANhoCNhoDFzEWIglJOBAiEkSIAEsiQzEZFEQxGBREIkOKAgCL/jgHMgoSQQATi/44CDIKcwFEi/8JEkEAAyJEiSNC//qKAQCxMQAyCnMBRIv/TAmyCLIHIrIQI7IBs4mKBAAyCnMBRDEAi/wVFlcGAov8UEyL/VAoUExQSb1FAUEAIUm+RFcCAIv+FlBJFSQKFlcGAkxQSwG8SL+L/4sAiP9+iYv+FoACAAFMUExJvEhMv0L/5ooDADIKcwFEMQCL/RUWVwYCi/1QTIv+UChQTFBJvEgpI4v/I1mLAw1BACeLAlcCAIv/VwIAiwNJTgMkC1sWUEkVJAoWVwYCTFCMAiIIjANC/8+LAUm8SIsCvzIKcwFEiwAMQQAGiwCI/yWJMRYiCUk4ECISRIsAiP7xiYoCADIKcwFEMQCL/hUWVwYCi/5QTIv/UChQTFC8SIj+84mKBAAjMgpzAUQxAIv8FRZXBgKL/FBMi/1QKFBMUEm+RFcCAIv/JAspI4sCvkQjWYsGDUEAOIsGi/8TiwWMAEEAH4sFVwIAiwK+RFcCAIsGJAskWFBJFSQKFlcGAkxQjACLAIwFiwYiCIwGQv+8iwJJvEiLBb+LA4sEW4v+EkSLAYj+b4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}