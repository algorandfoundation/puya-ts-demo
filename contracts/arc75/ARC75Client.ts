/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from "@algorandfoundation/algokit-utils";
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from "@algorandfoundation/algokit-utils/types/app";
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from "@algorandfoundation/algokit-utils/types/app-client";
import type { AppSpec } from "@algorandfoundation/algokit-utils/types/app-spec";
import type {
  SendTransactionResult,
  TransactionToSign,
  SendTransactionFrom,
} from "@algorandfoundation/algokit-utils/types/transaction";
import type { ABIResult, TransactionWithSigner, modelsv2 } from "algosdk";
import {
  Algodv2,
  OnApplicationComplete,
  Transaction,
  AtomicTransactionComposer,
} from "algosdk";
export const APP_SPEC: AppSpec = {
  hints: {
    "createApplication()void": {
      call_config: {
        no_op: "CREATE",
      },
    },
    "addAppToWhiteList(string,uint16,uint64,pay)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "setAppWhitelist(string,uint16,uint64[])void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "deleteWhitelist(string,uint16)void": {
      call_config: {
        no_op: "CALL",
      },
    },
    "deleteAppFromWhitelist(string,uint16,uint64,uint64)void": {
      call_config: {
        no_op: "CALL",
      },
    },
  },
  source: {
    approval:
      "",
    clear:
      "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg==",
  },
  state: {
    global: {
      num_byte_slices: 0,
      num_uints: 0,
    },
    local: {
      num_byte_slices: 0,
      num_uints: 0,
    },
  },
  schema: {
    global: {
      declared: {},
      reserved: {},
    },
    local: {
      declared: {},
      reserved: {},
    },
  },
  contract: {
    name: "ARC75",
    methods: [
      {
        name: "createApplication",
        args: [],
        readonly: false,
        returns: {
          type: "void",
        },
      },
      {
        name: "addAppToWhiteList",
        args: [
          {
            type: "string",
            name: "arc",
            desc: "- The ARC the whitelist corresponds to",
          },
          {
            type: "uint16",
            name: "boxIndex",
            desc: "- The index of the whitelist box to add the app to",
          },
          {
            type: "uint64",
            name: "appID",
            desc: "- The app ID to add to the whitelist",
          },
          {
            type: "pay",
            name: "payment",
            desc: "- The payment transaction to cover the MBR change",
          },
        ],
        readonly: false,
        returns: {
          type: "void",
        },
        desc: "Add app to whitelist box",
      },
      {
        name: "setAppWhitelist",
        args: [
          {
            type: "string",
            name: "arc",
          },
          {
            type: "uint16",
            name: "boxIndex",
            desc: "- The index of the whitelist box to put the app IDs in",
          },
          {
            type: "uint64[]",
            name: "appIDs",
            desc: "- Array of app IDs that signify the whitelisted apps",
          },
        ],
        readonly: false,
        returns: {
          type: "void",
        },
        desc: "Sets a app whitelist for the sender. Should only be used when adding/removing\nmore than one app",
      },
      {
        name: "deleteWhitelist",
        args: [
          {
            type: "string",
            name: "arc",
            desc: "- The ARC the whitelist corresponds to",
          },
          {
            type: "uint16",
            name: "boxIndex",
            desc: "- The index of the whitelist box to delete",
          },
        ],
        readonly: false,
        returns: {
          type: "void",
        },
        desc: "Deletes a app whitelist for the sender",
      },
      {
        name: "deleteAppFromWhitelist",
        args: [
          {
            type: "string",
            name: "arc",
          },
          {
            type: "uint16",
            name: "boxIndex",
            desc: "- The index of the whitelist box to delete from",
          },
          {
            type: "uint64",
            name: "appID",
            desc: "- The app ID to delete from the whitelist",
          },
          {
            type: "uint64",
            name: "index",
            desc: "- The index of the app in the whitelist",
          },
        ],
        readonly: false,
        returns: {
          type: "void",
        },
        desc: "Deletes a app from a whitelist for the sender",
      },
    ],
    networks: {},
  },
  bare_call_config: {},
};

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = {
  onCompleteAction?: "no_op" | OnApplicationComplete.NoOpOC;
};
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = {
  onCompleteAction: "opt_in" | OnApplicationComplete.OptInOC;
};
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = {
  onCompleteAction: "close_out" | OnApplicationComplete.CloseOutOC;
};
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = {
  onCompleteAction:
    | "delete_application"
    | OnApplicationComplete.DeleteApplicationOC;
};
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = {
  onCompleteAction:
    | "update_application"
    | OnApplicationComplete.UpdateApplicationOC;
};
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt
   */
  asBigInt(): bigint;
  /**
   * Gets the state value as a number.
   */
  asNumber(): number;
};
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array;
  /**
   * Gets the state value as a string
   */
  asString(): string;
};

/**
 * Defines the types of available calls and state of the Arc75 smart contract.
 */
export type Arc75 = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods: Record<
    "createApplication()void" | "createApplication",
    {
      argsObj: {};
      argsTuple: [];
      returns: void;
    }
  > &
    Record<
      "addAppToWhiteList(string,uint16,uint64,pay)void" | "addAppToWhiteList",
      {
        argsObj: {
          /**
           * - The ARC the whitelist corresponds to
           */
          arc: string;
          /**
           * - The index of the whitelist box to add the app to
           */
          boxIndex: number;
          /**
           * - The app ID to add to the whitelist
           */
          appID: bigint | number;
          /**
           * - The payment transaction to cover the MBR change
           */
          payment:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>;
        };
        argsTuple: [
          arc: string,
          boxIndex: number,
          appID: bigint | number,
          payment:
            | TransactionToSign
            | Transaction
            | Promise<SendTransactionResult>,
        ];
        returns: void;
      }
    > &
    Record<
      "setAppWhitelist(string,uint16,uint64[])void" | "setAppWhitelist",
      {
        argsObj: {
          arc: string;
          /**
           * - The index of the whitelist box to put the app IDs in
           */
          boxIndex: number;
          /**
           * - Array of app IDs that signify the whitelisted apps
           */
          appIDs: bigint | number[];
        };
        argsTuple: [arc: string, boxIndex: number, appIDs: bigint | number[]];
        returns: void;
      }
    > &
    Record<
      "deleteWhitelist(string,uint16)void" | "deleteWhitelist",
      {
        argsObj: {
          /**
           * - The ARC the whitelist corresponds to
           */
          arc: string;
          /**
           * - The index of the whitelist box to delete
           */
          boxIndex: number;
        };
        argsTuple: [arc: string, boxIndex: number];
        returns: void;
      }
    > &
    Record<
      | "deleteAppFromWhitelist(string,uint16,uint64,uint64)void"
      | "deleteAppFromWhitelist",
      {
        argsObj: {
          arc: string;
          /**
           * - The index of the whitelist box to delete from
           */
          boxIndex: number;
          /**
           * - The app ID to delete from the whitelist
           */
          appID: bigint | number;
          /**
           * - The index of the app in the whitelist
           */
          index: bigint | number;
        };
        argsTuple: [
          arc: string,
          boxIndex: number,
          appID: bigint | number,
          index: bigint | number,
        ];
        returns: void;
      }
    >;
};
/**
 * Defines the possible abi call signatures
 */
export type Arc75Sig = keyof Arc75["methods"];
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends Arc75Sig | undefined> = {
  method: TSignature;
  methodArgs: TSignature extends undefined
    ? undefined
    : Array<ABIAppCallArg | undefined>;
} & AppClientCallCoreParams &
  CoreAppCallArgs;
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>;
/**
 * Maps a method signature from the Arc75 smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends Arc75Sig> =
  Arc75["methods"][TSignature]["argsObj" | "argsTuple"];
/**
 * Maps a method signature from the Arc75 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc75Sig> =
  Arc75["methods"][TSignature]["returns"];

/**
 * A factory for available 'create' calls
 */
export type Arc75CreateCalls = (typeof Arc75CallFactory)["create"];
/**
 * Defines supported create methods for this smart contract
 */
export type Arc75CreateCallParams = TypedCallParams<"createApplication()void"> &
  OnCompleteNoOp;
/**
 * Defines arguments required for the deploy method.
 */
export type Arc75DeployArgs = {
  deployTimeParams?: TealTemplateParams;
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: Arc75CreateCalls) => Arc75CreateCallParams;
};

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class Arc75CallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the ARC75 smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(
        args: MethodArgs<"createApplication()void">,
        params: AppClientCallCoreParams &
          CoreAppCallArgs &
          AppClientCompilationParams &
          OnCompleteNoOp = {},
      ) {
        return {
          method: "createApplication()void" as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        };
      },
    };
  }

  /**
   * Constructs a no op call for the addAppToWhiteList(string,uint16,uint64,pay)void ABI method
   *
   * Add app to whitelist box
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addAppToWhiteList(
    args: MethodArgs<"addAppToWhiteList(string,uint16,uint64,pay)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: "addAppToWhiteList(string,uint16,uint64,pay)void" as const,
      methodArgs: Array.isArray(args)
        ? args
        : [args.arc, args.boxIndex, args.appID, args.payment],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the setAppWhitelist(string,uint16,uint64[])void ABI method
   *
   * Sets a app whitelist for the sender. Should only be used when adding/removing
more than one app
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setAppWhitelist(
    args: MethodArgs<"setAppWhitelist(string,uint16,uint64[])void">,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: "setAppWhitelist(string,uint16,uint64[])void" as const,
      methodArgs: Array.isArray(args)
        ? args
        : [args.arc, args.boxIndex, args.appIDs],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the deleteWhitelist(string,uint16)void ABI method
   *
   * Deletes a app whitelist for the sender
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteWhitelist(
    args: MethodArgs<"deleteWhitelist(string,uint16)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method: "deleteWhitelist(string,uint16)void" as const,
      methodArgs: Array.isArray(args) ? args : [args.arc, args.boxIndex],
      ...params,
    };
  }
  /**
   * Constructs a no op call for the deleteAppFromWhitelist(string,uint16,uint64,uint64)void ABI method
   *
   * Deletes a app from a whitelist for the sender
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteAppFromWhitelist(
    args: MethodArgs<"deleteAppFromWhitelist(string,uint16,uint64,uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs,
  ) {
    return {
      method:
        "deleteAppFromWhitelist(string,uint16,uint64,uint64)void" as const,
      methodArgs: Array.isArray(args)
        ? args
        : [args.arc, args.boxIndex, args.appID, args.index],
      ...params,
    };
  }
}

/**
 * A client to make calls to the ARC75 smart contract
 */
export class Arc75Client {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient;

  private readonly sender: SendTransactionFrom | undefined;

  /**
   * Creates a new instance of `Arc75Client`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(
    appDetails: AppDetails,
    private algod: Algodv2,
  ) {
    this.sender = appDetails.sender;
    this.appClient = algokit.getAppClient(
      {
        ...appDetails,
        app: APP_SPEC,
      },
      algod,
    );
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(
    result: AppCallTransactionResult,
    returnValueFormatter?: (value: any) => TReturn,
  ): AppCallTransactionResultOfType<TReturn> {
    if (result.return?.decodeError) {
      throw result.return.decodeError;
    }
    const returnValue =
      result.return?.returnValue !== undefined &&
      returnValueFormatter !== undefined
        ? returnValueFormatter(result.return.returnValue)
        : (result.return?.returnValue as TReturn | undefined);
    return { ...result, return: returnValue };
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Arc75["methods"]>(
    typedCallParams: TypedCallParams<TSignature>,
    returnValueFormatter?: (value: any) => MethodReturn<TSignature>,
  ) {
    return this.mapReturnValue<MethodReturn<TSignature>>(
      await this.appClient.call(typedCallParams),
      returnValueFormatter,
    );
  }

  /**
   * Idempotently deploys the ARC75 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(
    params: Arc75DeployArgs & AppClientDeployCoreParams = {},
  ): ReturnType<ApplicationClient["deploy"]> {
    const createArgs = params.createCall?.(Arc75CallFactory.create);
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    });
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this;
    return {
      /**
       * Creates a new instance of the ARC75 smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(
        args: MethodArgs<"createApplication()void">,
        params: AppClientCallCoreParams &
          AppClientCompilationParams &
          OnCompleteNoOp = {},
      ): Promise<
        AppCallTransactionResultOfType<MethodReturn<"createApplication()void">>
      > {
        return $this.mapReturnValue(
          await $this.appClient.create(
            Arc75CallFactory.create.createApplication(args, params),
          ),
        );
      },
    };
  }

  /**
   * Makes a clear_state call to an existing instance of the ARC75 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(
    args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.appClient.clearState(args);
  }

  /**
   * Calls the addAppToWhiteList(string,uint16,uint64,pay)void ABI method.
   *
   * Add app to whitelist box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addAppToWhiteList(
    args: MethodArgs<"addAppToWhiteList(string,uint16,uint64,pay)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(Arc75CallFactory.addAppToWhiteList(args, params));
  }

  /**
   * Calls the setAppWhitelist(string,uint16,uint64[])void ABI method.
   *
   * Sets a app whitelist for the sender. Should only be used when adding/removing
more than one app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setAppWhitelist(
    args: MethodArgs<"setAppWhitelist(string,uint16,uint64[])void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(Arc75CallFactory.setAppWhitelist(args, params));
  }

  /**
   * Calls the deleteWhitelist(string,uint16)void ABI method.
   *
   * Deletes a app whitelist for the sender
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteWhitelist(
    args: MethodArgs<"deleteWhitelist(string,uint16)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(Arc75CallFactory.deleteWhitelist(args, params));
  }

  /**
   * Calls the deleteAppFromWhitelist(string,uint16,uint64,uint64)void ABI method.
   *
   * Deletes a app from a whitelist for the sender
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteAppFromWhitelist(
    args: MethodArgs<"deleteAppFromWhitelist(string,uint16,uint64,uint64)void">,
    params: AppClientCallCoreParams & CoreAppCallArgs = {},
  ) {
    return this.call(Arc75CallFactory.deleteAppFromWhitelist(args, params));
  }

  public compose(): Arc75Composer {
    const client = this;
    const atc = new AtomicTransactionComposer();
    let promiseChain: Promise<unknown> = Promise.resolve();
    const resultMappers: Array<undefined | ((x: any) => any)> = [];
    return {
      addAppToWhiteList(
        args: MethodArgs<"addAppToWhiteList(string,uint16,uint64,pay)void">,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.addAppToWhiteList(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      setAppWhitelist(
        args: MethodArgs<"setAppWhitelist(string,uint16,uint64[])void">,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.setAppWhitelist(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      deleteWhitelist(
        args: MethodArgs<"deleteWhitelist(string,uint16)void">,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.deleteWhitelist(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      deleteAppFromWhitelist(
        args: MethodArgs<"deleteAppFromWhitelist(string,uint16,uint64,uint64)void">,
        params?: AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.deleteAppFromWhitelist(args, {
            ...params,
            sendParams: { ...params?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      clearState(
        args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs,
      ) {
        promiseChain = promiseChain.then(() =>
          client.clearState({
            ...args,
            sendParams: { ...args?.sendParams, skipSending: true, atc },
          }),
        );
        resultMappers.push(undefined);
        return this;
      },
      addTransaction(
        txn:
          | TransactionWithSigner
          | TransactionToSign
          | Transaction
          | Promise<SendTransactionResult>,
        defaultSender?: SendTransactionFrom,
      ) {
        promiseChain = promiseChain.then(async () =>
          atc.addTransaction(
            await algokit.getTransactionWithSigner(
              txn,
              defaultSender ?? client.sender,
            ),
          ),
        );
        return this;
      },
      async atc() {
        await promiseChain;
        return atc;
      },
      async simulate() {
        await promiseChain;
        const result = await atc.simulate(client.algod);
        return result;
      },
      async execute() {
        await promiseChain;
        const result = await algokit.sendAtomicTransactionComposer(
          { atc, sendParams: {} },
          client.algod,
        );
        return {
          ...result,
          returns: result.returns?.map((val, i) =>
            resultMappers[i] !== undefined
              ? resultMappers[i]!(val.returnValue)
              : val.returnValue,
          ),
        };
      },
    } as unknown as Arc75Composer;
  }
}
export type Arc75Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the addAppToWhiteList(string,uint16,uint64,pay)void ABI method.
   *
   * Add app to whitelist box
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addAppToWhiteList(
    args: MethodArgs<"addAppToWhiteList(string,uint16,uint64,pay)void">,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): Arc75Composer<
    [
      ...TReturns,
      MethodReturn<"addAppToWhiteList(string,uint16,uint64,pay)void">,
    ]
  >;

  /**
   * Calls the setAppWhitelist(string,uint16,uint64[])void ABI method.
   *
   * Sets a app whitelist for the sender. Should only be used when adding/removing
more than one app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAppWhitelist(
    args: MethodArgs<"setAppWhitelist(string,uint16,uint64[])void">,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): Arc75Composer<
    [...TReturns, MethodReturn<"setAppWhitelist(string,uint16,uint64[])void">]
  >;

  /**
   * Calls the deleteWhitelist(string,uint16)void ABI method.
   *
   * Deletes a app whitelist for the sender
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteWhitelist(
    args: MethodArgs<"deleteWhitelist(string,uint16)void">,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): Arc75Composer<
    [...TReturns, MethodReturn<"deleteWhitelist(string,uint16)void">]
  >;

  /**
   * Calls the deleteAppFromWhitelist(string,uint16,uint64,uint64)void ABI method.
   *
   * Deletes a app from a whitelist for the sender
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteAppFromWhitelist(
    args: MethodArgs<"deleteAppFromWhitelist(string,uint16,uint64,uint64)void">,
    params?: AppClientCallCoreParams & CoreAppCallArgs,
  ): Arc75Composer<
    [
      ...TReturns,
      MethodReturn<"deleteAppFromWhitelist(string,uint16,uint64,uint64)void">,
    ]
  >;

  /**
   * Makes a clear_state call to an existing instance of the ARC75 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(
    args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs,
  ): Arc75Composer<[...TReturns, undefined]>;

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(
    txn:
      | TransactionWithSigner
      | TransactionToSign
      | Transaction
      | Promise<SendTransactionResult>,
    defaultSender?: SendTransactionFrom,
  ): Arc75Composer<TReturns>;
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>;
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc75ComposerSimulateResult>;
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<Arc75ComposerResults<TReturns>>;
};
export type Arc75ComposerSimulateResult = {
  methodResults: ABIResult[];
  simulateResponse: modelsv2.SimulateResponse;
};
export type Arc75ComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns;
  groupId: string;
  txIds: string[];
  transactions: Transaction[];
};
