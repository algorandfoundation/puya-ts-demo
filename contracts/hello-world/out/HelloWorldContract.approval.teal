#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    // contracts/hello-world/hello-world.algo.ts:3
    // export class HelloWorldContract extends Contract {
    txn NumAppArgs
    bz main___algots__.defaultCreate@5
    pushbytes 0xee67fb50 // method "sayHello(string)string"
    txna ApplicationArgs 0
    match main_sayHello_route@3
    err

main_sayHello_route@3:
    // contracts/hello-world/hello-world.algo.ts:4
    // sayHello(name: string): string {
    txn OnCompletion
    !
    txn ApplicationID
    &&
    assert // OnCompletion must be NoOp && can only call when not creating
    b sayHello

main___algots__.defaultCreate@5:
    // contracts/hello-world/hello-world.algo.ts:3
    // export class HelloWorldContract extends Contract {
    txn OnCompletion
    !
    txn ApplicationID
    !
    &&
    return // on error: OnCompletion must be NoOp && can only call when creating


// contracts/hello-world/hello-world.algo.ts::HelloWorldContract.sayHello[routing]() -> void:
sayHello:
    // contracts/hello-world/hello-world.algo.ts:4
    // sayHello(name: string): string {
    txna ApplicationArgs 1
    extract 2 0
    // contracts/hello-world/hello-world.algo.ts:5
    // return `${this.getHello()} ${name}`;
    pushbytes "Hello "
    swap
    concat
    // contracts/hello-world/hello-world.algo.ts:4
    // sayHello(name: string): string {
    dup
    len
    itob
    extract 6 2
    swap
    concat
    pushbytes 0x151f7c75
    swap
    concat
    log
    pushint 1 // 1
    return
